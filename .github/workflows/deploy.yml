name: üöÄ Deploy HRthis to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hrthis

jobs:
  deploy:
    name: üéØ Deploy to Hetzner Server
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup deployment environment
      run: |
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" > .env.production
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.production
        echo "REACT_APP_API_URL=https://hrthis-api.kibubot.com" >> .env.production
        echo "MAX_UPLOAD_SIZE=50MB" >> .env.production
        echo "ALLOWED_FILE_TYPES=pdf,doc,docx,jpg,jpeg,png" >> .env.production
        echo "LOG_LEVEL=INFO" >> .env.production
        
    - name: üîë Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts
        
    - name: üì¶ Deploy to server
      run: |
        # Create deployment package
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*.tar.gz' \
          --exclude='.github' \
          .
          
        # Copy to server
        scp deployment.tar.gz root@${{ secrets.HETZNER_HOST }}:/tmp/
        
        # Deploy on server
        ssh root@${{ secrets.HETZNER_HOST }} << 'EOF'
          set -e
          
          echo "üöÄ Starting deployment on server..."
          
          # Backup current version
          if [ -d "/root/hrthis" ]; then
            echo "üì¶ Creating backup..."
            mv /root/hrthis /root/hrthis.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Extract new version
          mkdir -p /root/hrthis
          cd /root/hrthis
          tar -xzf /tmp/deployment.tar.gz
          rm /tmp/deployment.tar.gz
          
          echo "‚è¨ Stopping current services..."
          docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
          
          echo "üèóÔ∏è Building and starting services..."
          docker-compose -f docker-compose.prod.yml up -d --build
          
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Health check
          echo "üè• Performing health checks..."
          
          # Check if containers are running
          if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "‚ùå Containers failed to start!"
            docker-compose -f docker-compose.prod.yml logs
            exit 1
          fi
          
          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ Backend health check passed"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Backend health check failed after 30 attempts"
              docker-compose -f docker-compose.prod.yml logs hrthis-backend
              exit 1
            fi
            echo "‚è≥ Waiting for backend... ($i/30)"
            sleep 10
          done
          
          # Check frontend
          if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ Frontend health check passed"
          else
            echo "‚ùå Frontend health check failed"
            docker-compose -f docker-compose.prod.yml logs hrthis-frontend
            exit 1
          fi
          
          echo "üéâ Deployment successful!"
          
          # Show status
          echo "üìä Service Status:"
          docker-compose -f docker-compose.prod.yml ps
          
        EOF
        
    - name: üåê Test live endpoints
      run: |
        echo "üß™ Testing live endpoints..."
        
        # Wait a bit more for nginx to catch up
        sleep 10
        
        # Test frontend
        if curl -f -s https://hrthis.kibubot.com > /dev/null; then
          echo "‚úÖ Frontend (https://hrthis.kibubot.com) is accessible"
        else
          echo "‚ö†Ô∏è Frontend might still be starting up"
        fi
        
        # Test backend API
        if curl -f -s https://hrthis-api.kibubot.com/docs > /dev/null; then
          echo "‚úÖ Backend API (https://hrthis-api.kibubot.com) is accessible"
        else
          echo "‚ö†Ô∏è Backend API might still be starting up"
        fi
        
    - name: üìß Notify on success
      if: success()
      run: |
        echo "üéâ HRthis successfully deployed!"
        echo "Frontend: https://hrthis.kibubot.com"
        echo "API: https://hrthis-api.kibubot.com/docs"
        
        # Optional: Send notification to Discord/Slack
        # curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"content":"üéâ HRthis deployed successfully!\n‚úÖ Frontend: https://hrthis.kibubot.com\n‚úÖ API: https://hrthis-api.kibubot.com"}'
        
    - name: üîÑ Rollback on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed! Attempting rollback..."
        
        ssh root@${{ secrets.HETZNER_HOST }} << 'EOF'
          set -e
          
          echo "üîÑ Rolling back to previous version..."
          
          # Stop failed deployment
          cd /root/hrthis
          docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
          
          # Find most recent backup
          BACKUP_DIR=$(ls -1dt /root/hrthis.backup.* | head -1)
          
          if [ ! -z "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
            echo "üì¶ Restoring from: $BACKUP_DIR"
            
            # Remove failed deployment
            rm -rf /root/hrthis
            
            # Restore backup
            mv "$BACKUP_DIR" /root/hrthis
            
            # Start previous version
            cd /root/hrthis
            docker-compose -f docker-compose.prod.yml up -d
            
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No backup found for rollback!"
            exit 1
          fi
          
        EOF
        
        # Optional: Send failure notification
        # curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"content":"‚ùå HRthis deployment failed and was rolled back!"}'