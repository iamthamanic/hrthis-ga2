name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: HRthis/package-lock.json
          
      - name: Install dependencies
        working-directory: ./HRthis
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./HRthis
        run: npm run lint
        
      - name: Run TypeScript check
        working-directory: ./HRthis
        run: npm run type-check
        
      - name: Run tests with coverage
        working-directory: ./HRthis
        run: npm run test:coverage
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./HRthis/coverage
          fail_ci_if_error: false
          
      - name: Check coverage thresholds
        working-directory: ./HRthis
        run: |
          COVERAGE=$(npx nyc report --reporter=text-summary | grep "Lines" | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "❌ Coverage is below 40% threshold"
            exit 1
          fi
          
      - name: Security audit
        working-directory: ./HRthis
        run: |
          npm audit --audit-level=high
          if [ $? -ne 0 ]; then
            echo "⚠️ Security vulnerabilities found"
          fi
        continue-on-error: true
        
      - name: Build application
        working-directory: ./HRthis
        run: npm run build
        
      - name: Check bundle size
        working-directory: ./HRthis
        run: |
          if [ -f "scripts/check-performance.js" ]; then
            node scripts/check-performance.js
          fi
        continue-on-error: true
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: HRthis/build/
          retention-days: 7

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: ${{ always() }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install backend dependencies
        working-directory: ./browo-hrthis-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run backend tests
        working-directory: ./browo-hrthis-backend
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./build
          
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your deployment script here
          # e.g., rsync, AWS S3, Vercel, Netlify, etc.
          
      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://hrthis.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./build
          
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment script here
          
      - name: Notify deployment
        if: always()
        run: |
          echo "📧 Sending deployment notification..."
          # Add notification logic (Slack, email, etc.)

  performance-check:
    name: Performance & Lighthouse
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./build
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './HRthis/.lighthouserc.json'
          uploadArtifacts: true
        continue-on-error: true