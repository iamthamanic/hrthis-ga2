[{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/anthropic.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[413,482],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\nThis is a custom client for the Anthropic API. You may update this service, but you should not need to.\n\nValid model names: \nclaude-sonnet-4-20250514\nclaude-3-7-sonnet-latest\nclaude-3-5-haiku-latest\n*/\nimport Anthropic from \"@anthropic-ai/sdk\";\n\nexport const getAnthropicClient = () => {\n  const apiKey = process.env.EXPO_PUBLIC_VIBECODE_ANTHROPIC_API_KEY;\n  if (!apiKey) {\n    console.warn(\"Anthropic API key not found in environment variables\");\n  }\n  return new Anthropic({\n    apiKey: apiKey,\n  });\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/chat-service.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1730,1775],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3089,3131],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4381,4421],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\n./src/api/chat-service.ts\nIf the user wants to use AI to generate text, answer questions, or analyze images you can use the functions defined in this file to communicate with the OpenAI, Anthropic, and Grok APIs.\n*/\nimport { AIMessage, AIRequestOptions, AIResponse } from \"../types/ai\";\nimport { getAnthropicClient } from \"./anthropic\";\nimport { getOpenAIClient } from \"./openai\";\nimport { getGrokClient } from \"./grok\";\n\n/**\n * Get a text response from Anthropic\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getAnthropicTextResponse = async (\n  messages: AIMessage[],\n  options?: AIRequestOptions,\n): Promise<AIResponse> => {\n  try {\n    const client = getAnthropicClient();\n    const defaultModel = \"claude-3-5-sonnet-20240620\";\n\n    const response = await client.messages.create({\n      model: options?.model || defaultModel,\n      messages: messages.map((msg) => ({\n        role: msg.role === \"assistant\" ? \"assistant\" : \"user\",\n        content: msg.content,\n      })),\n      max_tokens: options?.maxTokens || 2048,\n      temperature: options?.temperature || 0.7,\n    });\n\n    // Handle content blocks from the response\n    const content = response.content.reduce((acc, block) => {\n      if (\"text\" in block) {\n        return acc + block.text;\n      }\n      return acc;\n    }, \"\");\n\n    return {\n      content,\n      usage: {\n        promptTokens: response.usage?.input_tokens || 0,\n        completionTokens: response.usage?.output_tokens || 0,\n        totalTokens: (response.usage?.input_tokens || 0) + (response.usage?.output_tokens || 0),\n      },\n    };\n  } catch (error) {\n    console.error(\"Anthropic API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Anthropic\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getAnthropicChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getAnthropicTextResponse([{ role: \"user\", content: prompt }]);\n};\n\n/**\n * Get a text response from OpenAI\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getOpenAITextResponse = async (messages: AIMessage[], options?: AIRequestOptions): Promise<AIResponse> => {\n  try {\n    const client = getOpenAIClient();\n    const defaultModel = \"gpt-4o\"; //accepts images as well, use this for image analysis\n\n    const response = await client.chat.completions.create({\n      model: options?.model || defaultModel,\n      messages: messages,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens || 2048,\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || \"\",\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n    };\n  } catch (error) {\n    console.error(\"OpenAI API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from OpenAI\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getOpenAIChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getOpenAITextResponse([{ role: \"user\", content: prompt }]);\n};\n\n/**\n * Get a text response from Grok\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getGrokTextResponse = async (messages: AIMessage[], options?: AIRequestOptions): Promise<AIResponse> => {\n  try {\n    const client = getGrokClient();\n    const defaultModel = \"grok-3-beta\";\n\n    const response = await client.chat.completions.create({\n      model: options?.model || defaultModel,\n      messages: messages,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens || 2048,\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || \"\",\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n    };\n  } catch (error) {\n    console.error(\"Grok API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Grok\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getGrokChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getGrokTextResponse([{ role: \"user\", content: prompt }]);\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/grok.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[524,588],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\nThis is a custom client for the Grok API. You may update this service, but you should not need to.\nThe Grok API can be communicated with the \"openai\" package, so you can use the same functions as the openai package. It may not support all the same features, so please be careful.\n\n\ngrok-3-latest\ngrok-3-fast-latest\ngrok-3-mini-latest\n*/\nimport OpenAI from \"openai\";\n\nexport const getGrokClient = () => {\n  const apiKey = process.env.EXPO_PUBLIC_VIBECODE_GROK_API_KEY;\n  if (!apiKey) {\n    console.warn(\"Grok API key not found in environment variables\");\n  }\n  return new OpenAI({\n    apiKey: apiKey,\n    baseURL: \"https://api.x.ai/v1\",\n  });\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/image-generation.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1726,1795],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1951,2020],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2174,2249],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2339,2387],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\nThis is a custom asset generation service that uses a custom API endpoint maintained by Vibecode. If the user wants to build an app that generates images, assets, icons, or anything else, you must use this internal endpoint. Do not attempt to use replicate or chatgpt.\nYou may update this service, but you should not need to.\nThis endpoint uses openai's latest image generation API, AKA gpt4o, AKA gpt-image-1, so if the user is asking for that, this is the right service to use.\nDoes not support video and audio generation.\n*/\n\n// API endpoint configuration\nconst baseUrl = \"https://api.vibecodeapp.com\";\nconst endpoint = \"/api/storage/generate-image\";\n\n/**\n * Generate an image using the custom API endpoint\n * @param prompt The text prompt to generate an image from\n * @param options Optional parameters for image generation\n * @returns URL of the generated image, usable to render in the app directly.\n */\nexport async function generateImage(\n  prompt: string,\n  options?: {\n    size?: \"1024x1024\" | \"1536x1024\" | \"1024x1536\" | \"auto\";\n    quality?: \"low\" | \"medium\" | \"high\" | \"auto\";\n    format?: \"png\" | \"jpeg\" | \"webp\";\n    background?: undefined | \"transparent\";\n  }\n): Promise<string> {\n  try {\n    // Create request body\n    const requestBody = {\n      projectId: process.env.EXPO_PUBLIC_VIBECODE_PROJECT_ID,\n      prompt,\n      options: {\n        ...options,\n      },\n    };\n\n    // Make API request\n    const response = await fetch(`${baseUrl}${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error(\"[AssetGenerationService] Error response:\", errorData);\n      throw new Error(`Image generation API error: ${response.status} ${JSON.stringify(errorData)}`);\n    }\n\n    const result = await response.json();\n    console.log(\"[AssetGenerationService] Image generated successfully\");\n\n    // Return the image data from the response\n    if (result.success && result.data) {\n      return result.data.imageUrl as string;\n    } else {\n      console.error(\"[AssetGenerationService] Invalid response format:\", result);\n      throw new Error(\"Invalid response format from API\");\n    }\n  } catch (error) {\n    console.error(\"Image Generation Error:\", error);\n    throw error;\n  }\n}\n\n/**\n * Convert aspect ratio to size format\n * @param aspectRatio The aspect ratio to convert\n * @returns The corresponding size format\n */\nexport function convertAspectRatioToSize(aspectRatio: string): \"1024x1024\" | \"1536x1024\" | \"1024x1536\" | \"auto\" {\n  switch (aspectRatio) {\n    case \"1:1\":\n      return \"1024x1024\";\n    case \"3:2\":\n      return \"1536x1024\";\n    case \"2:3\":\n      return \"1024x1536\";\n    default:\n      return \"auto\";\n  }\n}","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/openai.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[371,437],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\nThis is a custom client for the OpenAI API. You may update this service, but you should not need to.\n\nvalid model names:\ngpt-4.1-2025-04-14\no4-mini-2025-04-16\ngpt-4o-2024-11-20\n*/\nimport OpenAI from \"openai\";\n\nexport const getOpenAIClient = () => {\n  const apiKey = process.env.EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY;\n  if (!apiKey) {\n    console.warn(\"OpenAI API key not found in environment variables\");\n  }\n  return new OpenAI({\n    apiKey: apiKey,\n  });\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/training-ai.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5884,5938],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7108,7162],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9798,9846],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getOpenAITextResponse } from './chat-service';\nimport { AIGenerationRequest, AIGeneratedContent } from '../types/training';\n\n/**\n * AI Training Content Generator\n * Uses OpenAI GPT-4o to generate training content, lessons, and quizzes\n */\n\nexport const generateTrainingContent = async (request: AIGenerationRequest): Promise<AIGeneratedContent> => {\n  const prompt = `\nDu bist ein Experte für Unternehmensschulungen und E-Learning. Erstelle eine strukturierte Schulung basierend auf folgenden Vorgaben:\n\n**Schulungsanfrage:**\n- Thema: ${request.topic}\n- Beschreibung: ${request.description}\n- Zielgruppe: ${request.targetAudience}\n- Dauer: ${request.duration} Minuten\n- Schwierigkeitsgrad: ${request.difficulty}\n- Anzahl Lektionen: ${request.lessonCount}\n- Quiz einschließen: ${request.includeQuiz ? 'Ja' : 'Nein'}\n\n**Aufgabe:**\nErstelle eine vollständige Schulung mit folgender Struktur:\n\n1. **Schulungstitel**: Prägnanter, professioneller Titel\n2. **Beschreibung**: Umfassende Beschreibung der Schulung (2-3 Sätze)\n3. **Lektionen**: ${request.lessonCount} Lektionen mit jeweils:\n   - Titel der Lektion\n   - Kurze Beschreibung (1-2 Sätze)\n   - Detaillierter Inhalt (strukturiert mit Überschriften, Aufzählungen, praktischen Beispielen)\n   ${request.includeQuiz ? '- Quiz mit 2-3 Multiple-Choice-Fragen pro Lektion\\n   - Jede Frage mit 4 Antwortmöglichkeiten, korrekter Antwort und Erklärung' : ''}\n\n${request.includeQuiz ? `4. **Abschlussprüfung**: \n   - 2-3 zusammenfassende Fragen über alle Lektionen\n   - Bestehensgrenze: 70%` : ''}\n\n**Wichtige Anforderungen:**\n- Inhalt muss praxisnah und unternehmensrelevant sein\n- Verwende klare, verständliche Sprache\n- Strukturiere den Inhalt logisch und aufbauend\n- Beispiele und Fallstudien einbauen\n- Bei ${request.difficulty === 'BEGINNER' ? 'Anfänger: Grundlagen erklären' : request.difficulty === 'INTERMEDIATE' ? 'Fortgeschritten: Vertiefte Kenntnisse vermitteln' : 'Experte: Spezialisiertes Fachwissen'}\n\n**Antwortformat:**\nAntworte ausschließlich in folgendem JSON-Format:\n\n{\n  \"title\": \"Schulungstitel\",\n  \"description\": \"Schulungsbeschreibung\",\n  \"lessons\": [\n    {\n      \"title\": \"Lektionstitel\",\n      \"description\": \"Lektionsbeschreibung\",\n      \"content\": \"Detaillierter Lektionsinhalt mit Markdown-Formatierung\",\n      ${request.includeQuiz ? `\"quiz\": {\n        \"questions\": [\n          {\n            \"question\": \"Frage?\",\n            \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n            \"correctAnswer\": 0,\n            \"explanation\": \"Erklärung der korrekten Antwort\"\n          }\n        ],\n        \"passingScore\": 80\n      }` : ''}\n    }\n  ]${request.includeQuiz ? `,\n  \"finalQuiz\": {\n    \"questions\": [\n      {\n        \"question\": \"Abschlussfrage?\",\n        \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n        \"correctAnswer\": 0,\n        \"explanation\": \"Erklärung\"\n      }\n    ],\n    \"passingScore\": 70\n  }` : ''}\n}\n\nErstelle jetzt die Schulung:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du bist ein Experte für Unternehmensschulungen und E-Learning-Content. Erstelle hochwertige, strukturierte Schulungsinhalte in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n    \n    const response = aiResponse.content;\n\n    // Parse the AI response\n    let parsedContent: AIGeneratedContent;\n    \n    try {\n      // Extract JSON from response (in case there's additional text)\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      const jsonString = jsonMatch ? jsonMatch[0] : response;\n      parsedContent = JSON.parse(jsonString);\n    } catch (parseError) {\n      // Fallback: create structured content from text response\n      parsedContent = {\n        title: `${request.topic} - Umfassende Schulung`,\n        description: `Eine strukturierte Schulung zu ${request.topic} für ${request.targetAudience}. Diese Schulung vermittelt alle wichtigen Grundlagen und praktischen Anwendungen.`,\n        lessons: Array.from({ length: request.lessonCount }, (_, i) => ({\n          title: `Lektion ${i + 1}: ${request.topic} Grundlagen`,\n          description: `In dieser Lektion lernen Sie die wichtigsten Aspekte von ${request.topic} kennen.`,\n          content: `# Lektion ${i + 1}: ${request.topic}\\n\\n${response.substring(0, 500)}...`,\n          quiz: request.includeQuiz ? {\n            questions: [\n              {\n                question: `Was ist das wichtigste Prinzip bei ${request.topic}?`,\n                options: [\n                  'Sicherheit und Compliance',\n                  'Effizienz',\n                  'Kostenoptimierung',\n                  'Alle genannten Punkte'\n                ],\n                correctAnswer: 3,\n                explanation: `Bei ${request.topic} sind alle Aspekte wichtig, aber besonders die Balance zwischen Sicherheit, Effizienz und Kosten.`\n              }\n            ],\n            passingScore: 80\n          } : undefined\n        })),\n        finalQuiz: request.includeQuiz ? {\n          questions: [\n            {\n              question: `Was haben Sie in dieser ${request.topic} Schulung gelernt?`,\n              options: [\n                'Grundlagen und Best Practices',\n                'Nur theoretisches Wissen',\n                'Veraltete Methoden',\n                'Nichts Neues'\n              ],\n              correctAnswer: 0,\n              explanation: 'Diese Schulung vermittelt sowohl theoretische Grundlagen als auch praktische Best Practices.'\n            }\n          ],\n          passingScore: 70\n        } : undefined\n      };\n    }\n\n    // Validate the generated content\n    if (!parsedContent.title || !parsedContent.description || !parsedContent.lessons) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    return parsedContent;\n  } catch (error) {\n    console.error('AI Training Generation Error:', error);\n    throw new Error('Fehler bei der KI-Generierung. Bitte versuchen Sie es erneut.');\n  }\n};\n\n/**\n * Generate a training certificate using AI\n */\nexport const generateCertificateText = async (\n  trainingTitle: string, \n  userName: string, \n  completionDate: string,\n  score: number\n): Promise<string> => {\n  const prompt = `\nErstelle einen professionellen Zertifikatstext für eine abgeschlossene Unternehmensschulung.\n\n**Details:**\n- Schulung: ${trainingTitle}\n- Teilnehmer: ${userName}\n- Abschlussdatum: ${completionDate}\n- Ergebnis: ${score}%\n\n**Anforderungen:**\n- Professioneller, offizieller Ton\n- Deutsche Sprache\n- Gratulation zur erfolgreichen Teilnahme\n- Bestätigung der erworbenen Kenntnisse\n- Verwende \"HRthis GmbH\" als ausstellendes Unternehmen\n\nErstelle einen strukturierten Zertifikatstext:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du erstellst professionelle Zertifikatstexte für Unternehmensschulungen in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n\n    return aiResponse.content;\n  } catch (error) {\n    console.error('Certificate Generation Error:', error);\n    \n    // Fallback certificate text\n    return `\nZERTIFIKAT\n\nHiermit wird bestätigt, dass\n\n${userName}\n\ndie Schulung \"${trainingTitle}\" erfolgreich abgeschlossen hat.\n\nAbschlussdatum: ${completionDate}\nErgebnis: ${score}%\n\nDiese Schulung vermittelte wichtige Kenntnisse und Fähigkeiten für den beruflichen Alltag.\n\nHRthis GmbH\nPersonalabteilung\n    `.trim();\n  }\n};\n\n/**\n * Generate email content for training notifications\n */\nexport const generateTrainingNotificationEmail = async (\n  type: 'NEW_TRAINING' | 'REMINDER' | 'DEADLINE_APPROACHING' | 'COMPLETED' | 'FAILED',\n  userName: string,\n  trainingTitle: string,\n  additionalInfo?: string\n): Promise<{ subject: string; body: string }> => {\n  let promptContext = '';\n  \n  switch (type) {\n    case 'NEW_TRAINING':\n      promptContext = 'eine neue Schulung ist verfügbar';\n      break;\n    case 'REMINDER':\n      promptContext = 'Erinnerung an eine nicht abgeschlossene Schulung';\n      break;\n    case 'DEADLINE_APPROACHING':\n      promptContext = 'die Deadline einer Schulung nähert sich';\n      break;\n    case 'COMPLETED':\n      promptContext = 'Gratulation zur abgeschlossenen Schulung';\n      break;\n    case 'FAILED':\n      promptContext = 'Information über nicht bestandene Schulung';\n      break;\n  }\n\n  const prompt = `\nErstelle eine professionelle E-Mail für ${promptContext}.\n\n**Details:**\n- Empfänger: ${userName}\n- Schulung: ${trainingTitle}\n- Zusätzliche Info: ${additionalInfo || 'Keine'}\n- Absender: HRthis GmbH Personalabteilung\n\n**Anforderungen:**\n- Professioneller aber freundlicher Ton\n- Deutsche Sprache\n- Passende Betreffzeile\n- Strukturierte E-Mail mit klaren Handlungsaufforderungen\n- Link zur HRthis App erwähnen\n\nErstelle Betreff und E-Mail-Text:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du erstellst professionelle E-Mail-Benachrichtigungen für Unternehmensschulungen in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n    \n    const response = aiResponse.content;\n\n    // Extract subject and body from response\n    const lines = response.split('\\n');\n    const subjectLine = lines.find((line: string) => line.toLowerCase().includes('betreff:') || line.toLowerCase().includes('subject:'));\n    const subject = subjectLine ? subjectLine.replace(/betreff:|subject:/i, '').trim() : `HRthis: ${trainingTitle}`;\n    \n    const bodyStart = response.indexOf('\\n\\n') > 0 ? response.indexOf('\\n\\n') + 2 : 0;\n    const body = response.substring(bodyStart).trim();\n\n    return { subject, body };\n  } catch (error) {\n    console.error('Email Generation Error:', error);\n    \n    // Fallback email content\n    const fallbackSubjects = {\n      NEW_TRAINING: `Neue Schulung verfügbar: ${trainingTitle}`,\n      REMINDER: `Erinnerung: Schulung \"${trainingTitle}\" noch nicht abgeschlossen`,\n      DEADLINE_APPROACHING: `Deadline nähert sich: ${trainingTitle}`,\n      COMPLETED: `Glückwunsch! Schulung \"${trainingTitle}\" erfolgreich abgeschlossen`,\n      FAILED: `Schulung \"${trainingTitle}\" - Wiederholung erforderlich`\n    };\n\n    return {\n      subject: fallbackSubjects[type],\n      body: `Hallo ${userName},\\n\\nbezüglich der Schulung \"${trainingTitle}\" gibt es eine wichtige Information.\\n\\nBitte loggen Sie sich in die HRthis App ein, um weitere Details zu erfahren.\\n\\nBeste Grüße\\nIhr HRthis Team`\n    };\n  }\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/api/transcribe-audio.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[694,697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[694,697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1443,1488],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\nThis is a custom audio transcription service that uses a custom API endpoint maintained by Vibecode.\nYou can use this function to transcribe audio files, and it will return the text of the audio file.\n*/\n\n/**\n * Transcribe an audio file\n * @param localAudioUri - The local URI of the audio file to transcribe. Obtained via the expo-av library.\n * @returns The text of the audio file\n */\nexport const transcribeAudio = async (localAudioUri: string) => {\n  try {\n    // Create FormData for the audio file\n    const formData = new FormData();\n    formData.append(\"file\", {\n      uri: localAudioUri,\n      type: \"audio/m4a\",\n      name: \"recording.m4a\",\n    } as any);\n    formData.append(\"model\", \"gpt-4o-transcribe\");\n    formData.append(\"language\", \"en\");\n\n    const OPENAI_API_KEY = process.env.EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY;\n    if (!OPENAI_API_KEY) {\n      throw new Error(\"OPENAI_API_KEY is not set\");\n    }\n\n    // API call to OpenAI's gpt-4o-transcribe\n    const response = await fetch(\"https://api.openai.com/v1/audio/transcriptions\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${OPENAI_API_KEY}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Transcription failed: ${errorText}`);\n    }\n\n    const result = await response.json();\n    return result.text;\n  } catch (error) {\n    console.error(\"Transcription error:\", error);\n    throw error;\n  }\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/AchievementsGallery.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showProgress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":253,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'lockedAchievements' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":266,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAchievementsStore } from '../state/achievements';\nimport { Achievement } from '../types/gamification';\nimport { cn } from '../utils/cn';\nimport { format } from 'date-fns';\nimport { de } from 'date-fns/locale';\n\ninterface AchievementsGalleryProps {\n  userId: string;\n  showLocked?: boolean;\n  showProgress?: boolean;\n  layout?: 'grid' | 'list';\n  filterCategory?: string;\n  className?: string;\n}\n\ninterface AchievementCardProps {\n  achievement: Achievement;\n  isUnlocked: boolean;\n  unlockedAt?: string;\n  progress?: number;\n  layout: 'grid' | 'list';\n  onClick?: () => void;\n}\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({\n  achievement,\n  isUnlocked,\n  unlockedAt,\n  progress = 0,\n  layout,\n  onClick\n}) => {\n  const rarityColors = {\n    common: 'from-gray-300 to-gray-500',\n    rare: 'from-blue-300 to-blue-500',\n    epic: 'from-purple-300 to-purple-500',\n    legendary: 'from-yellow-300 to-orange-500'\n  };\n\n  const rarityLabels = {\n    common: 'Häufig',\n    rare: 'Selten', \n    epic: 'Episch',\n    legendary: 'Legendär'\n  };\n\n  if (layout === 'list') {\n    return (\n      <div \n        className={cn(\n          \"flex items-center gap-4 p-4 bg-white rounded-lg border transition-all duration-200\",\n          isUnlocked \n            ? \"border-gray-200 hover:shadow-md cursor-pointer\" \n            : \"border-gray-100 opacity-60\",\n          onClick && \"hover:border-gray-300\"\n        )}\n        onClick={onClick}\n      >\n        {/* Icon */}\n        <div className={cn(\n          \"w-16 h-16 rounded-full flex items-center justify-center text-2xl text-white shadow-md relative\",\n          `bg-gradient-to-br ${rarityColors[achievement.rarity]}`,\n          !isUnlocked && \"grayscale\"\n        )}>\n          <span>{achievement.icon}</span>\n          {!isUnlocked && progress > 0 && (\n            <div className=\"absolute inset-0 rounded-full border-4 border-gray-300\">\n              <div \n                className=\"absolute inset-0 rounded-full border-4 border-blue-500\"\n                style={{\n                  clipPath: `polygon(50% 50%, 50% 0%, ${50 + (progress / 100) * 50}% 0%, 100% 100%, 0% 100%)`\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <div>\n              <h3 className={cn(\n                \"font-semibold\",\n                isUnlocked ? \"text-gray-900\" : \"text-gray-500\"\n              )}>\n                {achievement.name}\n              </h3>\n              <p className={cn(\n                \"text-sm\",\n                isUnlocked ? \"text-gray-600\" : \"text-gray-400\"\n              )}>\n                {achievement.description}\n              </p>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className={cn(\n                \"text-xs px-2 py-1 rounded-full font-medium\",\n                achievement.rarity === 'legendary' ? 'bg-yellow-100 text-yellow-800' :\n                achievement.rarity === 'epic' ? 'bg-purple-100 text-purple-800' :\n                achievement.rarity === 'rare' ? 'bg-blue-100 text-blue-800' :\n                'bg-gray-100 text-gray-800'\n              )}>\n                {rarityLabels[achievement.rarity]}\n              </div>\n              {isUnlocked && unlockedAt && (\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {format(new Date(unlockedAt), 'dd.MM.yyyy', { locale: de })}\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Progress bar for locked achievements */}\n          {!isUnlocked && progress > 0 && (\n            <div className=\"mt-2\">\n              <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                <span>Fortschritt</span>\n                <span>{Math.round(progress)}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${Math.min(100, progress)}%` }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Grid layout\n  return (\n    <div \n      className={cn(\n        \"bg-white rounded-xl p-6 border transition-all duration-200 group\",\n        isUnlocked \n          ? \"border-gray-200 hover:shadow-lg cursor-pointer hover:scale-105\" \n          : \"border-gray-100 opacity-70\",\n        onClick && \"hover:border-gray-300\"\n      )}\n      onClick={onClick}\n    >\n      {/* Icon */}\n      <div className=\"relative mb-4\">\n        <div className={cn(\n          \"w-20 h-20 rounded-full flex items-center justify-center text-3xl text-white shadow-lg mx-auto\",\n          `bg-gradient-to-br ${rarityColors[achievement.rarity]}`,\n          !isUnlocked && \"grayscale\"\n        )}>\n          <span>{achievement.icon}</span>\n        </div>\n        \n        {/* Progress ring for locked achievements */}\n        {!isUnlocked && progress > 0 && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <svg className=\"w-24 h-24 transform -rotate-90\">\n              <circle\n                cx=\"48\"\n                cy=\"48\" \n                r=\"44\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n                fill=\"none\"\n                className=\"text-gray-200\"\n              />\n              <circle\n                cx=\"48\"\n                cy=\"48\"\n                r=\"44\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n                fill=\"none\"\n                strokeDasharray={`${2 * Math.PI * 44}`}\n                strokeDashoffset={`${2 * Math.PI * 44 * (1 - progress / 100)}`}\n                className=\"text-blue-500 transition-all duration-300\"\n              />\n            </svg>\n          </div>\n        )}\n        \n        {/* Lock icon for locked achievements */}\n        {!isUnlocked && progress === 0 && (\n          <div className=\"absolute bottom-0 right-0 w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center text-white text-sm\">\n            🔒\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"text-center\">\n        <h3 className={cn(\n          \"font-semibold mb-2\",\n          isUnlocked ? \"text-gray-900\" : \"text-gray-500\"\n        )}>\n          {achievement.name}\n        </h3>\n        \n        <p className={cn(\n          \"text-sm mb-3\",\n          isUnlocked ? \"text-gray-600\" : \"text-gray-400\"\n        )}>\n          {achievement.description}\n        </p>\n        \n        {/* Rarity badge */}\n        <div className={cn(\n          \"inline-block text-xs px-3 py-1 rounded-full font-medium mb-2\",\n          achievement.rarity === 'legendary' ? 'bg-yellow-100 text-yellow-800' :\n          achievement.rarity === 'epic' ? 'bg-purple-100 text-purple-800' :\n          achievement.rarity === 'rare' ? 'bg-blue-100 text-blue-800' :\n          'bg-gray-100 text-gray-800'\n        )}>\n          {rarityLabels[achievement.rarity]}\n        </div>\n        \n        {/* Unlock date */}\n        {isUnlocked && unlockedAt && (\n          <p className=\"text-xs text-gray-500\">\n            Freigeschaltet am {format(new Date(unlockedAt), 'dd.MM.yyyy', { locale: de })}\n          </p>\n        )}\n        \n        {/* Progress for locked achievements */}\n        {!isUnlocked && progress > 0 && (\n          <div className=\"mt-3\">\n            <p className=\"text-xs text-gray-500 mb-1\">\n              {Math.round(progress)}% abgeschlossen\n            </p>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${Math.min(100, progress)}%` }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Achievements Gallery Component\n * Shows all achievements with unlock status and progress\n */\nexport const AchievementsGallery: React.FC<AchievementsGalleryProps> = ({\n  userId,\n  showLocked = true,\n  showProgress = true,\n  layout = 'grid',\n  filterCategory,\n  className\n}) => {\n  const { _getAchievements, _getUserAchievements, _getUnlockedAchievements, _getLockedAchievements, _getProgressStats } = useAchievementsStore();\n  \n  const [selectedCategory, setSelectedCategory] = useState<string>(filterCategory || 'all');\n  const [selectedAchievement, setSelectedAchievement] = useState<Achievement | null>(null);\n\n  const allAchievements = getAchievements();\n  const userAchievements = getUserAchievements(userId);\n  const unlockedAchievements = getUnlockedAchievements(userId);\n  const lockedAchievements = getLockedAchievements(userId);\n  const progressStats = getProgressStats(userId);\n\n  // Filter achievements\n  const filteredAchievements = allAchievements.filter(achievement => {\n    if (selectedCategory !== 'all' && achievement.category !== selectedCategory) {\n      return false;\n    }\n    if (!showLocked && !unlockedAchievements.some(ua => ua.id === achievement.id)) {\n      return false;\n    }\n    return true;\n  });\n\n  // Get categories\n  const categories = [\n    { id: 'all', name: 'Alle', icon: '🏆' },\n    { id: 'learning', name: 'Lernen', icon: '🎓' },\n    { id: 'attendance', name: 'Anwesenheit', icon: '⏰' },\n    { id: 'engagement', name: 'Engagement', icon: '💪' },\n    { id: 'milestone', name: 'Meilensteine', icon: '🎯' },\n    { id: 'special', name: 'Spezial', icon: '⭐' }\n  ];\n\n  const containerClasses = {\n    grid: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n    list: \"space-y-4\"\n  };\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Achievements</h2>\n          <p className=\"text-gray-600\">\n            {progressStats.unlockedAchievements} von {progressStats.totalAchievements} freigeschaltet \n            ({Math.round(progressStats.completionRate)}%)\n          </p>\n        </div>\n        \n        {/* Layout toggle */}\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => layout !== 'grid' && window.location.reload()}\n            className={cn(\n              \"p-2 rounded-lg\",\n              layout === 'grid' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'\n            )}\n          >\n            ⊞\n          </button>\n          <button\n            onClick={() => layout !== 'list' && window.location.reload()}\n            className={cn(\n              \"p-2 rounded-lg\",\n              layout === 'list' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'\n            )}\n          >\n            ☰\n          </button>\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n          <span>Fortschritt</span>\n          <span>{progressStats.unlockedAchievements}/{progressStats.totalAchievements}</span>\n        </div>\n        <div className=\"w-full bg-gray-200 rounded-full h-3\">\n          <div \n            className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-500\"\n            style={{ width: `${progressStats.completionRate}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Category filter */}\n      <div className=\"flex gap-2 mb-6 overflow-x-auto pb-2\">\n        {categories.map(category => {\n          const count = category.id === 'all' \n            ? allAchievements.length\n            : allAchievements.filter(a => a.category === category.id).length;\n            \n          return (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={cn(\n                \"flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors\",\n                selectedCategory === category.id\n                  ? \"bg-blue-100 text-blue-700\"\n                  : \"bg-gray-100 text-gray-600 hover:bg-gray-200\"\n              )}\n            >\n              <span>{category.icon}</span>\n              <span>{category.name}</span>\n              <span className=\"text-xs opacity-75\">({count})</span>\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Achievements grid/list */}\n      <div className={containerClasses[layout]}>\n        {filteredAchievements.map(achievement => {\n          const userAchievement = userAchievements.find(ua => ua.achievementId === achievement.id);\n          const isUnlocked = !!userAchievement;\n          \n          return (\n            <AchievementCard\n              key={achievement.id}\n              achievement={achievement}\n              isUnlocked={isUnlocked}\n              unlockedAt={userAchievement?.unlockedAt}\n              progress={userAchievement?.progress || 0}\n              layout={layout}\n              onClick={() => setSelectedAchievement(achievement)}\n            />\n          );\n        })}\n      </div>\n\n      {/* Empty state */}\n      {filteredAchievements.length === 0 && (\n        <div className=\"text-center py-12\">\n          <span className=\"text-6xl mb-4 block\">🏆</span>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n            Keine Achievements gefunden\n          </h3>\n          <p className=\"text-gray-600\">\n            Probiere einen anderen Filter oder starte mit deinen ersten Aktivitäten!\n          </p>\n        </div>\n      )}\n\n      {/* Achievement Detail Modal */}\n      {selectedAchievement && (() => {\n        const modalRarityColors = {\n          common: 'from-gray-300 to-gray-500',\n          rare: 'from-blue-300 to-blue-500',\n          epic: 'from-purple-300 to-purple-500',\n          legendary: 'from-yellow-300 to-orange-500'\n        };\n        \n        const modalRarityLabels = {\n          common: 'Häufig',\n          rare: 'Selten',\n          epic: 'Episch',\n          legendary: 'Legendär'\n        };\n        \n        return (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white rounded-xl p-6 max-w-md w-full\">\n              <div className=\"text-center\">\n                <div className={cn(\n                  \"w-24 h-24 rounded-full flex items-center justify-center text-4xl text-white shadow-lg mx-auto mb-4\",\n                  `bg-gradient-to-br ${modalRarityColors[selectedAchievement.rarity]}`\n                )}>\n                  {selectedAchievement.icon}\n                </div>\n                \n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                  {selectedAchievement.name}\n                </h3>\n                \n                <p className=\"text-gray-600 mb-4\">\n                  {selectedAchievement.description}\n                </p>\n                \n                <div className=\"flex justify-center gap-4 mb-6\">\n                  <div className={cn(\n                    \"px-3 py-1 rounded-full text-sm font-medium\",\n                    selectedAchievement.rarity === 'legendary' ? 'bg-yellow-100 text-yellow-800' :\n                    selectedAchievement.rarity === 'epic' ? 'bg-purple-100 text-purple-800' :\n                    selectedAchievement.rarity === 'rare' ? 'bg-blue-100 text-blue-800' :\n                    'bg-gray-100 text-gray-800'\n                  )}>\n                    {modalRarityLabels[selectedAchievement.rarity]}\n                  </div>\n                </div>\n                \n                <button\n                  onClick={() => setSelectedAchievement(null)}\n                  className=\"w-full bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors\"\n                >\n                  Schließen\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      })()}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/AvatarCustomization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":268,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8300,8303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8300,8303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Avatar, AvatarAccessory, Badge } from '../types/learning';\nimport { useLearningStore } from '../state/learning';\nimport { cn } from '../utils/cn';\n\ninterface AvatarCustomizationProps {\n  avatar: Avatar;\n  onUpdate: (avatar: Avatar) => void;\n  onClose: () => void;\n}\n\nexport const AvatarCustomization: React.FC<AvatarCustomizationProps> = ({\n  avatar,\n  onUpdate,\n  onClose\n}) => {\n  const { userCoins, ownedItems, purchaseItem } = useLearningStore();\n  const [activeTab, setActiveTab] = useState<'accessories' | 'badges' | 'colors'>('accessories');\n  const [previewAvatar, setPreviewAvatar] = useState<Avatar>(avatar);\n\n  // Mock accessories data\n  const availableAccessories: AvatarAccessory[] = [\n    {\n      id: 'hat_graduation',\n      type: 'hat',\n      name: 'Absolventenhut',\n      imageUrl: '/avatars/hats/graduation.png',\n      requiredLevel: 5\n    },\n    {\n      id: 'glasses_nerd',\n      type: 'glasses',\n      name: 'Nerd-Brille',\n      imageUrl: '/avatars/glasses/nerd.png',\n      price: 100\n    },\n    {\n      id: 'glasses_cool',\n      type: 'glasses',\n      name: 'Sonnenbrille',\n      imageUrl: '/avatars/glasses/sunglasses.png',\n      price: 150\n    },\n    {\n      id: 'clothing_suit',\n      type: 'clothing',\n      name: 'Business Anzug',\n      imageUrl: '/avatars/clothing/suit.png',\n      price: 300\n    },\n    {\n      id: 'clothing_casual',\n      type: 'clothing',\n      name: 'Casual Look',\n      imageUrl: '/avatars/clothing/casual.png',\n      price: 200\n    },\n    {\n      id: 'effect_glow',\n      type: 'effect',\n      name: 'Goldener Schein',\n      imageUrl: '/avatars/effects/golden-glow.png',\n      price: 500\n    },\n    {\n      id: 'effect_sparkles',\n      type: 'effect',\n      name: 'Sterne-Effekt',\n      imageUrl: '/avatars/effects/sparkles.png',\n      price: 400\n    },\n    {\n      id: 'background_office',\n      type: 'background',\n      name: 'Büro-Hintergrund',\n      imageUrl: '/avatars/backgrounds/office.png',\n      price: 250\n    },\n    {\n      id: 'background_nature',\n      type: 'background',\n      name: 'Natur-Hintergrund',\n      imageUrl: '/avatars/backgrounds/nature.png',\n      price: 250\n    }\n  ];\n\n  const baseColors = [\n    '#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6',\n    '#F97316', '#06B6D4', '#84CC16', '#EC4899', '#6366F1'\n  ];\n\n  const canUseAccessory = (accessory: AvatarAccessory) => {\n    if (accessory.requiredLevel && avatar.level < accessory.requiredLevel) {\n      return false;\n    }\n    if (accessory.price && !ownedItems.includes(accessory.id)) {\n      return userCoins >= accessory.price;\n    }\n    return true;\n  };\n\n  const isAccessoryOwned = (accessory: AvatarAccessory) => {\n    return !accessory.price || ownedItems.includes(accessory.id);\n  };\n\n  const isAccessoryEquipped = (accessory: AvatarAccessory) => {\n    return previewAvatar.accessories.some(a => a.id === accessory.id);\n  };\n\n  const toggleAccessory = (accessory: AvatarAccessory) => {\n    if (!canUseAccessory(accessory)) return;\n\n    if (!isAccessoryOwned(accessory) && accessory.price) {\n      if (purchaseItem(accessory.id)) {\n        equipAccessory(accessory);\n      }\n    } else {\n      equipAccessory(accessory);\n    }\n  };\n\n  const equipAccessory = (accessory: AvatarAccessory) => {\n    const currentAccessories = previewAvatar.accessories.filter(a => a.type !== accessory.type);\n    \n    if (!isAccessoryEquipped(accessory)) {\n      setPreviewAvatar({\n        ...previewAvatar,\n        accessories: [...currentAccessories, accessory]\n      });\n    } else {\n      setPreviewAvatar({\n        ...previewAvatar,\n        accessories: currentAccessories\n      });\n    }\n  };\n\n  const handleSave = () => {\n    onUpdate(previewAvatar);\n    onClose();\n  };\n\n  const renderAvatarPreview = () => {\n    const backgroundAccessory = previewAvatar.accessories.find(a => a.type === 'background');\n    const effectAccessory = previewAvatar.accessories.find(a => a.type === 'effect');\n    \n    return (\n      <div className=\"relative w-48 h-48 mx-auto rounded-full overflow-hidden border-4 border-gray-200\">\n        {/* Background */}\n        {backgroundAccessory ? (\n          <img \n            src={backgroundAccessory.imageUrl} \n            alt=\"Background\"\n            className=\"absolute inset-0 w-full h-full object-cover\"\n          />\n        ) : (\n          <div \n            className=\"absolute inset-0\"\n            style={{ backgroundColor: previewAvatar.baseModel || '#3B82F6' }}\n          />\n        )}\n\n        {/* Base Avatar */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-32 h-32 rounded-full bg-white bg-opacity-90 flex items-center justify-center text-6xl font-bold text-gray-800\">\n            {avatar.userId.charAt(0).toUpperCase()}\n          </div>\n        </div>\n\n        {/* Clothing */}\n        {previewAvatar.accessories\n          .filter(a => a.type === 'clothing')\n          .map(accessory => (\n            <img\n              key={accessory.id}\n              src={accessory.imageUrl}\n              alt={accessory.name}\n              className=\"absolute inset-0 w-full h-full object-cover\"\n            />\n          ))}\n\n        {/* Glasses */}\n        {previewAvatar.accessories\n          .filter(a => a.type === 'glasses')\n          .map(accessory => (\n            <img\n              key={accessory.id}\n              src={accessory.imageUrl}\n              alt={accessory.name}\n              className=\"absolute inset-0 w-full h-full object-cover\"\n            />\n          ))}\n\n        {/* Hat */}\n        {previewAvatar.accessories\n          .filter(a => a.type === 'hat')\n          .map(accessory => (\n            <img\n              key={accessory.id}\n              src={accessory.imageUrl}\n              alt={accessory.name}\n              className=\"absolute inset-0 w-full h-full object-cover\"\n            />\n          ))}\n\n        {/* Effects */}\n        {effectAccessory && (\n          <div className=\"absolute inset-0 animate-pulse\">\n            <img\n              src={effectAccessory.imageUrl}\n              alt={effectAccessory.name}\n              className=\"w-full h-full object-cover opacity-70\"\n            />\n          </div>\n        )}\n\n        {/* Level Badge */}\n        <div className=\"absolute -bottom-2 -right-2 bg-yellow-400 rounded-full w-12 h-12 flex items-center justify-center text-lg font-bold border-2 border-white\">\n          {avatar.level}\n        </div>\n      </div>\n    );\n  };\n\n  const tabs = [\n    { id: 'accessories', label: 'Zubehör', icon: '👓' },\n    { id: 'badges', label: 'Abzeichen', icon: '🏅' },\n    { id: 'colors', label: 'Farben', icon: '🎨' }\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">Avatar anpassen</h2>\n              <p className=\"opacity-90\">Gestalte deinen Avatar individuell</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm opacity-90\">Münzen</p>\n              <p className=\"text-2xl font-bold\">🪙 {userCoins}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex h-[600px]\">\n          {/* Preview */}\n          <div className=\"w-1/3 bg-gray-50 p-6 flex flex-col items-center justify-center\">\n            {renderAvatarPreview()}\n            <div className=\"mt-6 text-center\">\n              <h3 className=\"text-xl font-bold text-gray-900\">{avatar.userId}</h3>\n              <p className=\"text-purple-600 font-medium\">{avatar.title}</p>\n              <p className=\"text-sm text-gray-600 mt-2\">Level {avatar.level}</p>\n            </div>\n          </div>\n\n          {/* Customization Panel */}\n          <div className=\"flex-1 flex flex-col\">\n            {/* Tabs */}\n            <div className=\"border-b\">\n              <div className=\"flex\">\n                {tabs.map(tab => (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id as any)}\n                    className={cn(\n                      \"flex items-center gap-2 px-6 py-4 font-medium border-b-2 transition-colors\",\n                      activeTab === tab.id\n                        ? \"border-blue-500 text-blue-600 bg-blue-50\"\n                        : \"border-transparent text-gray-600 hover:text-gray-900\"\n                    )}\n                  >\n                    <span>{tab.icon}</span>\n                    <span>{tab.label}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex-1 p-6 overflow-y-auto\">\n              {activeTab === 'accessories' && (\n                <div className=\"space-y-6\">\n                  {(['hat', 'glasses', 'clothing', 'background', 'effect'] as const).map(type => {\n                    const typeAccessories = availableAccessories.filter(a => a.type === type);\n                    const typeLabels = {\n                      hat: 'Hüte',\n                      glasses: 'Brillen',\n                      clothing: 'Kleidung',\n                      background: 'Hintergründe',\n                      effect: 'Effekte'\n                    };\n\n                    return (\n                      <div key={type}>\n                        <h4 className=\"font-bold text-lg text-gray-900 mb-3\">\n                          {typeLabels[type]}\n                        </h4>\n                        <div className=\"grid grid-cols-3 gap-3\">\n                          {typeAccessories.map(accessory => {\n                            const canUse = canUseAccessory(accessory);\n                            const isOwned = isAccessoryOwned(accessory);\n                            const isEquipped = isAccessoryEquipped(accessory);\n\n                            return (\n                              <div\n                                key={accessory.id}\n                                className={cn(\n                                  \"border-2 rounded-lg p-3 cursor-pointer transition-all relative\",\n                                  isEquipped\n                                    ? \"border-blue-500 bg-blue-50\"\n                                    : canUse\n                                    ? \"border-gray-200 hover:border-gray-300\"\n                                    : \"border-gray-100 opacity-50 cursor-not-allowed\"\n                                )}\n                                onClick={() => canUse && toggleAccessory(accessory)}\n                              >\n                                <div className=\"aspect-square bg-gray-100 rounded mb-2 flex items-center justify-center text-2xl\">\n                                  👕\n                                </div>\n                                <p className=\"text-sm font-medium text-center\">\n                                  {accessory.name}\n                                </p>\n                                \n                                {accessory.price && !isOwned && (\n                                  <div className=\"text-center mt-1\">\n                                    <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded\">\n                                      🪙 {accessory.price}\n                                    </span>\n                                  </div>\n                                )}\n\n                                {accessory.requiredLevel && avatar.level < accessory.requiredLevel && (\n                                  <div className=\"text-center mt-1\">\n                                    <span className=\"text-xs bg-red-100 text-red-800 px-2 py-1 rounded\">\n                                      Level {accessory.requiredLevel}\n                                    </span>\n                                  </div>\n                                )}\n\n                                {isEquipped && (\n                                  <div className=\"absolute top-1 right-1 bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs\">\n                                    ✓\n                                  </div>\n                                )}\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n\n              {activeTab === 'colors' && (\n                <div>\n                  <h4 className=\"font-bold text-lg text-gray-900 mb-3\">\n                    Avatar-Farben\n                  </h4>\n                  <div className=\"grid grid-cols-5 gap-3\">\n                    {baseColors.map(color => (\n                      <button\n                        key={color}\n                        onClick={() => setPreviewAvatar({\n                          ...previewAvatar,\n                          baseModel: color\n                        })}\n                        className={cn(\n                          \"w-16 h-16 rounded-full border-4 transition-all\",\n                          previewAvatar.baseModel === color\n                            ? \"border-gray-900 scale-110\"\n                            : \"border-gray-300 hover:scale-105\"\n                        )}\n                        style={{ backgroundColor: color }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'badges' && (\n                <div>\n                  <h4 className=\"font-bold text-lg text-gray-900 mb-3\">\n                    Errungene Abzeichen\n                  </h4>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    {avatar.badges.map(badge => (\n                      <div\n                        key={badge.id}\n                        className=\"border border-gray-200 rounded-lg p-4 text-center\"\n                      >\n                        <div className=\"text-4xl mb-2\">{badge.icon}</div>\n                        <p className=\"font-medium\">{badge.name}</p>\n                        <p className=\"text-sm text-gray-600\">{badge.description}</p>\n                        <span className={cn(\n                          \"inline-block mt-2 px-2 py-1 rounded-full text-xs font-medium\",\n                          badge.rarity === 'legendary' && \"bg-yellow-100 text-yellow-800\",\n                          badge.rarity === 'epic' && \"bg-purple-100 text-purple-800\",\n                          badge.rarity === 'rare' && \"bg-blue-100 text-blue-800\",\n                          badge.rarity === 'common' && \"bg-gray-100 text-gray-800\"\n                        )}>\n                          {badge.rarity}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"border-t bg-gray-50 p-4 flex justify-between\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-100\"\n          >\n            Abbrechen\n          </button>\n          <button\n            onClick={handleSave}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n          >\n            Speichern\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/AvatarDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userAchievements' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'progressPercent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useAvatarStore } from '../state/avatar';\nimport { useAchievementsStore } from '../state/achievements';\nimport { cn } from '../utils/cn';\n\ninterface AvatarDisplayProps {\n  userId: string;\n  showEditButton?: boolean;\n  onEdit?: () => void;\n  className?: string;\n}\n\n/**\n * Large Avatar Display Component (for Settings/Profile page)\n * Shows full avatar with level, skills, and achievements like Screenshot 2\n */\nexport const AvatarDisplay: React.FC<AvatarDisplayProps> = ({\n  userId,\n  showEditButton = false,\n  onEdit,\n  className\n}) => {\n  const { _getUserAvatar } = useAvatarStore();\n  const { _getUserAchievements, _getUnlockedAchievements } = useAchievementsStore();\n  \n  const userAvatar = getUserAvatar(userId);\n  const userAchievements = getUserAchievements(userId);\n  const unlockedAchievements = getUnlockedAchievements(userId);\n\n  if (!userAvatar) {\n    return (\n      <div className={cn(\"flex flex-col items-center p-6\", className)}>\n        <div className=\"w-32 h-32 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n          <span className=\"text-gray-400 text-4xl\">👤</span>\n        </div>\n        <p className=\"text-gray-500\">Avatar wird geladen...</p>\n      </div>\n    );\n  }\n\n  // Calculate progress to next level\n  const progressPercent = userAvatar.nextLevelXP > 0 \n    ? (userAvatar.currentLevelXP / userAvatar.nextLevelXP) * 100 \n    : 100;\n\n  return (\n    <div className={cn(\"flex flex-col items-center p-6 bg-white rounded-xl\", className)}>\n      {/* Avatar Circle with Level */}\n      <div className=\"relative mb-6\">\n        {/* Main Avatar Circle */}\n        <div className=\"w-40 h-40 bg-gradient-to-br from-gray-300 to-gray-500 rounded-full flex items-center justify-center relative overflow-hidden\">\n          {/* Grid Pattern Overlay */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <svg width=\"100%\" height=\"100%\" className=\"w-full h-full\">\n              <defs>\n                <pattern id=\"grid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                  <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"white\" strokeWidth=\"1\"/>\n                </pattern>\n              </defs>\n              <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n            </svg>\n          </div>\n          \n          {/* User Icon/Image */}\n          <div className=\"relative z-10 w-24 h-24 bg-gray-600 rounded-full flex items-center justify-center\">\n            <span className=\"text-white text-3xl\">👤</span>\n          </div>\n        </div>\n\n        {/* Edit Button */}\n        {showEditButton && (\n          <button\n            onClick={onEdit}\n            className=\"absolute top-0 right-0 w-10 h-10 bg-white rounded-full shadow-lg flex items-center justify-center hover:shadow-xl transition-shadow\"\n          >\n            <span className=\"text-gray-600\">✏️</span>\n          </button>\n        )}\n      </div>\n\n      {/* User Name and Title */}\n      <div className=\"text-center mb-6\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          {/* This would come from user store */}\n          Anna Admin\n        </h2>\n        \n        {/* Level Badge and Title */}\n        <div className=\"flex items-center justify-center gap-3 mb-2\">\n          {userAvatar.title && (\n            <span className=\"text-gray-600 text-lg\">\n              {userAvatar.title}❤️\n            </span>\n          )}\n          <div className=\"bg-gradient-to-r from-cyan-400 to-cyan-600 text-white px-6 py-2 rounded-full font-bold text-lg\">\n            Level {userAvatar.level}\n          </div>\n        </div>\n      </div>\n\n      {/* Skills Section */}\n      <div className=\"w-full mb-6\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4 text-center\">Skills</h3>\n        \n        <div className=\"space-y-4\">\n          {userAvatar.skills.map((skill) => {\n            const skillProgress = skill.currentXP > 0 && skill.level > 1\n              ? ((skill.currentXP / (skill.totalXP / skill.level)) * 100)\n              : (skill.totalXP > 0 ? 25 : 0); // Default progress for visualization\n\n            return (\n              <div key={skill.id} className=\"flex items-center gap-4\">\n                {/* Skill Icon and Name */}\n                <div className=\"flex items-center gap-3 min-w-[140px]\">\n                  <span className=\"text-2xl\">{skill.icon}</span>\n                  <span className=\"font-medium text-gray-900\">{skill.name}</span>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"flex-1 bg-gray-200 rounded-full h-3 relative overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full transition-all duration-300\"\n                    style={{ \n                      width: `${Math.min(100, skillProgress)}%`,\n                      backgroundColor: skill.color \n                    }}\n                  />\n                </div>\n                \n                {/* Level */}\n                <div className=\"min-w-[60px] text-right\">\n                  <span className=\"text-sm font-medium text-gray-600\">\n                    Level {skill.level}\n                  </span>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Coins Section */}\n      <div className=\"w-full mb-6\">\n        <div className=\"flex items-center justify-between bg-gradient-to-r from-yellow-100 to-orange-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-2xl\">💰</span>\n            <span className=\"font-semibold text-gray-900\">Engagement</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-2xl font-bold text-gray-900\">1600</span>\n            <span className=\"text-lg\">🪙</span>\n            <span className=\"text-sm text-gray-600\">Browo Coins</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Achievements Section */}\n      <div className=\"w-full\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4 text-center\">Achievements</h3>\n        \n        {unlockedAchievements.length > 0 ? (\n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {unlockedAchievements.slice(0, 6).map((achievement) => (\n              <div\n                key={achievement.id}\n                className=\"relative group cursor-pointer transform hover:scale-110 transition-transform\"\n              >\n                {/* Achievement Icon */}\n                <div className={cn(\n                  \"w-12 h-12 rounded-full flex items-center justify-center text-2xl shadow-lg\",\n                  achievement.rarity === 'legendary' ? 'bg-gradient-to-r from-purple-400 to-pink-400' :\n                  achievement.rarity === 'epic' ? 'bg-gradient-to-r from-purple-300 to-blue-400' :\n                  achievement.rarity === 'rare' ? 'bg-gradient-to-r from-blue-300 to-green-400' :\n                  'bg-gradient-to-r from-yellow-300 to-orange-400'\n                )}>\n                  <span>{achievement.icon}</span>\n                </div>\n                \n                {/* Tooltip */}\n                <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10\">\n                  {achievement.name}\n                </div>\n              </div>\n            ))}\n            \n            {/* Show more indicator */}\n            {unlockedAchievements.length > 6 && (\n              <div className=\"w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center text-gray-500 border-2 border-dashed border-gray-300\">\n                <span className=\"text-xs\">+{unlockedAchievements.length - 6}</span>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <span className=\"text-4xl mb-2 block\">🏆</span>\n            <p className=\"text-gray-500\">Noch keine Achievements freigeschaltet</p>\n            <p className=\"text-sm text-gray-400\">Absolviere Schulungen und sammle XP!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/AvatarMini.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showProgress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unlockedAchievements' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useAvatarStore } from '../state/avatar';\nimport { useAchievementsStore } from '../state/achievements';\nimport { cn } from '../utils/cn';\n\ninterface AvatarMiniProps {\n  userId: string;\n  onClick?: () => void;\n  className?: string;\n  showProgress?: boolean;\n}\n\n/**\n * Mini Avatar Component (for Dashboard)\n * Compact display like Screenshot 1 with skills preview and achievements\n */\nexport const AvatarMini: React.FC<AvatarMiniProps> = ({\n  userId,\n  onClick,\n  className,\n  showProgress = true\n}) => {\n  const { _getUserAvatar } = useAvatarStore();\n  const { _getUnlockedAchievements } = useAchievementsStore();\n  \n  const userAvatar = getUserAvatar(userId);\n  const unlockedAchievements = getUnlockedAchievements(userId);\n  \n\n  if (!userAvatar) {\n    return (\n      <div className={cn(\"bg-white rounded-xl p-4 shadow-sm\", className)}>\n        <div className=\"animate-pulse\">\n          <div className=\"w-16 h-16 bg-gray-200 rounded-full mb-3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n          <div className=\"h-3 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Get primary skill (highest level or most recent activity)\n  const primarySkill = userAvatar.skills.reduce((prev, current) => \n    current.level > prev.level ? current : prev\n  );\n\n  return (\n    <div \n      className={cn(\n        \"bg-white rounded-xl p-6 shadow-sm transition-all duration-200 flex flex-col h-full\",\n        onClick && \"cursor-pointer hover:shadow-md hover:scale-105\",\n        className\n      )}\n      onClick={onClick}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-sm font-semibold text-gray-700\">Avatar</h3>\n        {onClick && (\n          <span className=\"text-xs text-gray-400 hover:text-gray-600\">\n            Einstellungen →\n          </span>\n        )}\n      </div>\n\n      {/* Content wrapper with vertical centering */}\n      <div className=\"flex-grow flex flex-col justify-center\">\n        {/* Level Header */}\n        <div className=\"text-center mb-6\">\n          <h4 className=\"text-sm font-medium text-gray-900\">Level 01: Rookie</h4>\n        </div>\n\n        {/* Skills Section */}\n        <div className=\"mb-6\">\n          <h4 className=\"text-lg font-semibold text-gray-900 mb-3 text-center\">Skills</h4>\n          <div className=\"bg-gradient-to-r from-cyan-400 to-cyan-600 text-white px-4 py-2 rounded-full text-center font-medium\">\n            Level {primarySkill.level}\n          </div>\n        </div>\n\n        {/* Engagement Section */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between bg-gradient-to-r from-yellow-100 to-orange-100 rounded-xl p-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-semibold text-gray-900\">Engagement</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <span className=\"text-lg font-bold text-gray-900\">1600</span>\n              <span className=\"text-lg\">🪙</span>\n            </div>\n          </div>\n          <p className=\"text-center text-xs text-gray-600 mt-2\">Browo Coins</p>\n        </div>\n\n        {/* Achievement Section */}\n        <div className=\"text-center\">\n          <span className=\"text-3xl mb-2 block\">🏆</span>\n          <p className=\"text-xs text-gray-500\">Verdiene dein erstes Achievement!</p>\n        </div>\n      </div>\n\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/LootboxAnimation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LootboxData' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { LootboxAnimation as LootboxData, Reward } from '../types/learning';\nimport { cn } from '../utils/cn';\n\ninterface LootboxAnimationProps {\n  reward: Reward;\n  onComplete: () => void;\n  autoStart?: boolean;\n}\n\nexport const LootboxAnimation: React.FC<LootboxAnimationProps> = ({ \n  reward, \n  onComplete, \n  autoStart = false \n}) => {\n  const [stage, setStage] = useState<'waiting' | 'opening' | 'revealing' | 'complete'>('waiting');\n  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number; delay: number }>>([]);\n\n  useEffect(() => {\n    if (autoStart) {\n      handleStartAnimation();\n    }\n  }, [autoStart]);\n\n  useEffect(() => {\n    if (stage === 'revealing') {\n      // Generate particles for celebration\n      const newParticles = Array.from({ length: 20 }, (_, i) => ({\n        id: i,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        delay: Math.random() * 0.5\n      }));\n      setParticles(newParticles);\n\n      // Auto-complete after showing reward\n      const timer = setTimeout(() => {\n        setStage('complete');\n        setTimeout(onComplete, 1000);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [stage, onComplete]);\n\n  const handleStartAnimation = () => {\n    setStage('opening');\n    \n    setTimeout(() => {\n      setStage('revealing');\n    }, 1500);\n  };\n\n  const getRarityColor = () => {\n    switch (reward.type) {\n      case 'coins':\n        return 'from-yellow-400 to-yellow-600';\n      case 'badge':\n        return 'from-purple-400 to-purple-600';\n      default:\n        return 'from-blue-400 to-blue-600';\n    }\n  };\n\n  const getRewardIcon = () => {\n    switch (reward.type) {\n      case 'coins':\n        return '🪙';\n      case 'badge':\n        return '🏅';\n      case 'avatar-item':\n        return '👕';\n      default:\n        return '🎁';\n    }\n  };\n\n  const getRewardSound = () => {\n    switch (reward.type) {\n      case 'coins':\n        return '💰';\n      case 'badge':\n        return '🎉';\n      default:\n        return '✨';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\">\n      <div className=\"relative\">\n        {/* Particles */}\n        {stage === 'revealing' && particles.map(particle => (\n          <div\n            key={particle.id}\n            className=\"absolute w-2 h-2 bg-yellow-400 rounded-full animate-ping\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              animationDelay: `${particle.delay}s`\n            }}\n          />\n        ))}\n\n        {/* Lootbox Container */}\n        <div className=\"relative w-80 h-80 flex items-center justify-center\">\n          {stage === 'waiting' && (\n            <div className=\"text-center\">\n              <div className=\"w-48 h-48 bg-gradient-to-br from-amber-400 to-amber-600 rounded-2xl mx-auto mb-6 flex items-center justify-center text-6xl shadow-2xl transform hover:scale-105 transition-transform cursor-pointer\"\n                onClick={handleStartAnimation}\n              >\n                🎁\n              </div>\n              <p className=\"text-white text-xl font-bold mb-2\">Belohnung erhalten!</p>\n              <p className=\"text-gray-300\">Klicke um zu öffnen</p>\n            </div>\n          )}\n\n          {stage === 'opening' && (\n            <div className=\"text-center\">\n              <div className=\"w-48 h-48 bg-gradient-to-br from-amber-400 to-amber-600 rounded-2xl mx-auto mb-6 flex items-center justify-center text-6xl shadow-2xl animate-bounce\">\n                📦\n              </div>\n              <p className=\"text-white text-xl font-bold animate-pulse\">Öffnet sich...</p>\n            </div>\n          )}\n\n          {stage === 'revealing' && (\n            <div className=\"text-center animate-pulse\">\n              <div className={cn(\n                \"w-48 h-48 bg-gradient-to-br rounded-2xl mx-auto mb-6 flex items-center justify-center text-8xl shadow-2xl\",\n                getRarityColor()\n              )}>\n                {getRewardIcon()}\n              </div>\n              <div className=\"bg-white rounded-xl p-6 shadow-2xl max-w-sm\">\n                <div className=\"text-center\">\n                  <div className=\"text-4xl mb-3\">{getRewardSound()}</div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                    {reward.type === 'coins' ? `${reward.value} BrowoCoins` : reward.description}\n                  </h3>\n                  <p className=\"text-gray-600\">{reward.description}</p>\n                  \n                  {reward.type === 'coins' && (\n                    <div className=\"mt-4 p-3 bg-yellow-50 rounded-lg\">\n                      <p className=\"text-yellow-800 font-medium\">\n                        + {reward.value} 🪙\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {stage === 'complete' && (\n            <div className=\"text-center opacity-0 animate-fade-out\">\n              <div className=\"text-white text-2xl font-bold\">Belohnung erhalten!</div>\n            </div>\n          )}\n        </div>\n\n        {/* Close button */}\n        {stage !== 'waiting' && stage !== 'complete' && (\n          <button\n            onClick={onComplete}\n            className=\"absolute top-4 right-4 text-white hover:text-gray-300 text-2xl\"\n          >\n            ×\n          </button>\n        )}\n      </div>\n\n      <style>{`\n        @keyframes fade-out {\n          from { opacity: 1; }\n          to { opacity: 0; }\n        }\n        .animate-fade-out {\n          animation: fade-out 1s ease-out forwards;\n        }\n      `}</style>\n    </div>\n  );\n};\n\n// Utility component for showing multiple rewards\ninterface MultiRewardAnimationProps {\n  rewards: Reward[];\n  onComplete: () => void;\n}\n\nexport const MultiRewardAnimation: React.FC<MultiRewardAnimationProps> = ({ \n  rewards, \n  onComplete \n}) => {\n  const [currentRewardIndex, setCurrentRewardIndex] = useState(0);\n\n  const handleRewardComplete = () => {\n    if (currentRewardIndex < rewards.length - 1) {\n      setCurrentRewardIndex(currentRewardIndex + 1);\n    } else {\n      onComplete();\n    }\n  };\n\n  if (currentRewardIndex >= rewards.length) {\n    return null;\n  }\n\n  return (\n    <LootboxAnimation\n      reward={rewards[currentRewardIndex]}\n      onComplete={handleRewardComplete}\n      autoStart={currentRewardIndex > 0}\n    />\n  );\n};\n\n// Simple celebration overlay for quick rewards\ninterface CelebrationOverlayProps {\n  message: string;\n  icon: string;\n  color?: string;\n  onComplete: () => void;\n}\n\nexport const CelebrationOverlay: React.FC<CelebrationOverlayProps> = ({\n  message,\n  icon,\n  color = 'from-blue-400 to-purple-600',\n  onComplete\n}) => {\n  useEffect(() => {\n    const timer = setTimeout(onComplete, 2000);\n    return () => clearTimeout(timer);\n  }, [onComplete]);\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-pulse\">\n      <div className={cn(\n        \"bg-gradient-to-br text-white rounded-2xl p-8 text-center shadow-2xl transform scale-110\",\n        color\n      )}>\n        <div className=\"text-6xl mb-4 animate-bounce\">{icon}</div>\n        <p className=\"text-2xl font-bold\">{message}</p>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/Quiz.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startTime' is assigned a value but never used. Allowed unused elements of array destructuring patterns must match /^_/u.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setStartTime' is assigned a value but never used. Allowed unused elements of array destructuring patterns must match /^_/u.","line":22,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { TestQuestion, TestAnswer, TestResult } from '../types/learning';\nimport { useLearningStore } from '../state/learning';\nimport { useAuthStore } from '../state/auth';\nimport { cn } from '../utils/cn';\n\ninterface QuizProps {\n  videoId: string;\n  questions: TestQuestion[];\n  onComplete: (result: TestResult) => void;\n}\n\nexport const Quiz: React.FC<QuizProps> = ({ videoId, questions, onComplete }) => {\n  const { user } = useAuthStore();\n  const { submitTestResult } = useLearningStore();\n  \n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<TestAnswer[]>([]);\n  const [selectedAnswer, setSelectedAnswer] = useState<string | string[]>('');\n  const [showExplanation, setShowExplanation] = useState(false);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [startTime, setStartTime] = useState(Date.now());\n  const [questionStartTime, setQuestionStartTime] = useState(Date.now());\n  const [draggedItems, setDraggedItems] = useState<string[]>([]);\n  const [dropZones, setDropZones] = useState<string[]>([]);\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n  useEffect(() => {\n    setQuestionStartTime(Date.now());\n    setSelectedAnswer('');\n    setIsAnswered(false);\n    setShowExplanation(false);\n    \n    // Initialize drag & drop for sorting questions\n    if (currentQuestion.type === 'sorting' && currentQuestion.options) {\n      setDraggedItems([...currentQuestion.options].sort(() => Math.random() - 0.5));\n      setDropZones([]);\n    }\n  }, [currentQuestionIndex, currentQuestion]);\n\n  const handleAnswer = () => {\n    if (!user || isAnswered) return;\n\n    const timeSpent = (Date.now() - questionStartTime) / 1000;\n    const isCorrect = checkAnswer();\n    \n    const answer: TestAnswer = {\n      questionId: currentQuestion.id,\n      userAnswer: selectedAnswer,\n      correct: isCorrect,\n      timeSpent\n    };\n\n    setAnswers([...answers, answer]);\n    setIsAnswered(true);\n    setShowExplanation(true);\n  };\n\n  const checkAnswer = (): boolean => {\n    switch (currentQuestion.type) {\n      case 'multiple-choice':\n        return selectedAnswer === currentQuestion.correctAnswer;\n      \n      case 'sorting':\n        const correctOrder = currentQuestion.correctAnswer as string[];\n        return JSON.stringify(dropZones) === JSON.stringify(correctOrder);\n      \n      case 'drag-drop':\n        return Array.isArray(selectedAnswer) && \n               Array.isArray(currentQuestion.correctAnswer) &&\n               selectedAnswer.sort().join(',') === (currentQuestion.correctAnswer as string[]).sort().join(',');\n      \n      case 'image-selection':\n        return selectedAnswer === currentQuestion.correctAnswer;\n      \n      default:\n        return false;\n    }\n  };\n\n  const nextQuestion = () => {\n    if (isLastQuestion) {\n      finishQuiz();\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  const finishQuiz = () => {\n    if (!user) return;\n\n    const totalPoints = questions.reduce((acc, q) => acc + q.points, 0);\n    const earnedPoints = answers.reduce((acc, answer) => {\n      const question = questions.find(q => q.id === answer.questionId);\n      return acc + (answer.correct ? (question?.points || 0) : 0);\n    }, 0);\n\n    const score = Math.round((earnedPoints / totalPoints) * 100);\n    const passed = score >= 70; // 70% to pass\n\n    const result: TestResult = {\n      id: `test_${Date.now()}`,\n      userId: user.id,\n      trainingId: videoId,\n      score,\n      passed,\n      completedAt: new Date(),\n      answers,\n      earnedXP: passed ? Math.floor(score * 2) : Math.floor(score * 0.5),\n      earnedCoins: passed ? Math.floor(score / 5) : Math.floor(score / 10)\n    };\n\n    submitTestResult(result);\n    onComplete(result);\n  };\n\n  // Handle drag and drop\n  const handleDragStart = (e: React.DragEvent, item: string) => {\n    e.dataTransfer.setData('text/plain', item);\n  };\n\n  const handleDrop = (e: React.DragEvent, dropIndex: number) => {\n    e.preventDefault();\n    const draggedItem = e.dataTransfer.getData('text/plain');\n    \n    if (currentQuestion.type === 'sorting') {\n      const newDropZones = [...dropZones];\n      newDropZones[dropIndex] = draggedItem;\n      setDropZones(newDropZones);\n      \n      const newDraggedItems = draggedItems.filter(item => item !== draggedItem);\n      setDraggedItems(newDraggedItems);\n      \n      if (newDropZones.filter(Boolean).length === currentQuestion.options?.length) {\n        setSelectedAnswer(newDropZones);\n      }\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const renderQuestionInput = () => {\n    switch (currentQuestion.type) {\n      case 'multiple-choice':\n        return (\n          <div className=\"space-y-3\">\n            {currentQuestion.options?.map((option, index) => (\n              <label\n                key={index}\n                className={cn(\n                  \"flex items-center p-4 border-2 rounded-lg cursor-pointer transition-all\",\n                  selectedAnswer === option\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-200 hover:border-gray-300\"\n                )}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"answer\"\n                  value={option}\n                  checked={selectedAnswer === option}\n                  onChange={(e) => setSelectedAnswer(e.target.value)}\n                  className=\"mr-3\"\n                  disabled={isAnswered}\n                />\n                <span className=\"text-lg\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'image-selection':\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            {currentQuestion.options?.map((option, index) => (\n              <div\n                key={index}\n                className={cn(\n                  \"border-2 rounded-lg p-4 cursor-pointer transition-all\",\n                  selectedAnswer === option\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-200 hover:border-gray-300\"\n                )}\n                onClick={() => !isAnswered && setSelectedAnswer(option)}\n              >\n                <img\n                  src={`/quiz-images/${option}.jpg`}\n                  alt={option}\n                  className=\"w-full h-32 object-cover rounded mb-2\"\n                />\n                <p className=\"text-center font-medium\">{option}</p>\n              </div>\n            ))}\n          </div>\n        );\n\n      case 'sorting':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-gray-700\">Zu sortierende Elemente:</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {draggedItems.map((item, index) => (\n                  <div\n                    key={index}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, item)}\n                    className=\"bg-blue-100 text-blue-800 px-3 py-2 rounded-lg cursor-move border-2 border-blue-200 hover:bg-blue-200 transition-colors\"\n                  >\n                    {item}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-gray-700\">Richtige Reihenfolge:</h4>\n              <div className=\"space-y-2\">\n                {Array.from({ length: currentQuestion.options?.length || 0 }).map((_, index) => (\n                  <div\n                    key={index}\n                    onDrop={(e) => handleDrop(e, index)}\n                    onDragOver={handleDragOver}\n                    className={cn(\n                      \"border-2 border-dashed p-4 rounded-lg min-h-[60px] flex items-center\",\n                      dropZones[index]\n                        ? \"border-green-300 bg-green-50\"\n                        : \"border-gray-300 bg-gray-50\"\n                    )}\n                  >\n                    {dropZones[index] ? (\n                      <div className=\"bg-green-100 text-green-800 px-3 py-2 rounded-lg\">\n                        {dropZones[index]}\n                      </div>\n                    ) : (\n                      <span className=\"text-gray-400\">Position {index + 1}</span>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'drag-drop':\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">Wählen Sie alle zutreffenden Antworten:</p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {currentQuestion.options?.map((option, index) => (\n                <label\n                  key={index}\n                  className={cn(\n                    \"flex items-center p-4 border-2 rounded-lg cursor-pointer transition-all\",\n                    Array.isArray(selectedAnswer) && selectedAnswer.includes(option)\n                      ? \"border-blue-500 bg-blue-50\"\n                      : \"border-gray-200 hover:border-gray-300\"\n                  )}\n                >\n                  <input\n                    type=\"checkbox\"\n                    value={option}\n                    checked={Array.isArray(selectedAnswer) && selectedAnswer.includes(option)}\n                    onChange={(e) => {\n                      const current = Array.isArray(selectedAnswer) ? selectedAnswer : [];\n                      if (e.target.checked) {\n                        setSelectedAnswer([...current, option]);\n                      } else {\n                        setSelectedAnswer(current.filter(item => item !== option));\n                      }\n                    }}\n                    className=\"mr-3\"\n                    disabled={isAnswered}\n                  />\n                  <span className=\"text-lg\">{option}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm p-6\">\n      {/* Progress */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm text-gray-600\">\n            Frage {currentQuestionIndex + 1} von {questions.length}\n          </span>\n          <span className=\"text-sm text-gray-600\">\n            {currentQuestion.points} Punkte\n          </span>\n        </div>\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n          <div\n            className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${((currentQuestionIndex + 1) / questions.length) * 100}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Question */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 mb-4\">\n          {currentQuestion.question}\n        </h3>\n\n        {currentQuestion.mediaUrl && (\n          <img\n            src={currentQuestion.mediaUrl}\n            alt=\"Question media\"\n            className=\"w-full max-w-md mx-auto rounded-lg mb-4\"\n          />\n        )}\n\n        {renderQuestionInput()}\n      </div>\n\n      {/* Explanation */}\n      {showExplanation && currentQuestion.explanation && (\n        <div className={cn(\n          \"p-4 rounded-lg mb-6\",\n          checkAnswer() ? \"bg-green-50 border border-green-200\" : \"bg-red-50 border border-red-200\"\n        )}>\n          <div className=\"flex items-start gap-3\">\n            <span className=\"text-2xl\">\n              {checkAnswer() ? '✅' : '❌'}\n            </span>\n            <div>\n              <p className=\"font-medium mb-2\">\n                {checkAnswer() ? 'Richtig!' : 'Leider falsch'}\n              </p>\n              <p className=\"text-gray-700\">{currentQuestion.explanation}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex justify-between\">\n        <button\n          disabled={currentQuestionIndex === 0}\n          onClick={() => setCurrentQuestionIndex(currentQuestionIndex - 1)}\n          className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          Zurück\n        </button>\n\n        {!isAnswered ? (\n          <button\n            onClick={handleAnswer}\n            disabled={!selectedAnswer || (Array.isArray(selectedAnswer) && selectedAnswer.length === 0)}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium\"\n          >\n            Antworten\n          </button>\n        ) : (\n          <button\n            onClick={nextQuestion}\n            className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium\"\n          >\n            {isLastQuestion ? 'Quiz beenden' : 'Weiter'}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/SkillsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/TeamCalendarView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSameDay' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAdmin' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cellKey' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":262,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":262,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { CalendarEntry, colorMap, abbreviationMap, getWorkTimeColor } from '../types/calendar';\nimport { cn } from '../utils/cn';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, isToday, startOfYear, endOfYear } from 'date-fns';\nimport { de } from 'date-fns/locale';\n\ninterface TeamCalendarViewProps {\n  view: 'monat' | 'jahr';\n  entries: CalendarEntry[];\n  users: { userId: string; userName: string }[];\n  onCellClick?: (userId: string, date: string) => void;\n  isAdmin?: boolean;\n}\n\n/**\n * TeamCalendarView Component\n * Displays a scrollable calendar view with absence status for all team members\n * Each user has a horizontal row, each day has a cell with info & color\n */\nexport const TeamCalendarView: React.FC<TeamCalendarViewProps> = ({\n  view,\n  entries,\n  users,\n  onCellClick,\n  isAdmin = false\n}) => {\n  const [selectedMonth, setSelectedMonth] = useState(new Date());\n  const [hoveredCell, setHoveredCell] = useState<{ userId: string; date: string } | null>(null);\n  const [filterType, setFilterType] = useState<string>('all');\n\n  /**\n   * Generate date range based on current view (month or year)\n   * For month view: all days in the selected month\n   * For year view: all days in the selected year\n   */\n  const dateRange = useMemo(() => {\n    if (view === 'monat') {\n      const start = startOfMonth(selectedMonth);\n      const end = endOfMonth(selectedMonth);\n      return eachDayOfInterval({ start, end });\n    } else {\n      const start = startOfYear(selectedMonth);\n      const end = endOfYear(selectedMonth);\n      return eachDayOfInterval({ start, end });\n    }\n  }, [view, selectedMonth]);\n\n  /**\n   * Group entries by userId and date for efficient lookup\n   * Key format: \"userId-yyyy-MM-dd\"\n   */\n  const entriesByUserAndDate = useMemo(() => {\n    const map = new Map<string, CalendarEntry>();\n    entries.forEach(entry => {\n      const key = `${entry.userId}-${entry.date}`;\n      map.set(key, entry);\n    });\n    return map;\n  }, [entries]);\n\n  /**\n   * Filter entries based on selected type\n   * Returns all entries if filter is 'all', otherwise only matching types\n   */\n  const filteredEntries = useMemo(() => {\n    if (filterType === 'all') return entriesByUserAndDate;\n    \n    const filtered = new Map<string, CalendarEntry>();\n    entriesByUserAndDate.forEach((entry, key) => {\n      if (entry.type === filterType) {\n        filtered.set(key, entry);\n      }\n    });\n    return filtered;\n  }, [entriesByUserAndDate, filterType]);\n\n  /**\n   * Get calendar entry for a specific user and date\n   * @param userId - The user's ID\n   * @param date - The date to check\n   * @returns The calendar entry if found, undefined otherwise\n   */\n  const getEntry = (userId: string, date: Date): CalendarEntry | undefined => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n    return filteredEntries.get(`${userId}-${dateStr}`);\n  };\n\n  /**\n   * Generate cell content with appropriate styling based on entry type\n   * @param entry - The calendar entry to display\n   * @returns JSX element with styled abbreviation or null\n   */\n  const getCellContent = (entry: CalendarEntry | undefined) => {\n    if (!entry) return null;\n\n    const abbreviation = entry.type === 'zeit' \n      ? abbreviationMap.zeit(entry.stunden)\n      : abbreviationMap[entry.type];\n\n    const backgroundColor = entry.type === 'zeit'\n      ? getWorkTimeColor(entry.stunden)\n      : colorMap[entry.type];\n\n    const textColor = entry.type === 'krank' ? 'white' : 'black';\n\n    return (\n      <div \n        className={cn(\n          \"absolute bottom-0 left-0 right-0 text-xs font-medium text-center py-0.5 rounded-sm\",\n          entry.status === 'beantragt' && \"opacity-60 border border-dashed border-gray-400\"\n        )}\n        style={{ backgroundColor, color: textColor }}\n      >\n        {abbreviation}\n      </div>\n    );\n  };\n\n  /**\n   * Generate tooltip content for calendar entries\n   * @param entry - The calendar entry\n   * @returns Formatted string with entry details\n   */\n  const getTooltipContent = (entry: CalendarEntry) => {\n    let content = `${entry.type.charAt(0).toUpperCase() + entry.type.slice(1)}`;\n    if (entry.type === 'zeit' && entry.stunden) {\n      content += ` (${entry.stunden}h)`;\n    }\n    if (entry.status) {\n      content += ` - ${entry.status}`;\n    }\n    return content;\n  };\n\n  /**\n   * Navigate to previous or next month\n   * @param direction - Positive for next month, negative for previous\n   */\n  const navigateMonth = (direction: number) => {\n    const newDate = new Date(selectedMonth);\n    newDate.setMonth(newDate.getMonth() + direction);\n    setSelectedMonth(newDate);\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Header Controls */}\n      <div className=\"mb-4 flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          {view === 'monat' && (\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => navigateMonth(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg\"\n              >\n                ←\n              </button>\n              <h3 className=\"text-lg font-semibold\">\n                {format(selectedMonth, 'MMMM yyyy', { locale: de })}\n              </h3>\n              <button\n                onClick={() => navigateMonth(1)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg\"\n              >\n                →\n              </button>\n            </div>\n          )}\n          {view === 'jahr' && (\n            <h3 className=\"text-lg font-semibold\">\n              {format(selectedMonth, 'yyyy')}\n            </h3>\n          )}\n        </div>\n\n        {/* Filter Controls */}\n        <div className=\"flex items-center gap-2\">\n          <label className=\"text-sm text-gray-600\">Filter:</label>\n          <select\n            value={filterType}\n            onChange={(e) => setFilterType(e.target.value)}\n            className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm\"\n          >\n            <option value=\"all\">Alle</option>\n            <option value=\"urlaub\">Urlaub</option>\n            <option value=\"krank\">Krankheit</option>\n            <option value=\"meeting\">Meeting</option>\n            <option value=\"fortbildung\">Fortbildung</option>\n            <option value=\"ux\">Sonderurlaub</option>\n            <option value=\"zeit\">Arbeitszeit</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Calendar Grid */}\n      <div className={cn(\n        \"overflow-x-auto border border-gray-200 rounded-lg\",\n        view === 'jahr' && \"max-w-full\"\n      )}>\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr>\n              <th className=\"sticky left-0 bg-white z-10 p-2 border-b border-r border-gray-200 text-left text-sm font-medium text-gray-700 min-w-[150px]\">\n                Mitarbeiter\n              </th>\n              {view === 'monat' && dateRange.map((date) => (\n                <th\n                  key={date.toISOString()}\n                  className={cn(\n                    \"p-1 border-b border-gray-200 text-center text-xs font-medium text-gray-600 min-w-[40px]\",\n                    isToday(date) && \"bg-blue-50\"\n                  )}\n                >\n                  <div>{format(date, 'EEE', { locale: de })}</div>\n                  <div className=\"text-sm font-semibold\">{format(date, 'd')}</div>\n                </th>\n              ))}\n              {view === 'jahr' && (\n                <>\n                  {/* Month headers for year view */}\n                  {Array.from({ length: 12 }, (_, i) => {\n                    const monthDate = new Date(selectedMonth.getFullYear(), i, 1);\n                    const daysInMonth = new Date(selectedMonth.getFullYear(), i + 1, 0).getDate();\n                    return (\n                      <th\n                        key={i}\n                        colSpan={daysInMonth}\n                        className=\"p-2 border-b border-gray-200 text-center text-sm font-medium text-gray-700\"\n                      >\n                        {format(monthDate, 'MMM', { locale: de })}\n                      </th>\n                    );\n                  })}\n                </>\n              )}\n            </tr>\n            {view === 'jahr' && (\n              <tr>\n                <th className=\"sticky left-0 bg-white z-10 border-b border-r border-gray-200\"></th>\n                {dateRange.map((date) => (\n                  <th\n                    key={date.toISOString()}\n                    className={cn(\n                      \"p-0.5 border-b border-gray-200 text-center text-xs font-normal text-gray-500 min-w-[25px]\",\n                      isToday(date) && \"bg-blue-50\"\n                    )}\n                  >\n                    {format(date, 'd')}\n                  </th>\n                ))}\n              </tr>\n            )}\n          </thead>\n          <tbody>\n            {users.map((user) => (\n              <tr key={user.userId} className=\"hover:bg-gray-50\">\n                <td className=\"sticky left-0 bg-white z-10 p-2 border-r border-gray-200 text-sm font-medium text-gray-900 whitespace-nowrap\">\n                  {user.userName}\n                </td>\n                {dateRange.map((date) => {\n                  const entry = getEntry(user.userId, date);\n                  const cellKey = `${user.userId}-${format(date, 'yyyy-MM-dd')}`;\n                  const isHovered = hoveredCell?.userId === user.userId && hoveredCell?.date === format(date, 'yyyy-MM-dd');\n\n                  return (\n                    <td\n                      key={date.toISOString()}\n                      className={cn(\n                        \"relative p-0 border border-gray-100 cursor-pointer transition-colors\",\n                        view === 'monat' ? \"h-12\" : \"h-8\",\n                        isToday(date) && \"bg-blue-50\",\n                        isHovered && \"bg-gray-100\",\n                        date.getDay() === 0 || date.getDay() === 6 ? \"bg-gray-50\" : \"\"\n                      )}\n                      onClick={() => onCellClick?.(user.userId, format(date, 'yyyy-MM-dd'))}\n                      onMouseEnter={() => setHoveredCell({ userId: user.userId, date: format(date, 'yyyy-MM-dd') })}\n                      onMouseLeave={() => setHoveredCell(null)}\n                    >\n                      {view === 'monat' && (\n                        <div className=\"text-xs text-gray-400 text-center mt-0.5\">\n                          {format(date, 'd')}\n                        </div>\n                      )}\n                      {getCellContent(entry)}\n                      {entry && isHovered && (\n                        <div className=\"absolute z-20 bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-gray-800 text-white text-xs rounded whitespace-nowrap\">\n                          {getTooltipContent(entry)}\n                        </div>\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Legend */}\n      <div className=\"mt-4 flex flex-wrap gap-4 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.urlaub }}></div>\n          <span>Urlaub</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.krank }}></div>\n          <span>Krankheit</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.meeting }}></div>\n          <span>Meeting</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.fortbildung }}></div>\n          <span>Fortbildung</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.ux }}></div>\n          <span>Sonderurlaub</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.zeit.vollzeit }}></div>\n          <span>Vollzeit (8h+)</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.zeit.teilzeit }}></div>\n          <span>Teilzeit (6-8h)</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: colorMap.zeit.unter6h }}></div>\n          <span>Unter 6h</span>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/VideoPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'progressInterval' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from 'react';\nimport { useLearningStore } from '../state/learning';\nimport { VideoContent } from '../types/learning';\nimport { cn } from '../utils/cn';\n\ninterface VideoPlayerProps {\n  video: VideoContent;\n  onComplete?: () => void;\n}\n\nexport const VideoPlayer: React.FC<VideoPlayerProps> = ({ video, onComplete }) => {\n  const { updateProgress, completeVideo } = useLearningStore();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showTranscript, setShowTranscript] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const progressInterval = useRef<number | undefined>(undefined);\n\n  useEffect(() => {\n    const videoElement = videoRef.current;\n    if (!videoElement) return;\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(videoElement.currentTime);\n      \n      // Update progress every 5 seconds\n      if (Math.floor(videoElement.currentTime) % 5 === 0) {\n        updateProgress(video.id, Math.floor(videoElement.currentTime));\n      }\n    };\n\n    const handleEnded = () => {\n      completeVideo(video.id);\n      if (onComplete) onComplete();\n    };\n\n    videoElement.addEventListener('timeupdate', handleTimeUpdate);\n    videoElement.addEventListener('ended', handleEnded);\n    videoElement.addEventListener('play', () => setIsPlaying(true));\n    videoElement.addEventListener('pause', () => setIsPlaying(false));\n\n    return () => {\n      videoElement.removeEventListener('timeupdate', handleTimeUpdate);\n      videoElement.removeEventListener('ended', handleEnded);\n      videoElement.removeEventListener('play', () => setIsPlaying(true));\n      videoElement.removeEventListener('pause', () => setIsPlaying(false));\n    };\n  }, [video.id, updateProgress, completeVideo, onComplete]);\n\n  const togglePlayPause = () => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n    }\n  };\n\n  const skipTime = (seconds: number) => {\n    if (videoRef.current) {\n      videoRef.current.currentTime += seconds;\n    }\n  };\n\n  const changeSpeed = () => {\n    const speeds = [0.5, 0.75, 1, 1.25, 1.5, 2];\n    const currentIndex = speeds.indexOf(playbackSpeed);\n    const nextIndex = (currentIndex + 1) % speeds.length;\n    const newSpeed = speeds[nextIndex];\n    \n    setPlaybackSpeed(newSpeed);\n    if (videoRef.current) {\n      videoRef.current.playbackRate = newSpeed;\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getActiveTranscriptSegment = () => {\n    if (!video.transcription) return null;\n    \n    return video.transcription.segments.find(\n      segment => currentTime >= segment.start && currentTime <= segment.end\n    );\n  };\n\n  const activeSegment = getActiveTranscriptSegment();\n\n  // For YouTube videos\n  const isYouTube = video.url.includes('youtube.com') || video.url.includes('youtu.be');\n  const youtubeId = isYouTube ? video.url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/)?.[1] : null;\n\n  return (\n    <div className=\"bg-black rounded-xl overflow-hidden\">\n      {/* Video Container */}\n      <div className=\"relative aspect-video bg-gray-900\">\n        {isYouTube && youtubeId ? (\n          <iframe\n            className=\"w-full h-full\"\n            src={`https://www.youtube.com/embed/${youtubeId}?enablejsapi=1`}\n            title={video.title}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        ) : (\n          <video\n            ref={videoRef}\n            className=\"w-full h-full\"\n            src={video.url}\n            poster={video.thumbnail}\n          />\n        )}\n\n        {/* Custom Controls Overlay */}\n        {!isYouTube && (\n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4\">\n            {/* Progress Bar */}\n            <div className=\"mb-3\">\n              <div className=\"bg-gray-600 h-1 rounded-full overflow-hidden cursor-pointer\"\n                onClick={(e) => {\n                  if (videoRef.current) {\n                    const rect = e.currentTarget.getBoundingClientRect();\n                    const percent = (e.clientX - rect.left) / rect.width;\n                    videoRef.current.currentTime = percent * video.duration;\n                  }\n                }}\n              >\n                <div \n                  className=\"bg-blue-500 h-full\"\n                  style={{ width: `${(currentTime / video.duration) * 100}%` }}\n                />\n              </div>\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={togglePlayPause}\n                  className=\"text-white hover:text-blue-400 transition-colors\"\n                >\n                  {isPlaying ? (\n                    <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                  ) : (\n                    <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n                    </svg>\n                  )}\n                </button>\n\n                <button\n                  onClick={() => skipTime(-10)}\n                  className=\"text-white hover:text-blue-400 transition-colors\"\n                >\n                  <span className=\"text-sm font-medium\">-10s</span>\n                </button>\n\n                <button\n                  onClick={() => skipTime(10)}\n                  className=\"text-white hover:text-blue-400 transition-colors\"\n                >\n                  <span className=\"text-sm font-medium\">+10s</span>\n                </button>\n\n                <div className=\"text-white text-sm\">\n                  {formatTime(currentTime)} / {formatTime(video.duration)}\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={changeSpeed}\n                  className=\"text-white hover:text-blue-400 transition-colors text-sm font-medium\"\n                >\n                  {playbackSpeed}x\n                </button>\n\n                <button\n                  onClick={() => setShowTranscript(!showTranscript)}\n                  className={cn(\n                    \"text-white hover:text-blue-400 transition-colors\",\n                    showTranscript && \"text-blue-400\"\n                  )}\n                >\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Transcript Panel */}\n      {showTranscript && video.transcription && (\n        <div className=\"bg-gray-900 p-4 max-h-48 overflow-y-auto\">\n          <h3 className=\"text-white font-semibold mb-3\">Transkript</h3>\n          <div className=\"space-y-2\">\n            {video.transcription.segments.map((segment, index) => (\n              <div\n                key={index}\n                className={cn(\n                  \"p-2 rounded cursor-pointer transition-colors\",\n                  activeSegment === segment\n                    ? \"bg-blue-600/20 text-blue-300\"\n                    : \"text-gray-400 hover:bg-gray-800\"\n                )}\n                onClick={() => {\n                  if (videoRef.current) {\n                    videoRef.current.currentTime = segment.start;\n                  }\n                }}\n              >\n                <div className=\"text-xs text-gray-500 mb-1\">\n                  {formatTime(segment.start)} - {formatTime(segment.end)}\n                </div>\n                <div className=\"text-sm\">{segment.text}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Active Subtitle */}\n      {activeSegment && !showTranscript && (\n        <div className=\"absolute bottom-20 left-0 right-0 text-center px-4\">\n          <div className=\"inline-block bg-black/80 text-white px-4 py-2 rounded-lg\">\n            <p className=\"text-lg\">{activeSegment.text}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/components/YearView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/components/layout/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/components/layout/Container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/components/layout/Grid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/examples/DashboardExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContentArea' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Example\n * Zeigt wie das neue UI-System in der Praxis verwendet wird\n */\n\nimport React from 'react';\nimport { PageContainer, ContentArea } from '../components/layout/Container';\nimport { DashboardGrid, GridItem, StatsGrid } from '../components/layout/Grid';\nimport { Card, StatsCard, InfoCard, AvatarCard, CardHeader, CardContent } from '../components/layout/Card';\n\nexport const DashboardExample: React.FC = () => {\n  return (\n    <PageContainer\n      title=\"Dashboard\"\n      subtitle=\"Willkommen zurück, Anna!\"\n    >\n      {/* Header Card mit Benutzerinfo */}\n      <Card className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          {/* Left side: Avatar + Name + Info */}\n          <div className=\"flex items-center gap-4\">\n            {/* Avatar Image */}\n            <div className=\"w-16 h-16 rounded-full overflow-hidden bg-gradient-to-br from-gray-300 to-gray-500 flex-shrink-0\">\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <span className=\"text-white text-xl\">👤</span>\n              </div>\n            </div>\n            \n            {/* Name and Info */}\n            <div>\n              <h1 className=\"text-heading-2 mb-1\">Hallo, Anna!</h1>\n              <div className=\"flex items-center gap-6 text-sm text-gray-600\">\n                <span>HR Manager</span>\n                <span>Abteilung: Human Resources</span>\n                <span>Organisation: HRthis GmbH</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Right side: Settings + Logout */}\n          <div className=\"flex items-center gap-3\">\n            <button className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\n              ⚙️\n            </button>\n            <button className=\"px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors\">\n              <span className=\"text-gray-700\">Abmelden</span>\n            </button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Main Content Grid */}\n      <DashboardGrid>\n        {/* Stats Section - 9 columns */}\n        <GridItem span=\"full\" mdSpan={9}>\n          <div className=\"space-y-6\">\n            {/* Stats Cards */}\n            <StatsGrid>\n              <StatsCard\n                title=\"Heute\"\n                value=\"0h\"\n                subtitle=\"Nicht gestempelt\"\n                icon=\"⏰\"\n              />\n              <StatsCard\n                title=\"Monat\"\n                value=\"122.3h\"\n                subtitle=\"Soll: 173h\"\n                icon=\"📊\"\n                trend={{ value: \"-50.7h\", isPositive: false }}\n              />\n              <StatsCard\n                title=\"Urlaub\"\n                value=\"22\"\n                subtitle=\"von 30 Tagen\"\n                icon=\"🏖️\"\n              />\n            </StatsGrid>\n\n            {/* Employment Details */}\n            <InfoCard\n              title=\"Beschäftigungsdetails\"\n              className=\"h-full\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div>\n                  <p className=\"text-caption text-gray-500 mb-1\">Wochenarbeitszeit</p>\n                  <p className=\"text-body font-medium\">40h / Woche</p>\n                </div>\n                <div>\n                  <p className=\"text-caption text-gray-500 mb-1\">Beschäftigungsart</p>\n                  <p className=\"text-body font-medium\">Vollzeit</p>\n                </div>\n                <div>\n                  <p className=\"text-caption text-gray-500 mb-1\">Eintrittsdatum</p>\n                  <p className=\"text-body font-medium\">1.3.2021</p>\n                </div>\n                <div>\n                  <p className=\"text-caption text-gray-500 mb-1\">Status</p>\n                  <p className=\"text-body font-medium\">✅ Aktiv</p>\n                </div>\n              </div>\n            </InfoCard>\n          </div>\n        </GridItem>\n\n        {/* Avatar Card - 3 columns */}\n        <GridItem span=\"full\" mdSpan={3}>\n          <AvatarCard className=\"h-full\">\n            <CardHeader>\n              <h3 className=\"text-caption font-semibold text-gray-700\">Avatar</h3>\n              <span className=\"text-xs text-gray-400 hover:text-gray-600\">\n                Einstellungen →\n              </span>\n            </CardHeader>\n\n            <CardContent centerContent>\n              <div className=\"text-center space-y-6\">\n                {/* Level */}\n                <div>\n                  <h4 className=\"text-caption font-medium text-gray-900\">Level 01: Rookie</h4>\n                </div>\n\n                {/* Skills */}\n                <div>\n                  <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">Skills</h4>\n                  <div className=\"bg-gradient-to-r from-cyan-400 to-cyan-600 text-white px-4 py-2 rounded-full font-medium\">\n                    Level 1\n                  </div>\n                </div>\n\n                {/* Engagement */}\n                <div>\n                  <div className=\"bg-gradient-to-r from-yellow-100 to-orange-100 rounded-xl p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-semibold text-gray-900\">Engagement</span>\n                      <div className=\"flex items-center gap-1\">\n                        <span className=\"text-lg font-bold text-gray-900\">1600</span>\n                        <span className=\"text-lg\">🪙</span>\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-caption text-gray-600 mt-2\">Browo Coins</p>\n                </div>\n\n                {/* Achievement */}\n                <div>\n                  <span className=\"text-3xl mb-2 block\">🏆</span>\n                  <p className=\"text-caption text-gray-500\">Verdiene dein erstes Achievement!</p>\n                </div>\n              </div>\n            </CardContent>\n          </AvatarCard>\n        </GridItem>\n      </DashboardGrid>\n    </PageContainer>\n  );\n};\n\n/**\n * Beispiel für responsive Mobile Ansicht\n */\nexport const MobileDashboardExample: React.FC = () => {\n  return (\n    <PageContainer title=\"Dashboard\">\n      {/* Auf Mobile: Alle Karten stapeln sich vertikal */}\n      <div className=\"space-y-6\">\n        {/* Header wird kompakter */}\n        <Card>\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 rounded-full bg-gray-300 mx-auto mb-3\"></div>\n            <h1 className=\"text-heading-3\">Hallo, Anna!</h1>\n            <p className=\"text-caption text-gray-600\">HR Manager</p>\n          </div>\n        </Card>\n\n        {/* Stats stapeln sich vertikal */}\n        <div className=\"space-y-4\">\n          <StatsCard title=\"Heute\" value=\"0h\" icon=\"⏰\" />\n          <StatsCard title=\"Monat\" value=\"122.3h\" icon=\"📊\" />\n          <StatsCard title=\"Urlaub\" value=\"22\" icon=\"🏖️\" />\n        </div>\n\n        {/* Avatar Card kommt ans Ende */}\n        <AvatarCard>\n          {/* Kompakter Inhalt für Mobile */}\n        </AvatarCard>\n      </div>\n    </PageContainer>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/tokens/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/tokens/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/tokens/spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/design-system/tokens/typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/navigation/AppNavigator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrainingOverviewScreen' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LearningShop' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Routes, Route, Navigate, Link, useLocation } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useNotificationsStore } from '../state/notifications';\nimport { useLeavesStore } from '../state/leaves';\n\n// Screens\nimport { LoginScreen } from '../screens/LoginScreen';\nimport { DashboardScreen } from '../screens/DashboardScreen';\nimport { RequestLeaveScreen } from '../screens/RequestLeaveScreen';\nimport { TimeRecordsScreen } from '../screens/TimeRecordsScreen';\nimport { MyRequestsScreen } from '../screens/MyRequestsScreen';\nimport { DocumentsScreen } from '../screens/DocumentsScreen';\nimport { CalendarScreen } from '../screens/CalendarScreen';\nimport { BenefitsScreen } from '../screens/BenefitsScreen';\nimport { CoinHistoryScreen } from '../screens/CoinHistoryScreen';\nimport { AdminCoinsScreen } from '../screens/AdminCoinsScreen';\nimport { TrainingOverviewScreen } from '../screens/TrainingOverviewScreen';\nimport { CreateTrainingScreen } from '../screens/CreateTrainingScreen';\nimport { TrainingDetailsScreen } from '../screens/TrainingDetailsScreen';\nimport { TakeLessonScreen } from '../screens/TakeLessonScreen';\nimport { TrainingManagementScreen } from '../screens/TrainingManagementScreen';\nimport { LearningDashboard } from '../screens/LearningDashboard';\nimport { VideoLearningScreen } from '../screens/VideoLearningScreen';\nimport { LearningAdmin } from '../screens/LearningAdmin';\nimport { LearningShop } from '../screens/LearningShop';\nimport { SettingsScreen } from '../screens/SettingsScreen';\nimport { TeamManagementScreen } from '../screens/TeamManagementScreen';\nimport { TeamMemberDetailsScreen } from '../screens/TeamMemberDetailsScreen';\nimport { TeamsOverviewScreen } from '../screens/TeamsOverviewScreen';\nimport { TeamCalendarScreen } from '../screens/TeamCalendarScreen';\nimport { cn } from '../utils/cn';\n\nconst MainLayout = ({ children }: { children: React.ReactNode }) => {\n  const location = useLocation();\n  const { user } = useAuthStore();\n  const { getUnreadCount } = useNotificationsStore();\n  const { getAllLeaveRequests } = useLeavesStore();\n  \n  const getNotificationCount = (tabPath: string): number => {\n    if (!user) return 0;\n    \n    const isAdmin = user.role === 'ADMIN' || user.role === 'SUPERADMIN';\n    \n    switch (tabPath) {\n      case '/requests':\n        if (isAdmin) {\n          // For admin: show pending leave requests (these are the actionable items)\n          const pendingRequests = getAllLeaveRequests().filter(req => req.status === 'PENDING').length;\n          return pendingRequests;\n        } else {\n          // For users: show unread notifications about their requests\n          return getUnreadCount(user.id);\n        }\n      case '/training':\n        // Could add training-related notifications here\n        return 0;\n      default:\n        return 0;\n    }\n  };\n  \n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n  \n  const tabs = [\n    { path: '/dashboard', label: 'Übersicht', icon: '🏠' },\n    { path: '/requests', label: 'Anträge', icon: '📝' },\n    { path: '/time', label: 'Zeiten', icon: '⏰' },\n    { path: '/calendar', label: 'Urlaub', icon: '📅' },\n    { path: '/learning', label: 'Lernen', icon: '🎓' },\n    { path: '/benefits', label: 'Benefits', icon: '🎁' },\n    { path: '/documents', label: 'Dokumente', icon: '📄' },\n    ...(isAdmin ? [{ path: '/team-management', label: 'Teams', icon: '👥' }] : []),\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <nav className=\"bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"flex items-center h-16 px-4\">\n          {/* HRdiese Logo */}\n          <div className=\"flex items-center mr-8\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center mr-2\">\n              <span className=\"text-white font-bold text-sm\">HR</span>\n            </div>\n            <span className=\"text-lg font-semibold text-gray-900 hidden sm:inline\">HRdiese</span>\n          </div>\n          \n          {/* Navigation Tabs */}\n          <div className=\"flex justify-around items-center flex-1\">\n            {tabs.map((tab) => {\n            const isActive = location.pathname.startsWith(tab.path);\n            const notificationCount = getNotificationCount(tab.path);\n            return (\n              <Link\n                key={tab.path}\n                to={tab.path}\n                className={cn(\n                  \"flex items-center justify-center px-3 py-2 text-sm font-medium rounded-lg transition-colors relative\",\n                  isActive \n                    ? \"text-blue-600 bg-blue-50\" \n                    : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\"\n                )}\n              >\n                <span className=\"text-lg mr-2\">{tab.icon}</span>\n                <span className=\"hidden sm:inline\">{tab.label}</span>\n                {notificationCount > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                    {notificationCount > 99 ? '99+' : notificationCount}\n                  </span>\n                )}\n              </Link>\n            );\n            })}\n          </div>\n        </div>\n      </nav>\n      <main className=\"flex-1\">\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport const AppNavigator = () => {\n  const { isAuthenticated } = useAuthStore();\n\n  if (!isAuthenticated) {\n    return (\n      <Routes>\n        <Route path=\"/login\" element={<LoginScreen />} />\n        <Route path=\"*\" element={<Navigate to=\"/login\" />} />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<MainLayout><Navigate to=\"/dashboard\" /></MainLayout>} />\n      <Route path=\"/dashboard\" element={<MainLayout><DashboardScreen /></MainLayout>} />\n      <Route path=\"/requests\" element={<MainLayout><MyRequestsScreen /></MainLayout>} />\n      <Route path=\"/time\" element={<MainLayout><TimeRecordsScreen /></MainLayout>} />\n      <Route path=\"/calendar\" element={<MainLayout><CalendarScreen /></MainLayout>} />\n      <Route path=\"/learning\" element={<MainLayout><LearningDashboard /></MainLayout>} />\n      <Route path=\"/benefits\" element={<MainLayout><BenefitsScreen /></MainLayout>} />\n      <Route path=\"/documents\" element={<MainLayout><DocumentsScreen /></MainLayout>} />\n      <Route path=\"/team-management\" element={<MainLayout><TeamManagementScreen /></MainLayout>} />\n      <Route path=\"/team-calendar\" element={<MainLayout><TeamCalendarScreen /></MainLayout>} />\n      \n      {/* Modal-like routes */}\n      <Route path=\"/request-leave\" element={<RequestLeaveScreen />} />\n      <Route path=\"/settings\" element={<SettingsScreen />} />\n      <Route path=\"/coin-history\" element={<CoinHistoryScreen />} />\n      <Route path=\"/admin-coins\" element={<AdminCoinsScreen />} />\n      <Route path=\"/learning/video/:videoId\" element={<VideoLearningScreen />} />\n      <Route path=\"/learning/admin\" element={<LearningAdmin />} />\n      <Route path=\"/create-training\" element={<CreateTrainingScreen />} />\n      <Route path=\"/training/:id\" element={<TrainingDetailsScreen />} />\n      <Route path=\"/training/:trainingId/lesson/:lessonId\" element={<TakeLessonScreen />} />\n      <Route path=\"/training-management\" element={<TrainingManagementScreen />} />\n      <Route path=\"/team-management/user/:userId\" element={<TeamMemberDetailsScreen />} />\n      <Route path=\"/team-management/teams\" element={<TeamsOverviewScreen />} />\n      \n      <Route path=\"*\" element={<Navigate to=\"/dashboard\" />} />\n    </Routes>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/AchievementAdminScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":196,"column":16,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAchievementsStore } from '../state/achievements';\nimport { Achievement, AchievementCondition } from '../types/gamification';\nimport { cn } from '../utils/cn';\n\ninterface AchievementCardProps {\n  achievement: Achievement;\n  onEdit: (achievement: Achievement) => void;\n  onDelete: (_achievementId: string) => void;\n  onToggleActive: (_achievementId: string) => void;\n}\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({\n  achievement,\n  onEdit,\n  onDelete,\n  onToggleActive\n}) => {\n  const { _getAchievementStats } = useAchievementsStore();\n  const stats = getAchievementStats(achievement.id);\n\n  const rarityColors = {\n    common: 'from-gray-300 to-gray-500',\n    rare: 'from-blue-300 to-blue-500',\n    epic: 'from-purple-300 to-purple-500',\n    legendary: 'from-yellow-300 to-orange-500'\n  };\n\n  const rarityLabels = {\n    common: 'Häufig',\n    rare: 'Selten',\n    epic: 'Episch',\n    legendary: 'Legendär'\n  };\n\n  return (\n    <div className={cn(\n      \"bg-white rounded-lg border p-6 transition-all\",\n      achievement.isActive ? \"border-gray-200 shadow-sm\" : \"border-gray-100 opacity-75\"\n    )}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={cn(\n            \"w-12 h-12 rounded-full flex items-center justify-center text-2xl text-white shadow-md\",\n            `bg-gradient-to-br ${rarityColors[achievement.rarity]}`,\n            !achievement.isActive && \"grayscale\"\n          )}>\n            {achievement.icon}\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-gray-900\">{achievement.name}</h3>\n            <p className=\"text-sm text-gray-600\">{achievement.description}</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => onToggleActive(achievement.id)}\n            className={cn(\n              \"w-8 h-4 rounded-full relative transition-colors\",\n              achievement.isActive ? \"bg-green-500\" : \"bg-gray-300\"\n            )}\n          >\n            <div className={cn(\n              \"w-3 h-3 bg-white rounded-full absolute top-0.5 transition-transform\",\n              achievement.isActive ? \"translate-x-4\" : \"translate-x-0.5\"\n            )} />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Kategorie:</span>\n          <span className=\"text-sm font-medium\">{achievement.category}</span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Seltenheit:</span>\n          <span className={cn(\n            \"text-xs px-2 py-1 rounded-full font-medium\",\n            achievement.rarity === 'legendary' ? 'bg-yellow-100 text-yellow-800' :\n            achievement.rarity === 'epic' ? 'bg-purple-100 text-purple-800' :\n            achievement.rarity === 'rare' ? 'bg-blue-100 text-blue-800' :\n            'bg-gray-100 text-gray-800'\n          )}>\n            {rarityLabels[achievement.rarity]}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">XP Belohnung:</span>\n          <span className=\"text-sm font-medium\">{achievement.xpReward} XP</span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Freigeschaltet:</span>\n          <span className=\"text-sm font-medium\">{stats.unlockedCount} Benutzer</span>\n        </div>\n      </div>\n\n      <div className=\"border-t pt-4\">\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onEdit(achievement)}\n            className=\"flex-1 bg-blue-600 text-white px-3 py-2 rounded text-sm hover:bg-blue-700\"\n          >\n            Bearbeiten\n          </button>\n          <button\n            onClick={() => onDelete(achievement.id)}\n            className=\"px-3 py-2 border border-red-300 text-red-600 rounded text-sm hover:bg-red-50\"\n          >\n            Löschen\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface AchievementModalProps {\n  achievement?: Achievement;\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (achievement: Achievement) => void;\n}\n\nconst AchievementModal: React.FC<AchievementModalProps> = ({\n  achievement,\n  isOpen,\n  onClose,\n  onSave\n}) => {\n  const [formData, setFormData] = useState({\n    id: achievement?.id || '',\n    name: achievement?.name || '',\n    description: achievement?.description || '',\n    icon: achievement?.icon || '🏆',\n    category: achievement?.category || 'milestone',\n    rarity: achievement?.rarity || 'common',\n    xpReward: achievement?.xpReward || 50,\n    conditions: achievement?.conditions || [\n      {\n        type: 'xp_earned',\n        target: 1000,\n        operator: 'gte'\n      }\n    ] as AchievementCondition[],\n    isActive: achievement?.isActive ?? true,\n    isHidden: achievement?.isHidden ?? false\n  });\n\n  if (!isOpen) return null;\n\n  const handleSave = () => {\n    const achievementData: Achievement = {\n      ...formData,\n      id: formData.id || `achievement-${Date.now()}`,\n      createdAt: achievement?.createdAt || new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    onSave(achievementData);\n    onClose();\n  };\n\n  const addCondition = () => {\n    setFormData(prev => ({\n      ...prev,\n      conditions: [\n        ...prev.conditions,\n        {\n          type: 'xp_earned',\n          target: 100,\n          operator: 'gte'\n        }\n      ]\n    }));\n  };\n\n  const updateCondition = (_index: number, _updates: Partial<AchievementCondition>) => {\n    setFormData(prev => ({\n      ...prev, conditions: prev.conditions.map((condition, i) => \n        i === index ? { ...condition, ...updates } : condition\n      )\n    }));\n  };\n\n  const removeCondition = (_index: number) => {\n    setFormData(prev => ({\n      ...prev, conditions: prev.conditions.filter((_, i) => i !== index)\n    }));\n  };\n\n  return (_<div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            {achievement ? 'Achievement bearbeiten': 'Neues Achievement erstellen'}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"z.B. Erste Schritte\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Beschreibung\n              </label>\n              <textarea\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"Beschreibung des Achievements...\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Icon\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.icon}\n                  onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"🏆\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  XP Belohnung\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.xpReward}\n                  onChange={(e) => setFormData(prev => ({ ...prev, xpReward: parseInt(e.target.value) }))}\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Kategorie\n                </label>\n                <select\n                  value={formData.category}\n                  onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"learning\">Lernen</option>\n                  <option value=\"attendance\">Anwesenheit</option>\n                  <option value=\"engagement\">Engagement</option>\n                  <option value=\"milestone\">Meilensteine</option>\n                  <option value=\"special\">Spezial</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Seltenheit\n                </label>\n                <select\n                  value={formData.rarity}\n                  onChange={(e) => setFormData(prev => ({ ...prev, rarity: e.target.value as any }))}\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"common\">Häufig</option>\n                  <option value=\"rare\">Selten</option>\n                  <option value=\"epic\">Episch</option>\n                  <option value=\"legendary\">Legendär</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.isActive}\n                  onChange={(e) => setFormData(prev => ({ ...prev, isActive: e.target.checked }))}\n                  className=\"mr-2\"\n                />\n                <span className=\"text-sm text-gray-700\">Aktiv</span>\n              </label>\n              \n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.isHidden}\n                  onChange={(e) => setFormData(prev => ({ ...prev, isHidden: e.target.checked }))}\n                  className=\"mr-2\"\n                />\n                <span className=\"text-sm text-gray-700\">Versteckt (nicht in der Galerie anzeigen)</span>\n              </label>\n            </div>\n          </div>\n\n          {/* Right Column - Conditions */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Bedingungen</h3>\n              <button\n                onClick={addCondition}\n                className=\"bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700\"\n              >\n                + Bedingung\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {formData.conditions.map((condition, index) => (\n                <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      Bedingung {index + 1}\n                    </span>\n                    <button\n                      onClick={() => removeCondition(index)}\n                      className=\"text-red-600 hover:text-red-800 text-sm\"\n                    >\n                      Entfernen\n                    </button>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-xs text-gray-600 mb-1\">Typ</label>\n                      <select\n                        value={condition.type}\n                        onChange={(e) => updateCondition(index, { type: e.target.value as any })}\n                        className=\"w-full border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      >\n                        <option value=\"xp_earned\">XP erreicht</option>\n                        <option value=\"training_completed\">Schulungen abgeschlossen</option>\n                        <option value=\"punctual_checkins\">Pünktliche Check-ins</option>\n                        <option value=\"coins_earned\">Coins verdient</option>\n                        <option value=\"level_reached\">Level erreicht</option>\n                        <option value=\"feedback_given\">Feedback gegeben</option>\n                        <option value=\"consecutive_days\">Aufeinanderfolgende Tage</option>\n                      </select>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <label className=\"block text-xs text-gray-600 mb-1\">Operator</label>\n                        <select\n                          value={condition.operator}\n                          onChange={(e) => updateCondition(index, { operator: e.target.value as any })}\n                          className=\"w-full border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        >\n                          <option value=\"gte\">≥ (mindestens)</option>\n                          <option value=\"gt\">&gt; (mehr als)</option>\n                          <option value=\"eq\">= (genau)</option>\n                          <option value=\"lt\">&lt; (weniger als)</option>\n                          <option value=\"lte\">≤ (höchstens)</option>\n                        </select>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-xs text-gray-600 mb-1\">Zielwert</label>\n                        <input\n                          type=\"number\"\n                          value={condition.target}\n                          onChange={(e) => updateCondition(index, { target: parseInt(e.target.value) })}\n                          className=\"w-full border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          min=\"0\"\n                        />\n                      </div>\n                    </div>\n\n                    {condition.skillId !== undefined && (\n                      <div>\n                        <label className=\"block text-xs text-gray-600 mb-1\">Skill (optional)</label>\n                        <select\n                          value={condition.skillId || ''}\n                          onChange={(e) => updateCondition(index, { skillId: e.target.value || undefined })}\n                          className=\"w-full border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        >\n                          <option value=\"\">Alle Skills</option>\n                          <option value=\"knowledge\">🧠 Wissen</option>\n                          <option value=\"loyalty\">❤️ Loyalität</option>\n                          <option value=\"hustle\">💪 Hustle</option>\n                        </select>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 mt-6 pt-6 border-t\">\n          <button\n            onClick={handleSave}\n            disabled={!formData.name || !formData.description}\n            className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n          >\n            {achievement ? 'Speichern' : 'Erstellen'}\n          </button>\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n          >\n            Abbrechen\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Achievement Admin Screen\n * Manage achievements, conditions, and rewards\n */\nexport const AchievementAdminScreen: React.FC = () => {\n  const { _getAchievements, _createAchievement, _updateAchievement, _deleteAchievement, _toggleAchievementActive } = useAchievementsStore();\n\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [editingAchievement, setEditingAchievement] = useState<Achievement | undefined>();\n\n  const achievements = getAchievements();\n  \n  const filteredAchievements = achievements.filter(achievement => {\n    const matchesCategory = selectedCategory === 'all' || achievement.category === selectedCategory;\n    const matchesSearch = achievement.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         achievement.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesCategory && matchesSearch;\n  });\n\n  const categories = [\n    { id: 'all', name: 'Alle', icon: '🏆' },\n    { id: 'learning', name: 'Lernen', icon: '🎓' },\n    { id: 'attendance', name: 'Anwesenheit', icon: '⏰' },\n    { id: 'engagement', name: 'Engagement', icon: '💪' },\n    { id: 'milestone', name: 'Meilensteine', icon: '🎯' },\n    { id: 'special', name: 'Spezial', icon: '⭐' }\n  ];\n\n  const handleCreateAchievement = () => {\n    setEditingAchievement(undefined);\n    setShowModal(true);\n  };\n\n  const handleEditAchievement = (achievement: Achievement) => {\n    setEditingAchievement(achievement);\n    setShowModal(true);\n  };\n\n  const handleSaveAchievement = (achievement: Achievement) => {\n    if (editingAchievement) {\n      updateAchievement(achievement.id, achievement);\n    } else {\n      createAchievement(achievement);\n    }\n  };\n\n  const handleDeleteAchievement = (_achievementId: string) => {\n    if (confirm('Möchtest du dieses Achievement wirklich löschen?')) {\n      deleteAchievement(achievementId);\n    }\n  };\n\n  const handleToggleActive = (_achievementId: string) => {\n    toggleAchievementActive(achievementId);\n  };\n\n  // Statistics\n  const totalAchievements = achievements.length;\n  const activeAchievements = achievements.filter(a => a.isActive).length;\n  const categoryStats = categories.slice(1).map(category => ({\n    ...category,\n    count: achievements.filter(a => a.category === category.id).length\n  }));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            🏆 Achievement Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Erstelle und verwalte Achievements für das Gamification-System\n          </p>\n        </div>\n\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-blue-600 mb-2\">{totalAchievements}</div>\n            <div className=\"text-sm text-gray-600\">Gesamt Achievements</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-green-600 mb-2\">{activeAchievements}</div>\n            <div className=\"text-sm text-gray-600\">Aktive Achievements</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-purple-600 mb-2\">\n              {achievements.filter(a => a.rarity === 'legendary').length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Legendäre Achievements</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-orange-600 mb-2\">\n              {achievements.reduce((sum, a) => sum + a.xpReward, 0)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Gesamt XP Belohnungen</div>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex gap-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Achievements suchen...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            \n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              {categories.map(category => (\n                <option key={category.id} value={category.id}>\n                  {category.icon} {category.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <button\n            onClick={handleCreateAchievement}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            Neues Achievement\n          </button>\n        </div>\n\n        {/* Achievements Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredAchievements.map(achievement => (\n            <AchievementCard\n              key={achievement.id}\n              achievement={achievement}\n              onEdit={handleEditAchievement}\n              onDelete={handleDeleteAchievement}\n              onToggleActive={handleToggleActive}\n            />\n          ))}\n        </div>\n\n        {/* Empty State */}\n        {filteredAchievements.length === 0 && (\n          <div className=\"text-center py-12\">\n            <span className=\"text-6xl mb-4 block\">🏆</span>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              Keine Achievements gefunden\n            </h3>\n            <p className=\"text-gray-600\">\n              Erstelle dein erstes Achievement oder ändere deine Suchkriterien\n            </p>\n          </div>\n        )}\n\n        {/* Achievement Modal */}\n        <AchievementModal\n          achievement={editingAchievement}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSave={handleSaveAchievement}\n        />\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/AddEmployeeScreen.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4889,4934],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { User, EmploymentType, EmploymentStatus, UserRole } from '../types';\nimport { cn } from '../utils/cn';\n\n/**\n * Screen for adding new employees (Admin only)\n */\nexport const AddEmployeeScreen = () => {\n  const navigate = useNavigate();\n  const { _createUser, isLoading } = useAuthStore();\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    // Required fields\n    email: '',\n    firstName: '',\n    lastName: '',\n    role: 'EMPLOYEE' as UserRole,\n    \n    // Personal details\n    privateEmail: '',\n    phone: '',\n    \n    // Address\n    street: '',\n    postalCode: '',\n    city: '',\n    \n    // Employment details\n    position: '',\n    department: '',\n    weeklyHours: '40',\n    employmentType: 'FULL_TIME' as EmploymentType,\n    employmentStatus: 'ACTIVE' as EmploymentStatus,\n    joinDate: new Date().toISOString().split('T')[0],\n    vacationDays: '30',\n    \n    // Banking (optional)\n    iban: '',\n    bic: '',\n  });\n\n  /**\n   * Handle form input changes\n   */\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  /**\n   * Validate form data\n   */\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    // Required fields\n    if (!formData.email.trim()) {\n      newErrors.email = 'E-Mail ist erforderlich';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Ungültige E-Mail-Adresse';\n    }\n\n    if (!formData.firstName.trim()) {\n      newErrors.firstName = 'Vorname ist erforderlich';\n    }\n\n    if (!formData.lastName.trim()) {\n      newErrors.lastName = 'Nachname ist erforderlich';\n    }\n\n    if (!formData.position.trim()) {\n      newErrors.position = 'Position ist erforderlich';\n    }\n\n    if (!formData.department.trim()) {\n      newErrors.department = 'Abteilung ist erforderlich';\n    }\n\n    // Numeric validations\n    const weeklyHours = parseInt(formData.weeklyHours);\n    if (isNaN(weeklyHours) || weeklyHours < 1 || weeklyHours > 60) {\n      newErrors.weeklyHours = 'Wochenstunden müssen zwischen 1 und 60 liegen';\n    }\n\n    const vacationDays = parseInt(formData.vacationDays);\n    if (isNaN(vacationDays) || vacationDays < 0 || vacationDays > 50) {\n      newErrors.vacationDays = 'Urlaubstage müssen zwischen 0 und 50 liegen';\n    }\n\n    // IBAN validation (if provided)\n    if (formData.iban && !/^[A-Z]{2}[0-9]{2}[A-Z0-9]{4}[0-9]{7}([A-Z0-9]?){0,16}$/.test(formData.iban.replace(/\\s/g, ''))) {\n      newErrors.iban = 'Ungültige IBAN';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  /**\n   * Handle form submission\n   */\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      // Prepare user data\n      const userData: Omit<User, 'id' | 'organizationId'> = {\n        email: formData.email.trim(),\n        name: `${formData.firstName.trim()} ${formData.lastName.trim()}`,\n        firstName: formData.firstName.trim(),\n        lastName: formData.lastName.trim(),\n        role: formData.role,\n        privateEmail: formData.privateEmail.trim() || undefined,\n        phone: formData.phone.trim() || undefined,\n        position: formData.position.trim(),\n        department: formData.department.trim(),\n        weeklyHours: parseInt(formData.weeklyHours),\n        employmentType: formData.employmentType,\n        employmentStatus: formData.employmentStatus,\n        joinDate: formData.joinDate,\n        vacationDays: parseInt(formData.vacationDays),\n        address: formData.street.trim() ? {\n          street: formData.street.trim(),\n          postalCode: formData.postalCode.trim(),\n          city: formData.city.trim()\n        } : undefined,\n        bankDetails: formData.iban.trim() ? {\n          iban: formData.iban.trim(),\n          bic: formData.bic.trim() || undefined\n        } : undefined,\n        coinWallet: 0,\n        coinProgress: 0,\n        level: 1,\n        teamIds: [],\n      };\n\n      // Create user\n      await createUser(userData);\n      \n      // Navigate back to team management with success message\n      navigate('/admin/team-management', { \n        state: { \n          message: `Mitarbeiter ${userData.name} wurde erfolgreich erstellt.`,\n          type: 'success'\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error creating user:', error);\n      setErrors({ \n        submit: 'Fehler beim Erstellen des Mitarbeiters. Bitte versuchen Sie es erneut.' \n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-6 py-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <button \n            onClick={() => navigate('/admin/team-management')}\n            className=\"flex items-center text-blue-600 hover:text-blue-700 transition-colors text-sm font-medium mb-4\"\n          >\n            ← Zurück zum Team Management\n          </button>\n          \n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Neuen Mitarbeiter hinzufügen\n          </h1>\n          <p className=\"text-gray-600\">\n            Erstellen Sie ein neues Mitarbeiterkonto mit allen erforderlichen Informationen.\n          </p>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Basic Information */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Grundinformationen</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  E-Mail-Adresse *\n                </label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.email ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                  placeholder=\"max.mustermann@firma.de\"\n                />\n                {errors.email && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Rolle\n                </label>\n                <select\n                  name=\"role\"\n                  value={formData.role}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"EMPLOYEE\">Mitarbeiter</option>\n                  <option value=\"ADMIN\">Administrator</option>\n                  <option value=\"SUPERADMIN\">Super Administrator</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Vorname *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"firstName\"\n                  value={formData.firstName}\n                  onChange={handleInputChange}\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.firstName ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                  placeholder=\"Max\"\n                />\n                {errors.firstName && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.firstName}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Nachname *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"lastName\"\n                  value={formData.lastName}\n                  onChange={handleInputChange}\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.lastName ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                  placeholder=\"Mustermann\"\n                />\n                {errors.lastName && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.lastName}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Kontaktinformationen</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Private E-Mail\n                </label>\n                <input\n                  type=\"email\"\n                  name=\"privateEmail\"\n                  value={formData.privateEmail}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"max.privat@gmail.com\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Telefon\n                </label>\n                <input\n                  type=\"tel\"\n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"+49 30 12345678\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Straße und Hausnummer\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"street\"\n                  value={formData.street}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Musterstraße 123\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    PLZ\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"postalCode\"\n                    value={formData.postalCode}\n                    onChange={handleInputChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"12345\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Stadt\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"city\"\n                    value={formData.city}\n                    onChange={handleInputChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Berlin\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Employment Details */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Beschäftigungsdetails</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Position *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"position\"\n                  value={formData.position}\n                  onChange={handleInputChange}\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.position ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                  placeholder=\"Senior Developer\"\n                />\n                {errors.position && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.position}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Abteilung *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"department\"\n                  value={formData.department}\n                  onChange={handleInputChange}\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.department ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                  placeholder=\"IT\"\n                />\n                {errors.department && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.department}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Wochenstunden\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"weeklyHours\"\n                  value={formData.weeklyHours}\n                  onChange={handleInputChange}\n                  min=\"1\"\n                  max=\"60\"\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.weeklyHours ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                />\n                {errors.weeklyHours && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.weeklyHours}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Beschäftigungsart\n                </label>\n                <select\n                  name=\"employmentType\"\n                  value={formData.employmentType}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"FULL_TIME\">Vollzeit</option>\n                  <option value=\"PART_TIME\">Teilzeit</option>\n                  <option value=\"MINI_JOB\">Minijob</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Eintrittsdatum\n                </label>\n                <input\n                  type=\"date\"\n                  name=\"joinDate\"\n                  value={formData.joinDate}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Urlaubstage pro Jahr\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"vacationDays\"\n                  value={formData.vacationDays}\n                  onChange={handleInputChange}\n                  min=\"0\"\n                  max=\"50\"\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.vacationDays ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                />\n                {errors.vacationDays && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.vacationDays}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Banking Information */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Bankverbindung (Optional)</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  IBAN\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"iban\"\n                  value={formData.iban}\n                  onChange={handleInputChange}\n                  className={cn(\n                    \"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                    errors.iban ? \"border-red-500\" : \"border-gray-300\"\n                  )}\n                  placeholder=\"DE89 3704 0044 0532 0130 00\"\n                />\n                {errors.iban && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.iban}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  BIC\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"bic\"\n                  value={formData.bic}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"COBADEFFXXX\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Error Message */}\n          {errors.submit && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-red-600\">{errors.submit}</p>\n            </div>\n          )}\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end gap-4 pt-6\">\n            <button\n              type=\"button\"\n              onClick={() => navigate('/admin/team-management')}\n              className=\"px-6 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors\"\n              disabled={isSubmitting}\n            >\n              Abbrechen\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || isLoading}\n              className={cn(\n                \"px-6 py-2 bg-blue-600 text-white rounded-lg font-medium transition-colors\",\n                \"hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\",\n                (isSubmitting || isLoading) && \"opacity-50 cursor-not-allowed\"\n              )}\n            >\n              {isSubmitting || isLoading ? 'Erstelle Mitarbeiter...' : 'Mitarbeiter erstellen'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/AdminCoinsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/AdminScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":70,"column":22,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Routes, Route, Link, useLocation, Navigate } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { cn } from '../utils/cn';\n\n// Import existing and new admin components\nimport { TeamManagementScreen } from './TeamManagementScreen';\nimport { AddEmployeeScreen } from './AddEmployeeScreen';\nimport { TeamMemberDetailsScreen } from './TeamMemberDetailsScreen';\nimport { TeamsOverviewScreen } from './TeamsOverviewScreen';\n\n// Placeholder components for new admin sections\nconst OrganigramScreen = () => (\n  <div className=\"flex-1 bg-gray-50 min-h-screen\">\n    <div className=\"max-w-7xl mx-auto px-6 py-6\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Organigram</h1>\n      <div className=\"bg-white rounded-xl shadow-sm p-8 text-center\">\n        <div className=\"text-6xl mb-4\">🏢</div>\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Organisationsstruktur</h2>\n        <p className=\"text-gray-600\">\n          Hier wird eine visualisierte Darstellung der Teamstruktur und Hierarchie angezeigt.\n        </p>\n        <div className=\"mt-6 text-sm text-gray-500\">\n          Feature wird in Kürze verfügbar sein.\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst AvatarManagementScreen = () => (\n  <div className=\"flex-1 bg-gray-50 min-h-screen\">\n    <div className=\"max-w-7xl mx-auto px-6 py-6\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Avatarverwaltung</h1>\n      <div className=\"bg-white rounded-xl shadow-sm p-8 text-center\">\n        <div className=\"text-6xl mb-4\">🎮</div>\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Gamification Management</h2>\n        <p className=\"text-gray-600\">\n          Verwalten Sie Level, Ränge, Achievements und Avatare für das Mitarbeiter-Gamification-System.\n        </p>\n        <div className=\"mt-6 text-sm text-gray-500\">\n          Feature wird in Kürze verfügbar sein.\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst BenefitsManagementScreen = () => (\n  <div className=\"flex-1 bg-gray-50 min-h-screen\">\n    <div className=\"max-w-7xl mx-auto px-6 py-6\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Benefitsverwaltung</h1>\n      <div className=\"bg-white rounded-xl shadow-sm p-8 text-center\">\n        <div className=\"text-6xl mb-4\">💎</div>\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Benefits & Coin-System</h2>\n        <p className=\"text-gray-600\">\n          Verwalten Sie alle Benefit-Angebote und konfigurieren Sie das Coin-System.\n        </p>\n        <div className=\"mt-6 text-sm text-gray-500\">\n          Feature wird in Kürze verfügbar sein.\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n/**\n * Admin Layout mit Submenu\n */\nconst AdminLayout = (_{ children }: { children) => {\n  const location = useLocation();\n  \n  const adminTabs = [\n    { \n      path: '/admin/team-management', \n      label: 'Teamverwaltung', \n      icon: '👥',\n      description: 'Mitarbeiter-Teams und Lead-Zuordnung'\n    },\n    { \n      path: '/admin/organigram', \n      label: 'Organigram', \n      icon: '🏢',\n      description: 'Visualisierte Teamstruktur'\n    },\n    { \n      path: '/admin/avatar-management', \n      label: 'Avatarverwaltung', \n      icon: '🎮',\n      description: 'Level, Achievements & Gamification'\n    },\n    { \n      path: '/admin/benefits-management', \n      label: 'Benefitsverwaltung', \n      icon: '💎',\n      description: 'Benefits & Coin-System'\n    },\n  ];\n\n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-6 py-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Administration</h1>\n          <p className=\"text-gray-600\">Verwaltung von Teams, Mitarbeitern und System-Einstellungen</p>\n        </div>\n\n        {/* Admin Navigation Tabs */}\n        <div className=\"bg-white rounded-xl shadow-sm mb-6\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"flex space-x-8 px-6\" aria-label=\"Admin Navigation\">\n              {adminTabs.map((tab) => {\n                const isActive = location.pathname.startsWith(tab.path);\n                return (\n                  <Link\n                    key={tab.path}\n                    to={tab.path}\n                    className={cn(\n                      \"flex items-center py-4 px-1 border-b-2 font-medium text-sm transition-colors\",\n                      isActive\n                        ? \"border-blue-500 text-blue-600\"\n                        : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n                    )}\n                  >\n                    <span className=\"text-lg mr-2\">{tab.icon}</span>\n                    <div className=\"flex flex-col\">\n                      <span>{tab.label}</span>\n                      <span className=\"text-xs text-gray-400 font-normal\">\n                        {tab.description}\n                      </span>\n                    </div>\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"min-h-[400px]\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Admin Screen mit Routing\n */\nexport const AdminScreen = () => {\n  const { user } = useAuthStore();\n  \n  // Check if user is admin\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n  \n  if (!isAdmin) {\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Navigate to=\"/admin/team-management\" replace />} />\n      \n      {/* Team Management Routes */}\n      <Route path=\"/team-management\" element={\n        <AdminLayout>\n          <TeamManagementScreen />\n        </AdminLayout>\n      } />\n      <Route path=\"/team-management/add-employee\" element={<AddEmployeeScreen />} />\n      <Route path=\"/team-management/user/:userId\" element={<TeamMemberDetailsScreen />} />\n      <Route path=\"/team-management/teams\" element={<TeamsOverviewScreen />} />\n      \n      {/* New Admin Routes */}\n      <Route path=\"/organigram\" element={\n        <AdminLayout>\n          <OrganigramScreen />\n        </AdminLayout>\n      } />\n      <Route path=\"/avatar-management\" element={\n        <AdminLayout>\n          <AvatarManagementScreen />\n        </AdminLayout>\n      } />\n      <Route path=\"/benefits-management\" element={\n        <AdminLayout>\n          <BenefitsManagementScreen />\n        </AdminLayout>\n      } />\n    </Routes>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/AvatarSystemAdminScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":396,"column":44,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAvatarStore } from '../state/avatar';\nimport { useAchievementsStore } from '../state/achievements';\nimport { useGamificationStore } from '../state/gamification';\nimport { cn } from '../utils/cn';\n\ninterface UserAvatarRowProps {\n  userId: string;\n  userAvatar: any;\n  onManageUser: (userId: string) => void;\n}\n\nconst UserAvatarRow: React.FC<UserAvatarRowProps> = ({ userId, userAvatar, onManageUser }) => {\n  const { _getUnlockedAchievements } = useAchievementsStore();\n  const unlockedAchievements = getUnlockedAchievements(userId);\n\n  return (\n    <tr className=\"hover:bg-gray-50\">\n      <td className=\"px-6 py-4 whitespace-nowrap\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-gray-300 to-gray-500 rounded-full flex items-center justify-center text-white\">\n            👤\n          </div>\n          <div className=\"ml-4\">\n            <div className=\"text-sm font-medium text-gray-900\">User {userId}</div>\n            <div className=\"text-sm text-gray-500\">{userAvatar.title || 'Kein Titel'}</div>\n          </div>\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap\">\n        <div className=\"flex items-center\">\n          <div className=\"bg-gradient-to-r from-cyan-400 to-cyan-600 text-white text-xs px-2 py-1 rounded-full font-bold\">\n            {userAvatar.level}\n          </div>\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n        {userAvatar.totalXP.toLocaleString()} XP\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap\">\n        <div className=\"flex gap-1\">\n          {userAvatar.skills.map((skill: any) => (\n            <div\n              key={skill.id}\n              className=\"flex items-center gap-1 text-xs bg-gray-100 px-2 py-1 rounded-full\"\n            >\n              <span>{skill.icon}</span>\n              <span>L{skill.level}</span>\n            </div>\n          ))}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n        {unlockedAchievements.length}\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n        <button\n          onClick={() => onManageUser(userId)}\n          className=\"text-blue-600 hover:text-blue-900\"\n        >\n          Verwalten\n        </button>\n      </td>\n    </tr>\n  );\n};\n\ninterface ManageUserModalProps {\n  userId: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ManageUserModal: React.FC<ManageUserModalProps> = ({ userId, isOpen, onClose }) => {\n  const { _getUserAvatar, _addXP } = useAvatarStore();\n  const { _awardXP } = useGamificationStore();\n  const [xpAmount, setXpAmount] = useState('50');\n  const [xpReason, setXpReason] = useState('');\n  const [selectedSkill, setSelectedSkill] = useState('');\n\n  const userAvatar = getUserAvatar(userId);\n\n  if (!isOpen || !userAvatar) return null;\n\n  const handleAwardXP = () => {\n    if (!xpAmount || !xpReason) return;\n    \n    awardXP({\n      type: 'manual',\n      userId,\n      skillIds: selectedSkill ? [selectedSkill] : undefined,\n      xpAmount: parseInt(xpAmount),\n      metadata: { reason: xpReason }\n    });\n\n    setXpAmount('50');\n    setXpReason('');\n    setSelectedSkill('');\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            Benutzer verwalten: User {userId}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            ✕\n          </button>\n        </div>\n\n        {/* Current Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">{userAvatar.level}</div>\n            <div className=\"text-sm text-blue-700\">Avatar Level</div>\n          </div>\n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {userAvatar.totalXP.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-green-700\">Gesamt XP</div>\n          </div>\n          <div className=\"bg-purple-50 p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {userAvatar.skills.reduce((sum, skill) => sum + skill.level, 0)}\n            </div>\n            <div className=\"text-sm text-purple-700\">Skill Level</div>\n          </div>\n        </div>\n\n        {/* Skills Overview */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Skills</h3>\n          <div className=\"space-y-3\">\n            {userAvatar.skills.map((skill: any) => (\n              <div key={skill.id} className=\"flex items-center gap-4\">\n                <span className=\"text-xl\">{skill.icon}</span>\n                <div className=\"flex-1\">\n                  <div className=\"flex justify-between items-center mb-1\">\n                    <span className=\"font-medium\">{skill.name}</span>\n                    <span className=\"text-sm text-gray-600\">Level {skill.level}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"h-2 rounded-full\"\n                      style={{\n                        width: `${Math.min(100, (skill.totalXP / Math.max(100, skill.totalXP)) * 60 + 40)}%`,\n                        backgroundColor: skill.color\n                      }}\n                    />\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    {skill.totalXP} XP\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Award XP Section */}\n        <div className=\"border-t pt-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">XP vergeben</h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                XP Menge\n              </label>\n              <input\n                type=\"number\"\n                value={xpAmount}\n                onChange={(e) => setXpAmount(e.target.value)}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"50\"\n                min=\"1\"\n                max=\"1000\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Skill (optional)\n              </label>\n              <select\n                value={selectedSkill}\n                onChange={(e) => setSelectedSkill(e.target.value)}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">Allgemein (alle Skills)</option>\n                {userAvatar.skills.map((skill: any) => (\n                  <option key={skill.id} value={skill.id}>\n                    {skill.icon} {skill.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Grund\n              </label>\n              <input\n                type=\"text\"\n                value={xpReason}\n                onChange={(e) => setXpReason(e.target.value)}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"z.B. Hervorragende Leistung\"\n              />\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={handleAwardXP}\n                disabled={!xpAmount || !xpReason}\n                className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                XP vergeben\n              </button>\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n              >\n                Schließen\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Avatar System Admin Screen\n * Main management interface for the avatar and gamification system\n */\nexport const AvatarSystemAdminScreen: React.FC = () => {\n  const { _userAvatars, _getAllUserAvatars } = useAvatarStore();\n  const { config, updateConfig, _getLeaderboard } = useGamificationStore();\n  const [selectedTab, setSelectedTab] = useState('users');\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const allUserAvatars = getAllUserAvatars();\n  const leaderboard = getLeaderboard(undefined, 20);\n\n  const filteredUsers = allUserAvatars.filter(avatar => \n    avatar.userId.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const tabs = [\n    { id: 'users', name: 'Benutzer', icon: '👥' },\n    { id: 'leaderboard', name: 'Rangliste', icon: '🏆' },\n    { id: 'config', name: 'Konfiguration', icon: '⚙️' },\n    { id: 'statistics', name: 'Statistiken', icon: '📊' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            👤 Avatarsystem Verwaltung\n          </h1>\n          <p className=\"text-gray-600\">\n            Verwalte Benutzer-Avatare, XP-System und Achievements\n          </p>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"border-b border-gray-200 mb-6\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setSelectedTab(tab.id)}\n                className={cn(\n                  \"py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap\",\n                  selectedTab === tab.id\n                    ? \"border-blue-500 text-blue-600\"\n                    : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n                )}\n              >\n                <span className=\"mr-2\">{tab.icon}</span>\n                {tab.name}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        {selectedTab === 'users' && (\n          <div>\n            {/* Search and Actions */}\n            <div className=\"flex justify-between items-center mb-6\">\n              <div className=\"flex-1 max-w-md\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Benutzer suchen...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n              <div className=\"flex gap-3\">\n                <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">\n                  Bulk XP vergeben\n                </button>\n              </div>\n            </div>\n\n            {/* Users Table */}\n            <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Benutzer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Level\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      XP\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Skills\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Achievements\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Aktionen\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredUsers.map((userAvatar) => (\n                    <UserAvatarRow\n                      key={userAvatar.userId}\n                      userId={userAvatar.userId}\n                      userAvatar={userAvatar}\n                      onManageUser={setSelectedUser}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n\n        {selectedTab === 'leaderboard' && (\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-6\">🏆 Rangliste</h2>\n            <div className=\"space-y-4\">\n              {leaderboard.map((entry, index) => (\n                <div\n                  key={entry.userId}\n                  className={cn(\n                    \"flex items-center justify-between p-4 rounded-lg\",\n                    index < 3 ? \"bg-gradient-to-r from-yellow-50 to-orange-50\" : \"bg-gray-50\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className={cn(\n                      \"w-10 h-10 rounded-full flex items-center justify-center text-white font-bold\",\n                      index === 0 ? \"bg-yellow-500\" :\n                      index === 1 ? \"bg-gray-400\" :\n                      index === 2 ? \"bg-orange-600\" :\n                      \"bg-gray-300\"\n                    )}>\n                      {index + 1}\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-gray-900\">{entry.userName}</p>\n                      <p className=\"text-sm text-gray-600\">Level {entry.level}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-gray-900\">{entry.xp.toLocaleString()} XP</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {selectedTab === 'config' && (_<div className=\"bg-white shadow rounded-lg p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-6\">⚙️ Konfiguration</h2>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">XP Raten</h3>\n                <div className=\"grid grid-cols-1 md: grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Schulung abgeschlossen\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={config.xpRates.trainingCompleted}\n                      onChange={(e) => updateConfig({\n                        xpRates: { ...config.xpRates, trainingCompleted: parseInt(e.target.value) }\n                      })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Pünktlich gestempelt\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={config.xpRates.punctualCheckin}\n                      onChange={(e) => updateConfig({\n                        xpRates: { ...config.xpRates, punctualCheckin: parseInt(e.target.value) }\n                      })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Feedback gegeben\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={config.xpRates.feedbackGiven}\n                      onChange={(e) => updateConfig({\n                        xpRates: { ...config.xpRates, feedbackGiven: parseInt(e.target.value) }\n                      })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Täglicher Login\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={config.xpRates.dailyLogin}\n                      onChange={(e) => updateConfig({\n                        xpRates: { ...config.xpRates, dailyLogin: parseInt(e.target.value) }\n                      })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Level Einstellungen</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Basis XP pro Level\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={config.levelSystem.baseXP}\n                      onChange={(e) => updateConfig({\n                        levelSystem: { ...config.levelSystem, baseXP: parseInt(e.target.value) }\n                      })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Multiplikator pro Level (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={config.levelSystem.multiplier * 100}\n                      onChange={(e) => updateConfig({\n                        levelSystem: { ...config.levelSystem, multiplier: parseInt(e.target.value) / 100 }\n                      })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {selectedTab === 'statistics' && (_<div className=\"grid grid-cols-1 md: grid-cols-2 lg, avatar) => sum + avatar.totalXP, 0).toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Gesamt XP</div>\n            </div>\n            \n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                {Math.round(allUserAvatars.reduce((sum, avatar) => sum + avatar.level, 0) / Math.max(1, allUserAvatars.length))}\n              </div>\n              <div className=\"text-sm text-gray-600\">Ø Level</div>\n            </div>\n            \n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">\n                {allUserAvatars.reduce((sum, avatar) => sum + avatar.skills.reduce((skillSum, skill) => skillSum + skill.level, 0), 0)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Gesamt Skill Level</div>\n            </div>\n          </div>\n        )}\n\n        {/* Manage User Modal */}\n        <ManageUserModal\n          userId={selectedUser || ''}\n          isOpen={!!selectedUser}\n          onClose={() => setSelectedUser(null)}\n        />\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/BenefitsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/CalendarScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getWeekNumber' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":352,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":352,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useLeavesStore } from '../state/leaves';\nimport { useTimeRecordsStore } from '../state/timeRecords';\nimport { useRemindersStore } from '../state/reminders';\nimport { LeaveRequest, TimeRecord } from '../types';\nimport { VacationReminder } from '../types/reminders';\nimport { YearView } from '../components/YearView';\nimport { cn } from '../utils/cn';\n\ninterface CalendarDay {\n  date: Date;\n  isCurrentMonth: boolean;\n  isToday: boolean;\n  isWeekend: boolean;\n  leaves: LeaveRequest[];\n  timeRecords: TimeRecord[];\n  reminders: VacationReminder[];\n  userLeaves: LeaveRequest[]; // Own leaves for personal view\n  userTimeRecord: TimeRecord | null; // Own time record\n}\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  date: string;\n  type: 'vacation' | 'sick' | 'work' | 'reminder' | 'personal';\n  userId?: string;\n  color: string;\n}\n\n/**\n * Enhanced calendar screen with personal and team views\n * Features vacation planning, time tracking integration, and event management\n */\nexport const CalendarScreen = () => {\n  const navigate = useNavigate();\n  const { user, getAllUsers } = useAuthStore();\n  const { getAllLeaveRequests } = useLeavesStore();\n  const { getTimeRecordsForPeriod } = useTimeRecordsStore();\n  const { reminders } = useRemindersStore();\n  \n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [calendarDays, setCalendarDays] = useState<CalendarDay[]>([]);\n  const [viewMode, setViewMode] = useState<'personal' | 'team'>('personal');\n  const [calendarView, setCalendarView] = useState<'month' | 'year'>('month');\n  const [filterMode, setFilterMode] = useState<'all' | 'leaves' | 'work'>('all');\n  const [selectedDay, setSelectedDay] = useState<CalendarDay | null>(null);\n  const [showEventModal, setShowEventModal] = useState(false);\n  \n  // Check if user is admin\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n  \n  const allUsers = useMemo(() => getAllUsers(), [getAllUsers]);\n  const allLeaves = getAllLeaveRequests();\n\n  /**\n   * Gets user name by ID\n   */\n  const getUserName = (userId: string): string => {\n    const foundUser = allUsers.find(u => u.id === userId);\n    if (foundUser) {\n      return `${foundUser.firstName || foundUser.name.split(' ')[0]} ${foundUser.lastName || foundUser.name.split(' ')[1] || ''}`.trim();\n    }\n    \n    const names: { [key: string]: string } = {\n      '1': 'Max M.',\n      '2': 'Anna A.',\n      '3': 'Tom K.',\n      '4': 'Test U.',\n      '5': 'Lisa S.',\n      '6': 'Julia B.',\n      '7': 'Marco L.'\n    };\n    return names[userId] || 'Unbekannt';\n  };\n\n  /**\n   * Generates calendar events for the current month\n   */\n  const generateCalendarEvents = (): CalendarEvent[] => {\n    const events: CalendarEvent[] = [];\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    \n    // Get month range\n    const startOfMonth = new Date(year, month, 1);\n    const endOfMonth = new Date(year, month + 1, 0);\n    const startDateStr = startOfMonth.toISOString().split('T')[0];\n    const endDateStr = endOfMonth.toISOString().split('T')[0];\n\n    // Add leave events\n    allLeaves\n      .filter(leave => {\n        const leaveStart = new Date(leave.startDate);\n        const leaveEnd = new Date(leave.endDate);\n        return (leaveStart <= endOfMonth && leaveEnd >= startOfMonth) && \n               leave.status === 'APPROVED' &&\n               (viewMode === 'team' || leave.userId === user?.id);\n      })\n      .forEach(leave => {\n        const startDate = new Date(Math.max(new Date(leave.startDate).getTime(), startOfMonth.getTime()));\n        const endDate = new Date(Math.min(new Date(leave.endDate).getTime(), endOfMonth.getTime()));\n        \n        for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {\n          events.push({\n            id: `${leave.id}-${date.toISOString().split('T')[0]}`,\n            title: viewMode === 'team' ? \n              `${getUserName(leave.userId)} - ${leave.type === 'VACATION' ? 'Urlaub' : 'Krank'}` :\n              leave.type === 'VACATION' ? 'Urlaub' : 'Krank',\n            date: date.toISOString().split('T')[0],\n            type: leave.type === 'VACATION' ? 'vacation' : 'sick',\n            userId: leave.userId,\n            color: leave.type === 'VACATION' ? 'bg-blue-500' : 'bg-red-500'\n          });\n        }\n      });\n\n    // Add time records for personal view\n    if (viewMode === 'personal' && user) {\n      const timeRecords = getTimeRecordsForPeriod(user.id, startDateStr, endDateStr);\n      timeRecords.forEach(record => {\n        if (record.timeOut) { // Only completed records\n          events.push({\n            id: `time-${record.id}`,\n            title: `${record.totalHours.toFixed(1)}h gearbeitet`,\n            date: record.date,\n            type: 'work',\n            color: record.totalHours >= 8 ? 'bg-green-500' : \n                   record.totalHours >= 6 ? 'bg-yellow-500' : 'bg-red-500'\n          });\n        }\n      });\n    }\n\n    // Add reminders\n    reminders\n      .filter(reminder => {\n        const reminderDate = new Date(reminder.reminderDate);\n        return reminderDate >= startOfMonth && reminderDate <= endOfMonth && \n               reminder.isActive &&\n               (viewMode === 'team' || reminder.userId === user?.id);\n      })\n      .forEach(reminder => {\n        events.push({\n          id: `reminder-${reminder.id}`,\n          title: reminder.message,\n          date: reminder.reminderDate,\n          type: 'reminder',\n          color: 'bg-orange-500'\n        });\n      });\n\n    return events;\n  };\n\n  /**\n   * Generates calendar days with events and time data\n   */\n  useEffect(() => {\n    const generateCalendar = () => {\n      const year = currentDate.getFullYear();\n      const month = currentDate.getMonth();\n      \n      // First day of the month\n      const firstDay = new Date(year, month, 1);\n      \n      // Start from Monday of the week containing the first day\n      const startDate = new Date(firstDay);\n      const dayOfWeek = firstDay.getDay();\n      const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n      startDate.setDate(firstDay.getDate() - daysToSubtract);\n      \n      // Generate time records for the month\n      const startDateStr = new Date(year, month, 1).toISOString().split('T')[0];\n      const endDateStr = new Date(year, month + 1, 0).toISOString().split('T')[0];\n      \n      // Get user's time records if in personal mode\n      const userTimeRecords = user && viewMode === 'personal' ? \n        getTimeRecordsForPeriod(user.id, startDateStr, endDateStr) : [];\n      \n      // Generate team time records for team view\n      const teamTimeRecords = viewMode === 'team' ? \n        allUsers.flatMap(u => getTimeRecordsForPeriod(u.id, startDateStr, endDateStr)) : [];\n      \n      // Generate 42 days (6 weeks)\n      const days: CalendarDay[] = [];\n      const today = new Date();\n      \n      for (let i = 0; i < 42; i++) {\n        const date = new Date(startDate);\n        date.setDate(startDate.getDate() + i);\n        \n        const isCurrentMonth = date.getMonth() === month;\n        const isToday = date.toDateString() === today.toDateString();\n        const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n        \n        // Find leaves for this date\n        const dateString = date.toISOString().split('T')[0];\n        const dayLeaves = allLeaves.filter(leave => {\n          const startDate = new Date(leave.startDate);\n          const endDate = new Date(leave.endDate);\n          const currentDate = new Date(dateString);\n          \n          return currentDate >= startDate && currentDate <= endDate && \n                 leave.status === 'APPROVED' &&\n                 (viewMode === 'team' || leave.userId === user?.id);\n        });\n\n        // User's leaves for personal view\n        const userLeaves = allLeaves.filter(leave => {\n          const startDate = new Date(leave.startDate);\n          const endDate = new Date(leave.endDate);\n          const currentDate = new Date(dateString);\n          \n          return currentDate >= startDate && currentDate <= endDate && \n                 leave.userId === user?.id && leave.status === 'APPROVED';\n        });\n        \n        // Find time records for this date\n        const dayTimeRecords = teamTimeRecords.filter(record => record.date === dateString);\n        const userTimeRecord = userTimeRecords.find(record => record.date === dateString) || null;\n        \n        // Find reminders for this date\n        const dayReminders = reminders.filter(reminder => \n          reminder.reminderDate === dateString && reminder.isActive &&\n          (viewMode === 'team' || reminder.userId === user?.id)\n        );\n        \n        days.push({\n          date,\n          isCurrentMonth,\n          isToday,\n          isWeekend,\n          leaves: dayLeaves,\n          timeRecords: dayTimeRecords,\n          reminders: dayReminders,\n          userLeaves,\n          userTimeRecord\n        });\n      }\n      \n      setCalendarDays(days);\n    };\n    \n    generateCalendar();\n  }, [currentDate, allLeaves, reminders, viewMode, user, isAdmin, allUsers, getTimeRecordsForPeriod]);\n\n  /**\n   * Navigation functions\n   */\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (direction === 'prev') {\n      newDate.setMonth(currentDate.getMonth() - 1);\n    } else {\n      newDate.setMonth(currentDate.getMonth() + 1);\n    }\n    setCurrentDate(newDate);\n  };\n\n  const navigateYear = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (direction === 'prev') {\n      newDate.setFullYear(currentDate.getFullYear() - 1);\n    } else {\n      newDate.setFullYear(currentDate.getFullYear() + 1);\n    }\n    setCurrentDate(newDate);\n  };\n\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  /**\n   * Get month year text\n   */\n  const getMonthYearText = () => {\n    return currentDate.toLocaleDateString('de-DE', {\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  /**\n   * Generate year view data with weeks for vacation overview.\n   * Creates a nested structure: userId -> weekNumber -> LeaveRequest[]\n   * \n   * @returns Object mapping user IDs to week numbers to leave requests\n   */\n  const generateYearData = (): { [userId: string]: { [week: string]: LeaveRequest[] } } => {\n    const year = currentDate.getFullYear();\n    const yearData: { [userId: string]: { [week: string]: LeaveRequest[] } } = {};\n    \n    // Get all users for team view\n    const usersToShow = viewMode === 'team' ? allUsers : (user ? [user] : []);\n    \n    // Initialize user data\n    usersToShow.forEach(u => {\n      yearData[u.id] = {};\n    });\n\n    // Get all approved leaves for the year\n    const yearLeaves = allLeaves.filter(leave => {\n      const leaveYear = new Date(leave.startDate).getFullYear();\n      return leaveYear === year && leave.status === 'APPROVED';\n    });\n\n    // Process each week of the year (52-53 weeks)\n    for (let week = 1; week <= 53; week++) {\n      const weekStart = getDateOfWeek(week, year);\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n\n      usersToShow.forEach(u => {\n        yearData[u.id][week] = yearLeaves.filter(leave => {\n          if (leave.userId !== u.id) return false;\n          \n          const leaveStart = new Date(leave.startDate);\n          const leaveEnd = new Date(leave.endDate);\n          \n          // Check if leave overlaps with this week\n          return leaveStart <= weekEnd && leaveEnd >= weekStart;\n        });\n      });\n    }\n\n    return yearData;\n  };\n\n  /**\n   * Get the first day of a specific week in a year\n   */\n  const getDateOfWeek = (week: number, year: number) => {\n    const jan1 = new Date(year, 0, 1);\n    const days = (week - 1) * 7;\n    const weekStart = new Date(jan1.getTime() + days * 24 * 60 * 60 * 1000);\n    \n    // Adjust to Monday\n    const dayOfWeek = weekStart.getDay();\n    const diff = (dayOfWeek === 0 ? -6 : 1) - dayOfWeek;\n    weekStart.setDate(weekStart.getDate() + diff);\n    \n    return weekStart;\n  };\n\n  /**\n   * Get week number for a date\n   */\n  const getWeekNumber = (date: Date) => {\n    const start = new Date(date.getFullYear(), 0, 1);\n    const days = Math.floor((date.getTime() - start.getTime()) / (24 * 60 * 60 * 1000));\n    return Math.ceil((days + start.getDay() + 1) / 7);\n  };\n\n  /**\n   * Get vacation days remaining for current user\n   */\n  const getVacationStats = () => {\n    if (!user) return { total: 0, used: 0, remaining: 0 };\n    \n    const currentYear = new Date().getFullYear();\n    const approvedVacations = allLeaves.filter(leave =>\n      leave.userId === user.id &&\n      leave.type === 'VACATION' &&\n      leave.status === 'APPROVED' &&\n      new Date(leave.startDate).getFullYear() === currentYear\n    );\n    \n    const usedDays = approvedVacations.reduce((total, leave) => {\n      const start = new Date(leave.startDate);\n      const end = new Date(leave.endDate);\n      const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n      return total + days;\n    }, 0);\n    \n    const totalDays = user.vacationDays || 30;\n    \n    return {\n      total: totalDays,\n      used: usedDays,\n      remaining: Math.max(0, totalDays - usedDays)\n    };\n  };\n\n  /**\n   * Renders day content based on view mode and filters\n   */\n  const renderDayContent = (day: CalendarDay) => {\n    const events = generateCalendarEvents().filter(event => event.date === day.date.toISOString().split('T')[0]);\n    \n    // Apply filter\n    const filteredEvents = events.filter(event => {\n      if (filterMode === 'all') return true;\n      if (filterMode === 'leaves') return event.type === 'vacation' || event.type === 'sick';\n      if (filterMode === 'work') return event.type === 'work';\n      return true;\n    });\n\n    return (\n      <div className=\"h-full flex flex-col p-1\">\n        {/* Day number */}\n        <span className={cn(\n          \"text-sm font-medium mb-1\",\n          !day.isCurrentMonth && \"text-gray-400\",\n          day.isToday && \"text-blue-600 font-bold\",\n          day.isWeekend && day.isCurrentMonth && \"text-gray-600\"\n        )}>\n          {day.date.getDate()}\n        </span>\n        \n        {/* Events */}\n        <div className=\"flex-1 space-y-0.5\">\n          {filteredEvents.slice(0, 3).map((event, index) => (\n            <div key={index} className={cn(\n              \"text-xs px-1 py-0.5 rounded text-white truncate\",\n              event.color\n            )}>\n              {event.title}\n            </div>\n          ))}\n          \n          {filteredEvents.length > 3 && (\n            <div className=\"text-xs text-gray-500\">\n              +{filteredEvents.length - 3} mehr\n            </div>\n          )}\n        </div>\n        \n        {/* Weekend indicator */}\n        {day.isWeekend && day.isCurrentMonth && (\n          <div className=\"text-xs text-gray-400 mt-auto\">\n            {day.date.getDay() === 6 ? 'SA' : 'SO'}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Handle day click\n   */\n  const handleDayClick = (day: CalendarDay) => {\n    setSelectedDay(day);\n    setShowEventModal(true);\n  };\n\n  const weekdays = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];\n  const vacationStats = getVacationStats();\n\n  if (!user) return null;\n\n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"flex-1 px-4 py-6 overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            {viewMode === 'personal' ? 'Mein Kalender' : 'Team Kalender'}\n          </h1>\n          \n          <div className=\"flex items-center space-x-3\">\n            {/* Team Calendar Link for Admins */}\n            {isAdmin && (\n              <button\n                onClick={() => navigate('/team-calendar')}\n                className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors text-sm flex items-center gap-2\"\n              >\n                📊 Team-Kalender\n              </button>\n            )}\n            \n            {/* Quick Actions */}\n            <button\n              onClick={() => navigate('/request-leave')}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n            >\n              + Urlaub\n            </button>\n            \n            {/* Today Button */}\n            <button\n              onClick={goToToday}\n              className=\"bg-white px-3 py-2 rounded-lg shadow-sm hover:bg-gray-50 transition-colors text-sm border\"\n            >\n              Heute\n            </button>\n            \n            {/* Month/Year Navigation */}\n            <div className=\"flex items-center space-x-2\">\n              <button \n                onClick={() => calendarView === 'month' ? navigateMonth('prev') : navigateYear('prev')}\n                className=\"w-8 h-8 flex items-center justify-center bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors\"\n              >\n                <span className=\"text-lg text-gray-600\">‹</span>\n              </button>\n              <h2 className=\"text-lg font-semibold text-gray-900 min-w-40 text-center\">\n                {calendarView === 'month' ? getMonthYearText() : currentDate.getFullYear()}\n              </h2>\n              <button \n                onClick={() => calendarView === 'month' ? navigateMonth('next') : navigateYear('next')}\n                className=\"w-8 h-8 flex items-center justify-center bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors\"\n              >\n                <span className=\"text-lg text-gray-600\">›</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* View Toggle and Stats */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6\">\n          {/* View Mode Toggle */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"flex bg-white rounded-lg p-1 shadow-sm\">\n              <button\n                onClick={() => setViewMode('personal')}\n                className={cn(\n                  \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n                  viewMode === 'personal' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n                )}\n              >\n                👤 Persönlich\n              </button>\n              <button\n                onClick={() => setViewMode('team')}\n                className={cn(\n                  \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n                  viewMode === 'team' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n                )}\n              >\n                👥 Team\n              </button>\n            </div>\n          </div>\n\n          {/* Calendar View Toggle */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"flex bg-white rounded-lg p-1 shadow-sm\">\n              <button\n                onClick={() => setCalendarView('month')}\n                className={cn(\n                  \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n                  calendarView === 'month' ? \"bg-green-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n                )}\n              >\n                📅 Monat\n              </button>\n              <button\n                onClick={() => setCalendarView('year')}\n                className={cn(\n                  \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n                  calendarView === 'year' ? \"bg-green-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n                )}\n              >\n                📆 Jahr\n              </button>\n            </div>\n          </div>\n\n          {/* Vacation Stats (Personal View Only) */}\n          {viewMode === 'personal' && (\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-white rounded-xl p-4 shadow-sm\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Urlaubsübersicht {new Date().getFullYear()}</h3>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-blue-600\">{vacationStats.total}</p>\n                    <p className=\"text-xs text-gray-500\">Gesamt</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-red-600\">{vacationStats.used}</p>\n                    <p className=\"text-xs text-gray-500\">Genommen</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-green-600\">{vacationStats.remaining}</p>\n                    <p className=\"text-xs text-gray-500\">Verfügbar</p>\n                  </div>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"mt-3\">\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-500 h-2 rounded-full transition-all\"\n                      style={{ width: `${Math.min(100, (vacationStats.used / vacationStats.total) * 100)}%` }}\n                    />\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1 text-center\">\n                    {((vacationStats.used / vacationStats.total) * 100).toFixed(0)}% verbraucht\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Filter Toggle */}\n        <div className=\"flex bg-white rounded-lg p-1 mb-4 shadow-sm\">\n          <button\n            onClick={() => setFilterMode('all')}\n            className={cn(\n              \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n              filterMode === 'all' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n            )}\n          >\n            Alle\n          </button>\n          <button\n            onClick={() => setFilterMode('leaves')}\n            className={cn(\n              \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n              filterMode === 'leaves' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n            )}\n          >\n            Abwesenheit\n          </button>\n          {viewMode === 'personal' && (\n            <button\n              onClick={() => setFilterMode('work')}\n              className={cn(\n                \"flex-1 py-2 px-3 rounded-md transition-colors text-sm\",\n                filterMode === 'work' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n              )}\n            >\n              Arbeitszeit\n            </button>\n          )}\n        </div>\n\n        {/* Calendar */}\n        <div className=\"bg-white rounded-xl p-4 shadow-sm\">\n          {/* Weekday headers */}\n          <div className=\"grid grid-cols-7 mb-2\">\n            {weekdays.map((day) => (\n              <div key={day} className=\"flex items-center justify-center py-3\">\n                <span className=\"text-sm font-semibold text-gray-500\">{day}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* Calendar grid - Month View */}\n          {calendarView === 'month' && (\n            <div className=\"grid grid-cols-7 gap-0 border border-gray-200 rounded-lg overflow-hidden\">\n              {calendarDays.map((day, index) => (\n                <button\n                  key={index}\n                  className={cn(\n                    \"aspect-square border-b border-r border-gray-100 text-left hover:bg-gray-50 transition-colors relative\",\n                    !day.isCurrentMonth && \"bg-gray-50\",\n                    day.isToday && \"bg-blue-50 border-blue-200\",\n                    day.isWeekend && \"bg-gray-25\"\n                  )}\n                  onClick={() => handleDayClick(day)}\n                >\n                  {renderDayContent(day)}\n                </button>\n              ))}\n            </div>\n          )}\n\n          {/* Year View */}\n          {calendarView === 'year' && (\n            <YearView \n              year={currentDate.getFullYear()} \n              yearData={generateYearData()} \n              allUsers={viewMode === 'team' ? allUsers : (user ? [user] : [])}\n              viewMode={viewMode}\n              getUserName={getUserName}\n            />\n          )}\n        </div>\n\n        {/* Legend */}\n        <div className=\"bg-white rounded-xl p-4 mt-4 shadow-sm\">\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Legende</h3>\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-2\" />\n              <span className=\"text-sm text-gray-600\">Urlaub</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\" />\n              <span className=\"text-sm text-gray-600\">Krankheit</span>\n            </div>\n            {viewMode === 'personal' && (\n              <>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\" />\n                  <span className=\"text-sm text-gray-600\">Vollzeit (≥8h)</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-2\" />\n                  <span className=\"text-sm text-gray-600\">Teilzeit (6-8h)</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\" />\n                  <span className=\"text-sm text-gray-600\">Unterzeit (&lt;6h)</span>\n                </div>\n              </>\n            )}\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-orange-500 rounded-full mr-2\" />\n              <span className=\"text-sm text-gray-600\">Erinnerung</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Day Detail Modal */}\n      {showEventModal && selectedDay && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-xl p-6 max-w-md w-full max-h-96 overflow-y-auto\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">\n                {selectedDay.date.toLocaleDateString('de-DE', { \n                  weekday: 'long',\n                  day: 'numeric',\n                  month: 'long',\n                  year: 'numeric'\n                })}\n              </h3>\n              <button\n                onClick={() => setShowEventModal(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {/* User's events */}\n              {selectedDay.userLeaves.map(leave => (\n                <div key={leave.id} className=\"p-3 bg-blue-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-2xl mr-3\">\n                      {leave.type === 'VACATION' ? '🏖️' : '🏥'}\n                    </span>\n                    <div>\n                      <p className=\"font-medium\">\n                        {leave.type === 'VACATION' ? 'Urlaub' : 'Krankheit'}\n                      </p>\n                      {leave.comment && (\n                        <p className=\"text-sm text-gray-600\">{leave.comment}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {/* User's time record */}\n              {selectedDay.userTimeRecord && (\n                <div className=\"p-3 bg-green-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-2xl mr-3\">⏰</span>\n                    <div>\n                      <p className=\"font-medium\">\n                        {selectedDay.userTimeRecord.totalHours.toFixed(1)}h gearbeitet\n                      </p>\n                      <p className=\"text-sm text-gray-600\">\n                        {selectedDay.userTimeRecord.timeIn} - {selectedDay.userTimeRecord.timeOut || 'läuft'}\n                        {selectedDay.userTimeRecord.breakMinutes > 0 && (\n                          <span> (Pause: {selectedDay.userTimeRecord.breakMinutes}min)</span>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {/* Team events (if team view) */}\n              {viewMode === 'team' && selectedDay.leaves.map(leave => (\n                <div key={leave.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-2xl mr-3\">\n                      {leave.type === 'VACATION' ? '🏖️' : '🏥'}\n                    </span>\n                    <div>\n                      <p className=\"font-medium\">\n                        {getUserName(leave.userId)} - {leave.type === 'VACATION' ? 'Urlaub' : 'Krank'}\n                      </p>\n                      {leave.comment && (\n                        <p className=\"text-sm text-gray-600\">{leave.comment}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {/* No events */}\n              {selectedDay.userLeaves.length === 0 && \n               !selectedDay.userTimeRecord && \n               selectedDay.leaves.length === 0 && (\n                <p className=\"text-gray-500 text-center py-4\">\n                  Keine Ereignisse an diesem Tag\n                </p>\n              )}\n            </div>\n            \n            {/* Quick Actions */}\n            <div className=\"mt-6 flex space-x-3\">\n              <button\n                onClick={() => {\n                  setShowEventModal(false);\n                  navigate('/request-leave');\n                }}\n                className=\"flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                Urlaub beantragen\n              </button>\n              <button\n                onClick={() => {\n                  setShowEventModal(false);\n                  navigate('/time');\n                }}\n                className=\"flex-1 bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Zeiten erfassen\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/CoinHistoryScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/CreateTrainingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/DashboardScreen.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3794,3839],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useLeavesStore } from '../state/leaves';\nimport { useTimeRecordsStore } from '../state/timeRecords';\nimport { useCoinsStore } from '../state/coins';\nimport { useCoinEventsStore } from '../state/coinEvents';\nimport { cn } from '../utils/cn';\n\n/**\n * Main dashboard screen showing personalized information\n * Different views for employees and admins\n */\nexport const DashboardScreen = () => {\n  const navigate = useNavigate();\n  const { user, organization, logout, updateUser, getAllUsers } = useAuthStore();\n  const { getAllLeaveRequests } = useLeavesStore();\n  const { getTimeRecords, getMonthlyStats, getWeeklyStats } = useTimeRecordsStore();\n  const { getUserBalance } = useCoinsStore();\n  const { getNextEvent, getUnlockedEvents } = useCoinEventsStore();\n\n  const [selectedUserId, setSelectedUserId] = useState(user?.id || '');\n  const [isEditingUser, setIsEditingUser] = useState(false);\n  const [editForm, setEditForm] = useState({\n    position: '',\n    weeklyHours: '',\n    vacationDays: ''\n  });\n\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n  const allUsers = isAdmin ? getAllUsers() : [];\n  const displayUser = isAdmin && selectedUserId !== user.id \n    ? allUsers.find(u => u.id === selectedUserId) || user \n    : user;\n\n  useEffect(() => {\n    if (displayUser) {\n      setEditForm({\n        position: displayUser.position || '',\n        weeklyHours: displayUser.weeklyHours?.toString() || '',\n        vacationDays: displayUser.vacationDays?.toString() || ''\n      });\n    }\n  }, [displayUser]);\n\n  if (!user || !displayUser) return null;\n\n  // Get user's data\n  const userBalance = getUserBalance(displayUser.id);\n  const todayDate = new Date().toISOString().split('T')[0];\n  const todayRecords = getTimeRecords(displayUser.id).filter(record => record.date === todayDate);\n  const todayRecord = todayRecords[0];\n  \n  // Calculate monthly and weekly stats\n  const currentMonth = new Date().getMonth();\n  const currentYear = new Date().getFullYear();\n  const monthlyStats = getMonthlyStats(displayUser.id, currentMonth, currentYear);\n  const weeklyStats = getWeeklyStats(displayUser.id);\n\n  // Calculate vacation usage\n  const approvedVacations = getAllLeaveRequests()\n    .filter(req => \n      req.userId === displayUser.id && \n      req.type === 'VACATION' && \n      req.status === 'APPROVED' &&\n      new Date(req.startDate).getFullYear() === currentYear\n    );\n  \n  const usedVacationDays = approvedVacations.reduce((total, req) => {\n    const start = new Date(req.startDate);\n    const end = new Date(req.endDate);\n    const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    return total + days;\n  }, 0);\n\n  // Calculate working hours based on employment type\n  const expectedMonthlyHours = displayUser.weeklyHours ? (displayUser.weeklyHours * 4.33) : 0; // Average weeks per month\n  const expectedWeeklyHours = displayUser.weeklyHours || 0;\n\n  // Get coin level info\n  const coinBalance = userBalance?.currentBalance || 0;\n  const nextEvent = getNextEvent(coinBalance);\n  const unlockedEvents = getUnlockedEvents(coinBalance);\n  const currentLevel = unlockedEvents.length > 0 ? unlockedEvents[unlockedEvents.length - 1] : null;\n\n  /**\n   * Handles saving user edits (admin only)\n   */\n  const handleSaveUserEdit = async () => {\n    if (!isAdmin || !displayUser) return;\n\n    try {\n      await updateUser(displayUser.id, {\n        position: editForm.position,\n        weeklyHours: parseInt(editForm.weeklyHours) || undefined,\n        vacationDays: parseInt(editForm.vacationDays) || undefined\n      });\n      setIsEditingUser(false);\n    } catch (error) {\n      console.error('Error updating user:', error);\n    }\n  };\n\n  /**\n   * Formats time to German format\n   */\n  const formatTime = (time: string) => {\n    return new Date(`2000-01-01T${time}`).toLocaleTimeString('de-DE', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                {displayUser.id === user.id \n                  ? `Hallo, ${displayUser.firstName || displayUser.name.split(' ')[0]}!`\n                  : `Mitarbeiter: ${displayUser.name}`\n                }\n              </h1>\n              {isAdmin && displayUser.id !== user.id && (\n                <select\n                  value={selectedUserId}\n                  onChange={(e) => setSelectedUserId(e.target.value)}\n                  className=\"mt-2 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value={user.id}>Meine Ansicht</option>\n                  {allUsers.filter(u => u.id !== user.id).map(u => (\n                    <option key={u.id} value={u.id}>{u.name}</option>\n                  ))}\n                </select>\n              )}\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <button \n                onClick={() => navigate('/settings')}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                title=\"Einstellungen\"\n              >\n                ⚙️\n              </button>\n              <button \n                onClick={logout}\n                className=\"px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors\"\n              >\n                <span className=\"text-gray-700\">Abmelden</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Position and Organization */}\n          <div className=\"mt-4 grid md:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-gray-500\">Position</p>\n              {isEditingUser ? (\n                <input\n                  type=\"text\"\n                  value={editForm.position}\n                  onChange={(e) => setEditForm({...editForm, position: e.target.value})}\n                  className=\"mt-1 w-full border border-gray-300 rounded px-2 py-1 text-sm\"\n                />\n              ) : (\n                <p className=\"font-medium\">{displayUser.position || '-'}</p>\n              )}\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Abteilung</p>\n              <p className=\"font-medium\">{displayUser.department || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Organisation</p>\n              <p className=\"font-medium\">{organization?.name}</p>\n            </div>\n          </div>\n\n          {/* Admin Edit Controls */}\n          {isAdmin && displayUser.id !== user.id && (\n            <div className=\"mt-4 flex justify-end\">\n              {isEditingUser ? (\n                <>\n                  <button\n                    onClick={() => setIsEditingUser(false)}\n                    className=\"px-3 py-1 text-sm text-gray-600 hover:text-gray-800\"\n                  >\n                    Abbrechen\n                  </button>\n                  <button\n                    onClick={handleSaveUserEdit}\n                    className=\"ml-2 px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\n                  >\n                    Speichern\n                  </button>\n                </>\n              ) : (\n                <button\n                  onClick={() => setIsEditingUser(true)}\n                  className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\n                >\n                  Bearbeiten\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Main Stats Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          {/* Working Time Today */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Heute</h3>\n              <span className=\"text-2xl\">⏰</span>\n            </div>\n            {todayRecord ? (\n              <>\n                <p className=\"text-2xl font-bold text-gray-900\">{todayRecord.totalHours}h</p>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  {formatTime(todayRecord.timeIn)} - {todayRecord.timeOut ? formatTime(todayRecord.timeOut) : 'läuft'}\n                </p>\n                {!todayRecord.timeOut && (\n                  <span className=\"inline-block mt-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full\">\n                    Gestempelt\n                  </span>\n                )}\n              </>\n            ) : (\n              <>\n                <p className=\"text-2xl font-bold text-gray-400\">-</p>\n                <span className=\"inline-block mt-2 px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\n                  Nicht gestempelt\n                </span>\n              </>\n            )}\n          </div>\n\n          {/* Monthly Hours */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Monat</h3>\n              <span className=\"text-2xl\">📊</span>\n            </div>\n            <p className=\"text-2xl font-bold text-gray-900\">{monthlyStats.totalHours.toFixed(1)}h</p>\n            <div className=\"mt-2\">\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>Soll: {expectedMonthlyHours.toFixed(0)}h</span>\n                <span className={cn(\n                  \"font-medium\",\n                  monthlyStats.totalHours >= expectedMonthlyHours ? \"text-green-600\" : \"text-orange-600\"\n                )}>\n                  {monthlyStats.totalHours >= expectedMonthlyHours ? '+' : ''}{(monthlyStats.totalHours - expectedMonthlyHours).toFixed(1)}h\n                </span>\n              </div>\n              <div className=\"mt-1 w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className={cn(\n                    \"h-2 rounded-full transition-all\",\n                    monthlyStats.totalHours >= expectedMonthlyHours ? \"bg-green-500\" : \"bg-blue-500\"\n                  )}\n                  style={{ width: `${Math.min((monthlyStats.totalHours / expectedMonthlyHours) * 100, 100)}%` }}\n                />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              Woche: {weeklyStats.totalHours.toFixed(1)}h / {expectedWeeklyHours}h\n            </p>\n          </div>\n\n          {/* Vacation */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Urlaub</h3>\n              <span className=\"text-2xl\">🏖️</span>\n            </div>\n            <div>\n              {isEditingUser ? (\n                <div className=\"flex items-center gap-2\">\n                  <input\n                    type=\"number\"\n                    value={editForm.vacationDays}\n                    onChange={(e) => setEditForm({...editForm, vacationDays: e.target.value})}\n                    className=\"w-20 border border-gray-300 rounded px-2 py-1 text-sm\"\n                  />\n                  <span className=\"text-sm text-gray-500\">Tage/Jahr</span>\n                </div>\n              ) : (\n                <>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {(displayUser.vacationDays || 0) - usedVacationDays}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">von {displayUser.vacationDays || 0} Tagen</p>\n                </>\n              )}\n            </div>\n            <div className=\"mt-2 space-y-1\">\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"text-gray-500\">Genommen:</span>\n                <span className=\"font-medium\">{usedVacationDays} Tage</span>\n              </div>\n              {displayUser.employmentType === 'PART_TIME' && (\n                <p className=\"text-xs text-blue-600\">Teilzeit-angepasst</p>\n              )}\n            </div>\n          </div>\n\n          {/* Browo Coins & Level */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Browo Coins</h3>\n              <span className=\"text-2xl\">🪙</span>\n            </div>\n            <p className=\"text-2xl font-bold text-yellow-600\">{coinBalance}</p>\n            {currentLevel && (\n              <p className=\"text-sm text-purple-600 font-medium mt-1\">\n                {currentLevel.title}\n              </p>\n            )}\n            {nextEvent && (\n              <div className=\"mt-3\">\n                <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                  <span>Nächstes Level</span>\n                  <span>{coinBalance}/{nextEvent.requiredCoins}</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-gradient-to-r from-purple-500 to-indigo-500 h-2 rounded-full transition-all\"\n                    style={{ width: `${Math.min((coinBalance / nextEvent.requiredCoins) * 100, 100)}%` }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Employment Details (Admin editable) */}\n        {isAdmin && (\n          <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Beschäftigungsdetails</h2>\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Wochenarbeitszeit</p>\n                {isEditingUser ? (\n                  <div className=\"flex items-center gap-2\">\n                    <input\n                      type=\"number\"\n                      value={editForm.weeklyHours}\n                      onChange={(e) => setEditForm({...editForm, weeklyHours: e.target.value})}\n                      className=\"w-20 border border-gray-300 rounded px-2 py-1 text-sm\"\n                    />\n                    <span className=\"text-sm\">Stunden</span>\n                  </div>\n                ) : (\n                  <p className=\"font-medium\">{displayUser.weeklyHours || '-'}h / Woche</p>\n                )}\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Beschäftigungsart</p>\n                <p className=\"font-medium\">\n                  {displayUser.employmentType === 'FULL_TIME' && 'Vollzeit'}\n                  {displayUser.employmentType === 'PART_TIME' && 'Teilzeit'}\n                  {displayUser.employmentType === 'MINI_JOB' && 'Minijob'}\n                  {!displayUser.employmentType && '-'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Eintrittsdatum</p>\n                <p className=\"font-medium\">\n                  {displayUser.joinDate ? new Date(displayUser.joinDate).toLocaleDateString('de-DE') : '-'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Status</p>\n                <p className=\"font-medium\">\n                  {displayUser.employmentStatus === 'ACTIVE' && '✅ Aktiv'}\n                  {displayUser.employmentStatus === 'PARENTAL_LEAVE' && '👶 Elternzeit'}\n                  {displayUser.employmentStatus === 'TERMINATED' && '❌ Ausgeschieden'}\n                  {!displayUser.employmentStatus && '-'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <button\n            onClick={() => navigate('/time')}\n            className=\"bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow text-left\"\n          >\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-3xl\">⏰</span>\n              <span className=\"text-gray-400\">→</span>\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">Arbeitszeit</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">Stempeln & Übersicht</p>\n          </button>\n\n          <button\n            onClick={() => navigate('/calendar')}\n            className=\"bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow text-left\"\n          >\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-3xl\">📅</span>\n              <span className=\"text-gray-400\">→</span>\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">Kalender</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">Urlaub & Termine</p>\n          </button>\n\n          <button\n            onClick={() => navigate('/benefits')}\n            className=\"bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow text-left\"\n          >\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-3xl\">🎁</span>\n              <span className=\"text-gray-400\">→</span>\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">Benefits</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">Shop & Coins</p>\n          </button>\n\n          <button\n            onClick={() => navigate('/requests')}\n            className=\"bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow text-left\"\n          >\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-3xl\">📝</span>\n              <span className=\"text-gray-400\">→</span>\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">Anträge</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">Urlaub & Krankmeldung</p>\n          </button>\n\n          <button\n            onClick={() => navigate('/documents')}\n            className=\"bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow text-left\"\n          >\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-3xl\">📄</span>\n              <span className=\"text-gray-400\">→</span>\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">Dokumente</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">Lohn & Verträge</p>\n          </button>\n\n          <button\n            onClick={() => navigate('/settings')}\n            className=\"bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow text-left\"\n          >\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-3xl\">⚙️</span>\n              <span className=\"text-gray-400\">→</span>\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">Einstellungen</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">Profil & Daten</p>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/DocumentsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/LearningAdmin.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TestQuestion' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LevelConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":383,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":383,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15694,15735],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { VideoContent, TestQuestion, LevelConfig, TrainingCategory } from '../types/learning';\nimport { useLearningStore } from '../state/learning';\nimport { useAuthStore } from '../state/auth';\nimport { cn } from '../utils/cn';\n\nexport const LearningAdmin = () => {\n  const { user } = useAuthStore();\n  const { videos, loadVideos } = useLearningStore();\n  const [activeTab, setActiveTab] = useState<'videos' | 'tests' | 'levels' | 'analytics'>('videos');\n  const [showCreateVideo, setShowCreateVideo] = useState(false);\n  const [showTestEditor, setShowTestEditor] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState<VideoContent | null>(null);\n\n  useEffect(() => {\n    loadVideos();\n  }, [loadVideos]);\n\n  // Check if user is admin\n  if (!user || (user.role !== 'ADMIN' && user.role !== 'SUPERADMIN')) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Zugriff verweigert</h1>\n          <p className=\"text-gray-600\">Sie haben keine Berechtigung für den Admin-Bereich.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'videos', label: 'Schulungen', icon: '📹', count: videos.length },\n    { id: 'tests', label: 'Tests', icon: '📝', count: 0 },\n    { id: 'levels', label: 'Level', icon: '🏆', count: 10 },\n    { id: 'analytics', label: 'Statistiken', icon: '📊', count: null }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Learning Management</h1>\n              <p className=\"text-gray-600 mt-1\">Verwalten Sie Schulungen, Tests und das Levelsystem</p>\n            </div>\n            <div className=\"flex gap-3\">\n              <button\n                onClick={() => setShowCreateVideo(true)}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-medium flex items-center gap-2\"\n              >\n                <span>➕</span>\n                <span>Neue Schulung</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white border-b\">\n        <div className=\"px-6\">\n          <div className=\"flex space-x-8\">\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={cn(\n                  \"flex items-center gap-2 py-4 px-2 border-b-2 font-medium transition-colors\",\n                  activeTab === tab.id\n                    ? \"border-blue-500 text-blue-600\"\n                    : \"border-transparent text-gray-500 hover:text-gray-700\"\n                )}\n              >\n                <span>{tab.icon}</span>\n                <span>{tab.label}</span>\n                {tab.count !== null && (\n                  <span className=\"bg-gray-100 text-gray-600 px-2 py-1 rounded-full text-xs\">\n                    {tab.count}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-6\">\n        {activeTab === 'videos' && <VideoManagement />}\n        {activeTab === 'tests' && <TestManagement />}\n        {activeTab === 'levels' && <LevelManagement />}\n        {activeTab === 'analytics' && <AnalyticsDashboard />}\n      </div>\n\n      {/* Modals */}\n      {showCreateVideo && (\n        <CreateVideoModal onClose={() => setShowCreateVideo(false)} />\n      )}\n      {showTestEditor && selectedVideo && (\n        <TestEditorModal \n          video={selectedVideo} \n          onClose={() => {\n            setShowTestEditor(false);\n            setSelectedVideo(null);\n          }} \n        />\n      )}\n    </div>\n  );\n};\n\n// Video Management Component\nconst VideoManagement = () => {\n  const { videos } = useLearningStore();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterCategory, setFilterCategory] = useState<string>('all');\n\n  const filteredVideos = videos.filter(video => {\n    const matchesSearch = video.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         video.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = filterCategory === 'all' || video.category === filterCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categoryOptions = [\n    { value: 'all', label: 'Alle Kategorien' },\n    { value: TrainingCategory.MANDATORY, label: 'Pflicht' },\n    { value: TrainingCategory.COMPLIANCE, label: 'Compliance' },\n    { value: TrainingCategory.SKILLS, label: 'Skills' },\n    { value: TrainingCategory.ONBOARDING, label: 'Onboarding' },\n    { value: TrainingCategory.BONUS, label: 'Bonus' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n        <div className=\"flex gap-4\">\n          <div className=\"flex-1\">\n            <input\n              type=\"text\"\n              placeholder=\"Schulungen durchsuchen...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n          <select\n            value={filterCategory}\n            onChange={(e) => setFilterCategory(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            {categoryOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Video List */}\n      <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Schulung\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Kategorie\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Dauer\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Aktionen\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {filteredVideos.map(video => (\n                <tr key={video.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-blue-400 to-purple-600 rounded-lg flex items-center justify-center text-white font-bold mr-4\">\n                        ▶️\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">{video.title}</div>\n                        <div className=\"text-sm text-gray-500 line-clamp-1\">{video.description}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={cn(\n                      \"inline-flex px-2 py-1 text-xs font-semibold rounded-full\",\n                      video.category === TrainingCategory.MANDATORY && \"bg-red-100 text-red-800\",\n                      video.category === TrainingCategory.COMPLIANCE && \"bg-yellow-100 text-yellow-800\",\n                      video.category === TrainingCategory.SKILLS && \"bg-blue-100 text-blue-800\",\n                      video.category === TrainingCategory.ONBOARDING && \"bg-green-100 text-green-800\",\n                      video.category === TrainingCategory.BONUS && \"bg-purple-100 text-purple-800\"\n                    )}>\n                      {video.category}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {Math.floor(video.duration / 60)} Min\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800\">\n                      Aktiv\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex gap-2\">\n                      <button className=\"text-blue-600 hover:text-blue-900\">Bearbeiten</button>\n                      <button className=\"text-green-600 hover:text-green-900\">Test</button>\n                      <button className=\"text-red-600 hover:text-red-900\">Löschen</button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Test Management Component\nconst TestManagement = () => {\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-6\">\n      <div className=\"text-center py-12\">\n        <div className=\"text-6xl mb-4\">📝</div>\n        <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Test-Editor</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Erstellen Sie interaktive Tests mit verschiedenen Fragetypen\n        </p>\n        <button className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 font-medium\">\n          Neuen Test erstellen\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Level Management Component\nconst LevelManagement = () => {\n  const levels = [\n    { level: 1, title: \"Newcomer\", xp: 0, users: 45 },\n    { level: 2, title: \"Beginner\", xp: 50, users: 32 },\n    { level: 3, title: \"Schulungs-Kid\", xp: 150, users: 28 },\n    { level: 4, title: \"Knowledge Seeker\", xp: 300, users: 22 },\n    { level: 5, title: \"Certified Champ\", xp: 500, users: 18 },\n    { level: 6, title: \"Expert Learner\", xp: 750, users: 12 },\n    { level: 7, title: \"Master Student\", xp: 1000, users: 8 },\n    { level: 8, title: \"Team Brain\", xp: 1500, users: 5 },\n    { level: 9, title: \"Wisdom Keeper\", xp: 2000, users: 3 },\n    { level: 10, title: \"Legend\", xp: 3000, users: 1 }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Level-Konfiguration</h3>\n        <div className=\"overflow-hidden\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Level</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Titel</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Benötigte XP</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Benutzer</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Aktionen</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {levels.map(level => (\n                <tr key={level.level} className=\"hover:bg-gray-50\">\n                  <td className=\"px-4 py-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center text-sm font-bold mr-3\">\n                        {level.level}\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-4 font-medium text-gray-900\">{level.title}</td>\n                  <td className=\"px-4 py-4 text-gray-600\">{level.xp.toLocaleString()} XP</td>\n                  <td className=\"px-4 py-4\">\n                    <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm\">\n                      {level.users} Benutzer\n                    </span>\n                  </td>\n                  <td className=\"px-4 py-4\">\n                    <button className=\"text-blue-600 hover:text-blue-900 text-sm\">Bearbeiten</button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Analytics Dashboard Component\nconst AnalyticsDashboard = () => {\n  const stats = [\n    { label: 'Aktive Lernende', value: '174', change: '+12%', positive: true },\n    { label: 'Abgeschlossene Schulungen', value: '2,847', change: '+23%', positive: true },\n    { label: 'Durchschnittliche Punktzahl', value: '87%', change: '+5%', positive: true },\n    { label: 'Gesamte Lernzeit', value: '1,245h', change: '+18%', positive: true }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => (\n          <div key={index} className=\"bg-white rounded-lg shadow-sm p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">{stat.label}</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{stat.value}</p>\n              </div>\n              <div className={cn(\n                \"text-sm font-medium\",\n                stat.positive ? \"text-green-600\" : \"text-red-600\"\n              )}>\n                {stat.change}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Charts Placeholder */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Lernaktivität</h3>\n          <div className=\"h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\n            <p className=\"text-gray-500\">Chart Placeholder</p>\n          </div>\n        </div>\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Kategorien-Performance</h3>\n          <div className=\"h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\n            <p className=\"text-gray-500\">Chart Placeholder</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Create Video Modal\ninterface CreateVideoModalProps {\n  onClose: () => void;\n}\n\nconst CreateVideoModal: React.FC<CreateVideoModalProps> = ({ onClose }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    url: '',\n    duration: 0,\n    category: TrainingCategory.SKILLS\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement video creation\n    console.log('Creating video:', formData);\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Neue Schulung erstellen</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              ✕\n            </button>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Titel *\n              </label>\n              <input\n                type=\"text\"\n                required\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"z.B. Datenschutz Grundlagen\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Beschreibung *\n              </label>\n              <textarea\n                required\n                rows={3}\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Kurze Beschreibung der Schulung...\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Video-URL *\n              </label>\n              <input\n                type=\"url\"\n                required\n                value={formData.url}\n                onChange={(e) => setFormData({ ...formData, url: e.target.value })}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"https://www.youtube.com/watch?v=...\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Kategorie *\n              </label>\n              <select\n                required\n                value={formData.category}\n                onChange={(e) => setFormData({ ...formData, category: e.target.value as TrainingCategory })}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value={TrainingCategory.SKILLS}>Skills</option>\n                <option value={TrainingCategory.MANDATORY}>Pflicht</option>\n                <option value={TrainingCategory.COMPLIANCE}>Compliance</option>\n                <option value={TrainingCategory.ONBOARDING}>Onboarding</option>\n                <option value={TrainingCategory.BONUS}>Bonus</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Dauer (Minuten) *\n              </label>\n              <input\n                type=\"number\"\n                required\n                min=\"1\"\n                value={formData.duration}\n                onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) * 60 })}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"z.B. 15\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-6\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                Abbrechen\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n              >\n                Schulung erstellen\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Test Editor Modal (placeholder)\ninterface TestEditorModalProps {\n  video: VideoContent;\n  onClose: () => void;\n}\n\nconst TestEditorModal: React.FC<TestEditorModalProps> = ({ video, onClose }) => {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Test-Editor: {video.title}</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              ✕\n            </button>\n          </div>\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-600\">Test-Editor wird hier implementiert...</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/LearningDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5907,5910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5907,5910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useLearningStore } from '../state/learning';\nimport { useAuthStore } from '../state/auth';\nimport { cn } from '../utils/cn';\nimport { TrainingCategory } from '../types/learning';\n\nexport const LearningDashboard = () => {\n  const { user } = useAuthStore();\n  const { \n    videos, \n    userLevel, \n    userCoins, \n    userBadges, \n    userProgress,\n    loadVideos,\n    selectVideo,\n    getUserStatistics\n  } = useLearningStore();\n\n  const [selectedCategory, setSelectedCategory] = useState<TrainingCategory | 'all'>('all');\n  const [showProfile, setShowProfile] = useState(false);\n\n  useEffect(() => {\n    loadVideos();\n  }, [loadVideos]);\n\n  const stats = user ? getUserStatistics(user.id) : null;\n\n  const filteredVideos = selectedCategory === 'all' \n    ? videos \n    : videos.filter(v => v.category === selectedCategory);\n\n  const categories = [\n    { id: 'all', label: 'Alle', icon: '📚' },\n    { id: TrainingCategory.MANDATORY, label: 'Pflicht', icon: '⚠️' },\n    { id: TrainingCategory.COMPLIANCE, label: 'Compliance', icon: '⚖️' },\n    { id: TrainingCategory.SKILLS, label: 'Skills', icon: '💡' },\n    { id: TrainingCategory.ONBOARDING, label: 'Onboarding', icon: '👋' },\n    { id: TrainingCategory.BONUS, label: 'Bonus', icon: '🎁' }\n  ];\n\n  const getProgressPercentage = (videoId: string) => {\n    const progress = userProgress[videoId];\n    const video = videos.find(v => v.id === videoId);\n    \n    if (!progress || !video) return 0;\n    return Math.min(100, (progress.watchedSeconds / video.duration) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      {/* Header with Stats */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Lernzentrum</h1>\n            <p className=\"text-gray-600 mt-1\">Erweitere dein Wissen und sammle Belohnungen!</p>\n          </div>\n          \n          <button\n            onClick={() => setShowProfile(!showProfile)}\n            className=\"relative group\"\n          >\n            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-2xl shadow-lg transform transition-transform group-hover:scale-110\">\n              {user?.name.charAt(0)}\n            </div>\n            <div className=\"absolute -bottom-1 -right-1 bg-yellow-400 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold\">\n              {userLevel?.level}\n            </div>\n          </button>\n        </div>\n\n        {/* Stats Bar */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-600 text-sm font-medium\">Level</p>\n                <p className=\"text-2xl font-bold text-purple-900\">{userLevel?.level}</p>\n                <p className=\"text-xs text-purple-700\">{userLevel?.title}</p>\n              </div>\n              <span className=\"text-3xl\">🏆</span>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-yellow-600 text-sm font-medium\">Münzen</p>\n                <p className=\"text-2xl font-bold text-yellow-900\">{userCoins}</p>\n                <p className=\"text-xs text-yellow-700\">BrowoCoins</p>\n              </div>\n              <span className=\"text-3xl\">🪙</span>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-600 text-sm font-medium\">XP</p>\n                <p className=\"text-2xl font-bold text-green-900\">{userLevel?.xp || 0}</p>\n                <p className=\"text-xs text-green-700\">/ {userLevel?.nextLevelXp}</p>\n              </div>\n              <span className=\"text-3xl\">⭐</span>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-600 text-sm font-medium\">Abzeichen</p>\n                <p className=\"text-2xl font-bold text-blue-900\">{userBadges.length}</p>\n                <p className=\"text-xs text-blue-700\">Errungen</p>\n              </div>\n              <span className=\"text-3xl\">🏅</span>\n            </div>\n          </div>\n        </div>\n\n        {/* XP Progress Bar */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between text-sm text-gray-600 mb-1\">\n            <span>Level {userLevel?.level}</span>\n            <span>{userLevel?.xp} / {userLevel?.nextLevelXp} XP</span>\n            <span>Level {(userLevel?.level || 0) + 1}</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n            <div\n              className=\"h-full bg-gradient-to-r from-purple-500 to-blue-500 transition-all duration-500 ease-out\"\n              style={{\n                width: `${((userLevel?.xp || 0) / (userLevel?.nextLevelXp || 1)) * 100}%`\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Category Filter */}\n      <div className=\"bg-white rounded-xl shadow-sm p-4 mb-6\">\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {categories.map(category => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id as any)}\n              className={cn(\n                \"flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap\",\n                selectedCategory === category.id\n                  ? \"bg-blue-600 text-white shadow-lg transform scale-105\"\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n              )}\n            >\n              <span>{category.icon}</span>\n              <span>{category.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Video Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredVideos.map(video => {\n          const progress = getProgressPercentage(video.id);\n          const isCompleted = userProgress[video.id]?.completed;\n\n          return (\n            <div\n              key={video.id}\n              className=\"bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-lg transition-shadow cursor-pointer transform hover:scale-[1.02] transition-transform\"\n              onClick={() => {\n                selectVideo(video.id);\n                // Navigate to video player\n                window.location.href = `/learning/video/${video.id}`;\n              }}\n            >\n              {/* Video Thumbnail */}\n              <div className=\"relative h-48 bg-gradient-to-br from-blue-400 to-purple-600\">\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-6xl text-white opacity-50\">▶️</span>\n                </div>\n                {isCompleted && (\n                  <div className=\"absolute top-2 right-2 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-bold flex items-center gap-1\">\n                    <span>✓</span>\n                    <span>Abgeschlossen</span>\n                  </div>\n                )}\n                {video.category === TrainingCategory.MANDATORY && (\n                  <div className=\"absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold\">\n                    Pflicht\n                  </div>\n                )}\n              </div>\n\n              {/* Video Info */}\n              <div className=\"p-4\">\n                <h3 className=\"font-bold text-lg text-gray-900 mb-2\">{video.title}</h3>\n                <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">{video.description}</p>\n                \n                <div className=\"flex items-center justify-between text-sm text-gray-500 mb-3\">\n                  <span className=\"flex items-center gap-1\">\n                    <span>⏱️</span>\n                    <span>{Math.floor(video.duration / 60)} Min</span>\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <span>🎯</span>\n                    <span>+50 XP</span>\n                  </span>\n                </div>\n\n                {/* Progress Bar */}\n                {progress > 0 && (\n                  <div className=\"space-y-1\">\n                    <div className=\"flex justify-between text-xs text-gray-600\">\n                      <span>Fortschritt</span>\n                      <span>{Math.floor(progress)}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n                      <div\n                        className={cn(\n                          \"h-full transition-all duration-300\",\n                          isCompleted ? \"bg-green-500\" : \"bg-blue-500\"\n                        )}\n                        style={{ width: `${progress}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Profile Modal */}\n      {showProfile && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-2xl p-6 max-w-md w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">Mein Profil</h2>\n              <button\n                onClick={() => setShowProfile(false)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                ✕\n              </button>\n            </div>\n\n            {/* Avatar Section */}\n            <div className=\"text-center mb-6\">\n              <div className=\"w-32 h-32 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-4xl mx-auto mb-4\">\n                {user?.name.charAt(0)}\n              </div>\n              <h3 className=\"text-xl font-bold\">{user?.name}</h3>\n              <p className=\"text-purple-600 font-medium\">{userLevel?.title}</p>\n            </div>\n\n            {/* Stats */}\n            <div className=\"space-y-3 mb-6\">\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Abgeschlossene Schulungen</span>\n                <span className=\"font-bold\">{stats?.completedTrainings || 0}</span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Durchschnittliche Punktzahl</span>\n                <span className=\"font-bold\">{Math.round(stats?.averageScore || 0)}%</span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Perfekte Ergebnisse</span>\n                <span className=\"font-bold\">{stats?.perfectScores || 0}</span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Gesamte Lernzeit</span>\n                <span className=\"font-bold\">{Math.floor((stats?.totalWatchTime || 0) / 3600)}h</span>\n              </div>\n            </div>\n\n            {/* Badges */}\n            <div>\n              <h4 className=\"font-bold text-lg mb-3\">Meine Abzeichen</h4>\n              <div className=\"grid grid-cols-3 gap-3\">\n                {userBadges.map(badge => (\n                  <div\n                    key={badge.id}\n                    className=\"text-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n                  >\n                    <div className=\"text-3xl mb-1\">{badge.icon}</div>\n                    <p className=\"text-xs font-medium\">{badge.name}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/LearningShop.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2515,2518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2515,2518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'events' is defined but never used. Allowed unused args must match /^_/u.","line":260,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":260,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userCoins' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":261,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ownedItems' is defined but never used. Allowed unused args must match /^_/u.","line":361,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":361,"endColumn":64}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useLearningStore } from '../state/learning';\nimport { useAuthStore } from '../state/auth';\nimport { ShopItem, LearningEvent } from '../types/learning';\nimport { LootboxAnimation, CelebrationOverlay } from '../components/LootboxAnimation';\nimport { cn } from '../utils/cn';\n\nexport const LearningShop = () => {\n  const { user } = useAuthStore();\n  const { \n    userCoins, \n    shopItems, \n    ownedItems, \n    activeEvents,\n    purchaseItem \n  } = useLearningStore();\n\n  const [activeTab, setActiveTab] = useState<'shop' | 'events' | 'inventory'>('shop');\n  const [showPurchaseAnimation, setShowPurchaseAnimation] = useState(false);\n  const [lastPurchase, setLastPurchase] = useState<ShopItem | null>(null);\n  const [showCelebration, setShowCelebration] = useState(false);\n\n  const handlePurchase = (item: ShopItem) => {\n    if (userCoins >= item.price) {\n      const success = purchaseItem(item.id);\n      if (success) {\n        setLastPurchase(item);\n        setShowPurchaseAnimation(true);\n      }\n    }\n  };\n\n  const tabs = [\n    { id: 'shop', label: 'Shop', icon: '🛒' },\n    { id: 'events', label: 'Events', icon: '🎉' },\n    { id: 'inventory', label: 'Inventar', icon: '🎒' }\n  ];\n\n  const featuredItems = shopItems.filter(item => item.limitedTime);\n  const regularItems = shopItems.filter(item => !item.limitedTime);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-2xl p-6 mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">BrowoShop</h1>\n            <p className=\"text-purple-100\">Tausche deine Münzen gegen tolle Belohnungen!</p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"bg-white bg-opacity-20 rounded-xl p-4\">\n              <p className=\"text-sm opacity-90\">Deine Münzen</p>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-3xl\">🪙</span>\n                <span className=\"text-3xl font-bold\">{userCoins.toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"bg-white rounded-xl shadow-sm mb-6\">\n        <div className=\"flex\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={cn(\n                \"flex-1 flex items-center justify-center gap-2 py-4 font-medium transition-colors rounded-xl\",\n                activeTab === tab.id\n                  ? \"bg-blue-50 text-blue-600\"\n                  : \"text-gray-600 hover:text-gray-900\"\n              )}\n            >\n              <span className=\"text-xl\">{tab.icon}</span>\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      {activeTab === 'shop' && (\n        <div className=\"space-y-8\">\n          {/* Featured Items */}\n          {featuredItems.length > 0 && (\n            <div>\n              <div className=\"flex items-center gap-2 mb-4\">\n                <span className=\"text-2xl\">⭐</span>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Limitierte Angebote</h2>\n                <span className=\"bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm font-medium\">\n                  Nur für kurze Zeit!\n                </span>\n              </div>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {featuredItems.map(item => (\n                  <ShopItemCard\n                    key={item.id}\n                    item={item}\n                    userCoins={userCoins}\n                    isOwned={ownedItems.includes(item.id)}\n                    onPurchase={() => handlePurchase(item)}\n                    featured\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Regular Items */}\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Alle Items</h2>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {regularItems.map(item => (\n                <ShopItemCard\n                  key={item.id}\n                  item={item}\n                  userCoins={userCoins}\n                  isOwned={ownedItems.includes(item.id)}\n                  onPurchase={() => handlePurchase(item)}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'events' && <EventsTab events={activeEvents} />}\n      {activeTab === 'inventory' && <InventoryTab ownedItems={ownedItems} />}\n\n      {/* Purchase Animation */}\n      {showPurchaseAnimation && lastPurchase && (\n        <LootboxAnimation\n          reward={{\n            type: 'coins',\n            value: lastPurchase.name,\n            description: lastPurchase.description,\n            icon: '🎁'\n          }}\n          onComplete={() => {\n            setShowPurchaseAnimation(false);\n            setShowCelebration(true);\n          }}\n          autoStart\n        />\n      )}\n\n      {/* Celebration */}\n      {showCelebration && (\n        <CelebrationOverlay\n          message=\"Item erhalten!\"\n          icon=\"🎉\"\n          color=\"from-green-400 to-blue-500\"\n          onComplete={() => setShowCelebration(false)}\n        />\n      )}\n    </div>\n  );\n};\n\n// Shop Item Card Component\ninterface ShopItemCardProps {\n  item: ShopItem;\n  userCoins: number;\n  isOwned: boolean;\n  onPurchase: () => void;\n  featured?: boolean;\n}\n\nconst ShopItemCard: React.FC<ShopItemCardProps> = ({\n  item,\n  userCoins,\n  isOwned,\n  onPurchase,\n  featured = false\n}) => {\n  const canAfford = userCoins >= item.price;\n  const isExpiringSoon = item.expiresAt && \n    new Date(item.expiresAt).getTime() - Date.now() < 24 * 60 * 60 * 1000; // 24 hours\n\n  return (\n    <div className={cn(\n      \"bg-white rounded-xl shadow-sm overflow-hidden transition-all hover:shadow-lg\",\n      featured && \"ring-2 ring-yellow-400 relative\",\n      !item.available && \"opacity-50\"\n    )}>\n      {featured && (\n        <div className=\"absolute top-2 right-2 bg-yellow-400 text-yellow-900 px-2 py-1 rounded-full text-xs font-bold\">\n          ⭐ Featured\n        </div>\n      )}\n\n      {/* Item Image */}\n      <div className=\"aspect-square bg-gradient-to-br from-blue-100 to-purple-100 p-6 flex items-center justify-center\">\n        {item.imageUrl ? (\n          <img src={item.imageUrl} alt={item.name} className=\"w-full h-full object-contain\" />\n        ) : (\n          <div className=\"text-6xl\">\n            {item.type === 'boost' && '⚡'}\n            {item.type === 'avatar-item' && '👕'}\n            {item.type === 'special' && '🎁'}\n          </div>\n        )}\n      </div>\n\n      {/* Item Info */}\n      <div className=\"p-4\">\n        <h3 className=\"font-bold text-lg text-gray-900 mb-1\">{item.name}</h3>\n        <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">{item.description}</p>\n\n        {/* Expiration Warning */}\n        {isExpiringSoon && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-2 mb-3\">\n            <p className=\"text-red-800 text-xs font-medium\">\n              ⏰ Läuft bald ab!\n            </p>\n          </div>\n        )}\n\n        {/* Price & Purchase */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-1\">\n            <span className=\"text-xl\">🪙</span>\n            <span className=\"font-bold text-lg text-gray-900\">\n              {item.price.toLocaleString()}\n            </span>\n          </div>\n\n          {isOwned ? (\n            <div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium\">\n              ✓ Besessen\n            </div>\n          ) : (\n            <button\n              onClick={onPurchase}\n              disabled={!canAfford || !item.available}\n              className={cn(\n                \"px-4 py-2 rounded-lg font-medium transition-colors\",\n                canAfford && item.available\n                  ? \"bg-blue-600 text-white hover:bg-blue-700\"\n                  : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n              )}\n            >\n              {!canAfford ? \"Zu teuer\" : \"Kaufen\"}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Events Tab Component\ninterface EventsTabProps {\n  events: LearningEvent[];\n}\n\nconst EventsTab: React.FC<EventsTabProps> = ({ events }) => {\n  const { userCoins } = useLearningStore();\n\n  // Mock current event\n  const currentEvent: LearningEvent = {\n    id: 'event1',\n    name: 'Sommer Learning Sprint',\n    description: 'Sammle 2500 Münzen in diesem Monat und erhalte exklusive Belohnungen!',\n    startDate: new Date(2024, 5, 1),\n    endDate: new Date(2024, 5, 30),\n    targetCoins: 2500,\n    rewards: [\n      { type: 'badge', value: 'summer-champion', description: 'Sommer Champion Badge', icon: '🏆' },\n      { type: 'avatar-item', value: 'summer-hat', description: 'Sommer Hut', icon: '🏖️' },\n      { type: 'coins', value: 500, description: 'Bonus Münzen', icon: '🪙' }\n    ],\n    participants: [\n      { userId: 'user1', progress: 1850, claimed: false }\n    ]\n  };\n\n  const userProgress = currentEvent.participants.find(p => p.userId === 'user1')?.progress || 0;\n  const progressPercentage = Math.min(100, (userProgress / currentEvent.targetCoins) * 100);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Current Event */}\n      <div className=\"bg-gradient-to-r from-orange-400 to-red-500 text-white rounded-2xl p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">{currentEvent.name}</h2>\n            <p className=\"text-orange-100\">{currentEvent.description}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm opacity-90\">Endet in</p>\n            <p className=\"text-xl font-bold\">12 Tagen</p>\n          </div>\n        </div>\n\n        {/* Progress */}\n        <div className=\"bg-white bg-opacity-20 rounded-xl p-4 mb-4\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span>Fortschritt</span>\n            <span className=\"font-bold\">\n              {userProgress.toLocaleString()} / {currentEvent.targetCoins.toLocaleString()} 🪙\n            </span>\n          </div>\n          <div className=\"w-full bg-white bg-opacity-30 rounded-full h-3 overflow-hidden\">\n            <div\n              className=\"h-full bg-white transition-all duration-500\"\n              style={{ width: `${progressPercentage}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Rewards */}\n        <div>\n          <h4 className=\"font-bold mb-3\">Belohnungen</h4>\n          <div className=\"grid grid-cols-3 gap-3\">\n            {currentEvent.rewards.map((reward, index) => (\n              <div\n                key={index}\n                className=\"bg-white bg-opacity-20 rounded-lg p-3 text-center\"\n              >\n                <div className=\"text-2xl mb-1\">{reward.icon}</div>\n                <p className=\"text-xs font-medium\">{reward.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Past Events */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6\">\n        <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Vergangene Events</h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div>\n              <h4 className=\"font-medium text-gray-900\">Frühlings-Challenge</h4>\n              <p className=\"text-sm text-gray-600\">Abgeschlossen am 31. Mai 2024</p>\n            </div>\n            <div className=\"text-green-600 font-medium\">✓ Teilgenommen</div>\n          </div>\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div>\n              <h4 className=\"font-medium text-gray-900\">Wissens-Marathon</h4>\n              <p className=\"text-sm text-gray-600\">Abgeschlossen am 30. April 2024</p>\n            </div>\n            <div className=\"text-green-600 font-medium\">🏆 Gewinner</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Inventory Tab Component\ninterface InventoryTabProps {\n  ownedItems: string[];\n}\n\nconst InventoryTab: React.FC<InventoryTabProps> = ({ ownedItems }) => {\n  // Mock inventory items\n  const inventoryItems = [\n    {\n      id: 'xp-boost-24h',\n      name: 'XP Boost (24h)',\n      description: 'Verdoppelt XP für 24 Stunden',\n      type: 'boost',\n      icon: '⚡',\n      quantity: 2,\n      active: false\n    },\n    {\n      id: 'legendary-box',\n      name: 'Legendäre Lootbox',\n      description: 'Enthält seltene Items',\n      type: 'special',\n      icon: '📦',\n      quantity: 1,\n      active: false\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-xl shadow-sm\">\n        <div className=\"p-6 border-b\">\n          <h3 className=\"text-lg font-bold text-gray-900\">Mein Inventar</h3>\n          <p className=\"text-gray-600\">Verwende deine Items oder verwalte dein Inventar</p>\n        </div>\n\n        <div className=\"p-6\">\n          {inventoryItems.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {inventoryItems.map(item => (\n                <div\n                  key={item.id}\n                  className=\"border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors\"\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"text-3xl\">{item.icon}</div>\n                    <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium\">\n                      {item.quantity}x\n                    </span>\n                  </div>\n                  <h4 className=\"font-medium text-gray-900 mb-1\">{item.name}</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">{item.description}</p>\n                  \n                  <button\n                    className={cn(\n                      \"w-full py-2 px-4 rounded-lg font-medium transition-colors\",\n                      item.active\n                        ? \"bg-green-100 text-green-800 cursor-not-allowed\"\n                        : \"bg-blue-600 text-white hover:bg-blue-700\"\n                    )}\n                    disabled={item.active}\n                  >\n                    {item.active ? 'Aktiv' : 'Verwenden'}\n                  </button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"text-6xl mb-4\">🎒</div>\n              <h4 className=\"text-xl font-bold text-gray-900 mb-2\">Inventar ist leer</h4>\n              <p className=\"text-gray-600 mb-6\">\n                Kaufe Items im Shop, um sie hier zu sehen\n              </p>\n              <button className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 font-medium\">\n                Zum Shop\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/LevelManagementScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ',' expected.","line":215,"column":29,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAvatarStore } from '../state/avatar';\nimport { cn } from '../utils/cn';\nimport { calculateXPForLevel, calculateLevelFromXP } from '../types/avatar';\n\ninterface LevelTierProps {\n  level: number;\n  requiredXP: number;\n  userCount: number;\n  isEditing: boolean;\n  onEdit: () => void;\n  onSave: (_newXP: number) => void;\n  onCancel: () => void;\n}\n\nconst LevelTier: React.FC<LevelTierProps> = ({\n  level,\n  requiredXP,\n  userCount,\n  isEditing,\n  onEdit,\n  onSave,\n  onCancel\n}) => {\n  const [editValue, setEditValue] = useState(requiredXP.toString());\n\n  const handleSave = () => {\n    const newXP = parseInt(editValue);\n    if (newXP > 0) {\n      onSave(newXP);\n    }\n  };\n\n  const getLevelBadgeColor = (level: number) => {\n    if (level >= 50) return 'from-purple-400 to-pink-500';\n    if (level >= 30) return 'from-yellow-400 to-orange-500';\n    if (level >= 20) return 'from-blue-400 to-indigo-500';\n    if (level >= 10) return 'from-green-400 to-emerald-500';\n    return 'from-gray-400 to-gray-500';\n  };\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className={cn(\n            \"w-12 h-12 rounded-full flex items-center justify-center text-white font-bold bg-gradient-to-r\",\n            getLevelBadgeColor(level)\n          )}>\n            {level}\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-gray-900\">Level {level}</h3>\n            <p className=\"text-sm text-gray-600\">{userCount} Benutzer</p>\n          </div>\n        </div>\n        \n        {!isEditing && (\n          <button\n            onClick={onEdit}\n            className=\"text-blue-600 hover:text-blue-800 text-sm\"\n          >\n            Bearbeiten\n          </button>\n        )}\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-gray-600\">Benötigte XP:</span>\n          {isEditing ? (\n            <div className=\"flex items-center gap-2\">\n              <input\n                type=\"number\"\n                value={editValue}\n                onChange={(e) => setEditValue(e.target.value)}\n                className=\"w-24 text-sm border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                min=\"1\"\n              />\n              <button\n                onClick={handleSave}\n                className=\"text-green-600 hover:text-green-800 text-sm\"\n              >\n                ✓\n              </button>\n              <button\n                onClick={onCancel}\n                className=\"text-red-600 hover:text-red-800 text-sm\"\n              >\n                ✕\n              </button>\n            </div>\n          ) : (\n            <span className=\"font-semibold text-gray-900\">\n              {requiredXP.toLocaleString()} XP\n            </span>\n          )}\n        </div>\n        \n        {level > 1 && (\n          <div className=\"flex justify-between items-center text-sm text-gray-500\">\n            <span>Differenz zu Level {level - 1}:</span>\n            <span>+{(requiredXP - calculateXPForLevel(level - 1)).toLocaleString()} XP</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface CreateLevelModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCreate: (level: number, requiredXP: number) => void;\n  maxLevel: number;\n}\n\nconst CreateLevelModal: React.FC<CreateLevelModalProps> = ({\n  isOpen,\n  onClose,\n  onCreate,\n  maxLevel\n}) => {\n  const [level, setLevel] = useState((maxLevel + 1).toString());\n  const [requiredXP, setRequiredXP] = useState('');\n\n  if (!isOpen) return null;\n\n  const handleCreate = () => {\n    const levelNum = parseInt(level);\n    const xpNum = parseInt(requiredXP);\n    \n    if (levelNum > 0 && xpNum > 0) {\n      onCreate(levelNum, xpNum);\n      setLevel((maxLevel + 2).toString());\n      setRequiredXP('');\n      onClose();\n    }\n  };\n\n  // Calculate suggested XP based on progression\n  const suggestedXP = maxLevel > 0 ? Math.floor(calculateXPForLevel(maxLevel) * 1.15) : 100;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl p-6 max-w-md w-full\">\n        <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Neues Level erstellen</h2>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Level\n            </label>\n            <input\n              type=\"number\"\n              value={level}\n              onChange={(e) => setLevel(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              min={maxLevel + 1}\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Benötigte XP\n            </label>\n            <input\n              type=\"number\"\n              value={requiredXP}\n              onChange={(e) => setRequiredXP(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder={`Vorschlag: ${suggestedXP.toLocaleString()}`}\n              min=\"1\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Vorschlag basierend auf 15% Steigerung: {suggestedXP.toLocaleString()} XP\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-3 mt-6\">\n          <button\n            onClick={handleCreate}\n            disabled={!level || !requiredXP}\n            className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n          >\n            Level erstellen\n          </button>\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n          >\n            Abbrechen\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Level Management Screen\n * Create and edit level progression system\n */\nexport const LevelManagementScreen: React.FC = () => {\n  const { _getAllUserAvatars } = useAvatarStore();\n  const [editingLevel, setEditingLevel] = useState<number | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const allUserAvatars = getAllUserAvatars();\n\n  // Generate level data based on current system\n  const maxLevel = Math.max(...allUserAvatars.map(avatar => avatar.level), 50);\n  const levels = Array.from(_{ length: maxLevel }, (_, i) => {\n    const level = i + 1;\n    const requiredXP = calculateXPForLevel(level);\n    const userCount = allUserAvatars.filter(avatar => avatar.level === level).length;\n    \n    return {\n      level,\n      requiredXP,\n      userCount\n    };\n  });\n\n  const filteredLevels = levels.filter(level => \n    level.level.toString().includes(searchTerm) ||\n    level.requiredXP.toString().includes(searchTerm)\n  );\n\n  const handleEditLevel = (level: number) => {\n    setEditingLevel(level);\n  };\n\n  const handleSaveLevel = (level: number, _newXP: number) => {\n    // This would update the level system configuration\n    console.log(`Updating level ${level} to require ${newXP} XP`);\n    setEditingLevel(null);\n  };\n\n  const handleCancelEdit = () => {\n    setEditingLevel(null);\n  };\n\n  const handleCreateLevel = (level: number, requiredXP: number) => {\n    console.log(`Creating level ${level} with ${requiredXP} XP requirement`);\n    // This would update the level system\n  };\n\n  // Statistics\n  const totalUsers = allUserAvatars.length;\n  const averageLevel = totalUsers > 0 \n    ? allUserAvatars.reduce((sum, avatar) => sum + avatar.level, 0) / totalUsers \n    : 0;\n  const highestLevel = Math.max(...allUserAvatars.map(avatar => avatar.level), 1);\n  const totalXP = allUserAvatars.reduce((sum, avatar) => sum + avatar.totalXP, 0);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            📊 Level Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Verwalte das Level-System und XP-Anforderungen\n          </p>\n        </div>\n\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-blue-600 mb-2\">{totalUsers}</div>\n            <div className=\"text-sm text-gray-600\">Aktive Benutzer</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-green-600 mb-2\">\n              {averageLevel.toFixed(1)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Durchschnittslevel</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-purple-600 mb-2\">{highestLevel}</div>\n            <div className=\"text-sm text-gray-600\">Höchstes Level</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <div className=\"text-2xl font-bold text-orange-600 mb-2\">\n              {totalXP.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-gray-600\">Gesamt XP</div>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex-1 max-w-md\">\n            <input\n              type=\"text\"\n              placeholder=\"Level oder XP suchen...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              Neues Level erstellen\n            </button>\n          </div>\n        </div>\n\n        {/* Level Progression Chart */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm mb-8\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Level Progression</h2>\n          <div className=\"h-64 flex items-end justify-center gap-1 overflow-x-auto\">\n            {levels.slice(0, 20).map((levelData) => {\n              const height = Math.max(10, (levelData.userCount / Math.max(...levels.map(l => l.userCount), 1)) * 200);\n              return (\n                <div key={levelData.level} className=\"flex flex-col items-center min-w-[40px]\">\n                  <div className=\"text-xs text-gray-600 mb-1\">\n                    {levelData.userCount}\n                  </div>\n                  <div\n                    className=\"w-8 bg-gradient-to-t from-blue-500 to-blue-300 rounded-t\"\n                    style={{ height: `${height}px` }}\n                  />\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    L{levelData.level}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"text-center text-sm text-gray-500 mt-4\">\n            Anzahl Benutzer pro Level (nur die ersten 20 Level angezeigt)\n          </div>\n        </div>\n\n        {/* Level Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredLevels.map((levelData) => (\n            <LevelTier\n              key={levelData.level}\n              level={levelData.level}\n              requiredXP={levelData.requiredXP}\n              userCount={levelData.userCount}\n              isEditing={editingLevel === levelData.level}\n              onEdit={() => handleEditLevel(levelData.level)}\n              onSave={(newXP) => handleSaveLevel(levelData.level, newXP)}\n              onCancel={handleCancelEdit}\n            />\n          ))}\n        </div>\n\n        {/* Empty State */}\n        {filteredLevels.length === 0 && (\n          <div className=\"text-center py-12\">\n            <span className=\"text-6xl mb-4 block\">📊</span>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              Keine Level gefunden\n            </h3>\n            <p className=\"text-gray-600\">\n              Probiere einen anderen Suchbegriff oder erstelle ein neues Level\n            </p>\n          </div>\n        )}\n\n        {/* Create Level Modal */}\n        <CreateLevelModal\n          isOpen={showCreateModal}\n          onClose={() => setShowCreateModal(false)}\n          onCreate={handleCreateLevel}\n          maxLevel={maxLevel}\n        />\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/LoginScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/MyRequestsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6684,6687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6684,6687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useLeavesStore } from '../state/leaves';\nimport { LeaveRequest } from '../types';\nimport { cn } from '../utils/cn';\n\nexport const MyRequestsScreen = () => {\n  const navigate = useNavigate();\n  const { user } = useAuthStore();\n  const { getLeaveRequests, getAllLeaveRequests, approveLeaveRequest, rejectLeaveRequest } = useLeavesStore();\n  \n  const [requests, setRequests] = useState<LeaveRequest[]>([]);\n  const [activeTab, setActiveTab] = useState<'my' | 'all'>('my');\n  const [filter, setFilter] = useState<'ALL' | 'PENDING' | 'APPROVED' | 'REJECTED'>('ALL');\n  const [processingId, setProcessingId] = useState<string | null>(null);\n\n  const isAdmin = user && (user.role === 'ADMIN' || user.role === 'SUPERADMIN');\n\n  useEffect(() => {\n    if (!user) return;\n\n    let allRequests: LeaveRequest[] = [];\n    \n    if (activeTab === 'my') {\n      // Show user's own requests\n      allRequests = getLeaveRequests(user.id);\n    } else if (activeTab === 'all' && isAdmin) {\n      // Show all requests for admin\n      allRequests = getAllLeaveRequests();\n      if (filter !== 'ALL') {\n        allRequests = allRequests.filter(req => req.status === filter);\n      }\n    }\n\n    setRequests(allRequests.sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    ));\n  }, [user, getLeaveRequests, getAllLeaveRequests, activeTab, filter, isAdmin]);\n\n  const handleApprove = async (requestId: string) => {\n    if (!user) return;\n    setProcessingId(requestId);\n    try {\n      await approveLeaveRequest(requestId, user.id);\n      // Refresh the list\n      const allRequests = getAllLeaveRequests();\n      const filteredRequests = filter === 'ALL' \n        ? allRequests \n        : allRequests.filter(req => req.status === filter);\n      setRequests(filteredRequests.sort((a, b) => \n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n      ));\n    } finally {\n      setProcessingId(null);\n    }\n  };\n\n  const handleReject = async (requestId: string) => {\n    if (!user) return;\n    setProcessingId(requestId);\n    try {\n      await rejectLeaveRequest(requestId, user.id);\n      // Refresh the list\n      const allRequests = getAllLeaveRequests();\n      const filteredRequests = filter === 'ALL' \n        ? allRequests \n        : allRequests.filter(req => req.status === filter);\n      setRequests(filteredRequests.sort((a, b) => \n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n      ));\n    } finally {\n      setProcessingId(null);\n    }\n  };\n\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'APPROVED':\n        return 'bg-green-100 text-green-800';\n      case 'REJECTED':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  const getStatusText = (status: string): string => {\n    switch (status) {\n      case 'APPROVED':\n        return 'Genehmigt';\n      case 'REJECTED':\n        return 'Abgelehnt';\n      default:\n        return 'Ausstehend';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    return type === 'VACATION' ? '🏖️' : '🏥';\n  };\n\n  const getTypeText = (type: string) => {\n    return type === 'VACATION' ? 'Urlaub' : 'Krankheit';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('de-DE');\n  };\n\n  const calculateDays = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return diffDays;\n  };\n\n  /**\n   * Gets the display name for a user ID\n   * @param userId - The user ID to get the name for\n   * @returns The display name or 'Unbekannt' if not found\n   */\n  const getUserName = (userId: string): string => {\n    const names: { [key: string]: string } = {\n      '1': 'Max M.',\n      '2': 'Anna A.',\n      '3': 'Tom K.',\n      '4': 'Lisa S.',\n      '5': 'Julia B.',\n      '6': 'Marco L.'\n    };\n    return names[userId] || 'Unbekannt';\n  };\n\n  const getPendingCount = () => {\n    if (!isAdmin) return 0;\n    return getAllLeaveRequests().filter(req => req.status === 'PENDING').length;\n  };\n\n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"flex-1 px-4 py-6 overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            Anträge\n          </h1>\n          <button \n            onClick={() => navigate('/request-leave')}\n            className=\"bg-blue-600 px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <span className=\"text-white font-medium\">+ Neu</span>\n          </button>\n        </div>\n\n        {/* Tab Navigation for Admin */}\n        {isAdmin && (\n          <div className=\"flex bg-white rounded-lg p-1 mb-4 shadow-sm\">\n            <button\n              onClick={() => setActiveTab('my')}\n              className={cn(\n                \"flex-1 py-2 px-3 rounded-md transition-colors\",\n                activeTab === 'my' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n              )}\n            >\n              <span className=\"text-center font-medium text-sm\">\n                Meine Anträge\n              </span>\n            </button>\n            <button\n              onClick={() => setActiveTab('all')}\n              className={cn(\n                \"flex-1 py-2 px-3 rounded-md transition-colors relative\",\n                activeTab === 'all' ? \"bg-blue-500 text-white\" : \"bg-transparent text-gray-700 hover:bg-gray-100\"\n              )}\n            >\n              <span className=\"text-center font-medium text-sm\">\n                Alle verwalten\n              </span>\n              {getPendingCount() > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                  {getPendingCount()}\n                </span>\n              )}\n            </button>\n          </div>\n        )}\n\n        {/* Filter for Admin View */}\n        {isAdmin && activeTab === 'all' && (\n          <div className=\"flex items-center justify-end mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-500\">Filter:</span>\n              <select\n                value={filter}\n                onChange={(e) => setFilter(e.target.value as any)}\n                className=\"border border-gray-300 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"ALL\">Alle</option>\n                <option value=\"PENDING\">Ausstehend</option>\n                <option value=\"APPROVED\">Genehmigt</option>\n                <option value=\"REJECTED\">Abgelehnt</option>\n              </select>\n            </div>\n          </div>\n        )}\n\n        <div className=\"space-y-4\">\n          {requests.map((request) => (\n            <div key={request.id} className=\"bg-white rounded-xl p-4 shadow-sm\">\n              <div className=\"flex justify-between items-start mb-3\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-2xl mr-3\">{getTypeIcon(request.type)}</span>\n                  <div>\n                    <p className=\"text-base font-semibold text-gray-900\">\n                      {activeTab === 'all' && isAdmin \n                        ? `${getUserName(request.userId)} - ${getTypeText(request.type)}`\n                        : getTypeText(request.type)\n                      }\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      {formatDate(request.startDate)} - {formatDate(request.endDate)}\n                    </p>\n                  </div>\n                </div>\n                <div className={cn(\n                  \"px-3 py-1 rounded-full\",\n                  getStatusColor(request.status)\n                )}>\n                  <span className=\"text-xs font-medium\">\n                    {getStatusText(request.status)}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-between items-center mb-3\">\n                <p className=\"text-sm text-gray-600\">\n                  Dauer: {calculateDays(request.startDate, request.endDate)} Tag\n                  {calculateDays(request.startDate, request.endDate) !== 1 ? 'e' : ''}\n                </p>\n                <div className=\"text-right\">\n                  <p className=\"text-xs text-gray-500\">\n                    Eingereicht am {formatDate(request.createdAt.split('T')[0])}\n                  </p>\n                  {request.approvedBy && request.approvedAt && (\n                    <p className=\"text-xs text-gray-500\">\n                      {getStatusText(request.status)} von {getUserName(request.approvedBy)} am {formatDate(request.approvedAt.split('T')[0])}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {request.comment && (\n                <div className=\"p-3 bg-gray-50 rounded-lg mb-3\">\n                  <p className=\"text-sm text-gray-700\">\n                    \"{request.comment}\"\n                  </p>\n                </div>\n              )}\n\n              {/* Admin Actions */}\n              {isAdmin && activeTab === 'all' && request.status === 'PENDING' && (\n                <div className=\"flex space-x-3 pt-3 border-t border-gray-100\">\n                  <button\n                    onClick={() => handleReject(request.id)}\n                    disabled={processingId === request.id}\n                    className={cn(\n                      \"flex-1 py-2 px-4 rounded-lg border border-red-300 text-red-700 font-medium transition-colors\",\n                      processingId === request.id \n                        ? \"opacity-50 cursor-not-allowed\" \n                        : \"hover:bg-red-50\"\n                    )}\n                  >\n                    {processingId === request.id ? '...' : 'Ablehnen'}\n                  </button>\n                  <button\n                    onClick={() => handleApprove(request.id)}\n                    disabled={processingId === request.id}\n                    className={cn(\n                      \"flex-1 py-2 px-4 rounded-lg bg-green-600 text-white font-medium transition-colors\",\n                      processingId === request.id \n                        ? \"opacity-50 cursor-not-allowed\" \n                        : \"hover:bg-green-700\"\n                    )}\n                  >\n                    {processingId === request.id ? '...' : 'Genehmigen'}\n                  </button>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {requests.length === 0 && (\n          <div className=\"bg-white rounded-xl p-8 flex flex-col items-center shadow-sm\">\n            <span className=\"text-4xl mb-4\">📝</span>\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Keine Anträge\n            </h2>\n            <p className=\"text-gray-600 text-center mb-4\">\n              {activeTab === 'my' \n                ? 'Sie haben noch keine Urlaubs- oder Krankmeldungen eingereicht.'\n                : filter === 'PENDING' \n                  ? 'Es gibt derzeit keine ausstehenden Anträge.' \n                  : `Es gibt keine Anträge mit dem Status \"${getStatusText(filter)}\".`\n              }\n            </p>\n            {activeTab === 'my' && (\n              <button \n                onClick={() => navigate('/request-leave')}\n                className=\"bg-blue-600 px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                <span className=\"text-white font-medium\">Ersten Antrag stellen</span>\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/RequestLeaveScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/SettingsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TakeLessonScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TeamCalendarScreen.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [getAllUsers, isAdmin, selectedTeamId, userTeams]","fix":{"range":[1946,1982],"text":"[getAllUsers, isAdmin, selectedTeamId, userTeams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'getAllLeaveRequests', 'getAllTimeRecords', and 'getAllUsers'. Either include them or remove the dependency array.","line":103,"column":6,"nodeType":"ArrayExpression","endLine":103,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [getAllLeaveRequests, getAllTimeRecords, getAllUsers]","fix":{"range":[4060,4062],"text":"[getAllLeaveRequests, getAllTimeRecords, getAllUsers]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4250,4293],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { useAuthStore } from '../state/auth';\nimport { useTeamsStore } from '../state/teams';\nimport { useLeavesStore } from '../state/leaves';\nimport { useTimeRecordsStore } from '../state/timeRecords';\nimport { TeamCalendarView } from '../components/TeamCalendarView';\nimport { CalendarEntry } from '../types/calendar';\nimport { TimeRecord } from '../types';\nimport { format } from 'date-fns';\n\n/**\n * Team Calendar Screen\n * Shows a comprehensive calendar view of all team members' absences and work times\n * Available in month and year view with filtering capabilities\n */\nexport const TeamCalendarScreen: React.FC = () => {\n  const { user, getAllUsers } = useAuthStore();\n  const { getTeamsByUserId } = useTeamsStore();\n  const { getAllLeaveRequests } = useLeavesStore();\n  const { getAllTimeRecords } = useTimeRecordsStore();\n  \n  const [view, setView] = useState<'monat' | 'jahr'>('monat');\n  const [selectedTeamId, setSelectedTeamId] = useState<string>('all');\n\n  // Check if current user is admin or manager\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n  const userTeams = user ? getTeamsByUserId(user.id) : [];\n\n  // Get users to display based on selected team\n  const displayUsers = useMemo(() => {\n    const allUsers = getAllUsers();\n    \n    if (!isAdmin && selectedTeamId === 'all') {\n      // Non-admins only see their team members\n      const teamMemberIds = new Set<string>();\n      userTeams.forEach(team => {\n        const teamFromStore = useTeamsStore.getState().getTeamById(team.id);\n        teamFromStore?.memberIds.forEach(id => teamMemberIds.add(id));\n      });\n      return allUsers.filter(u => teamMemberIds.has(u.id));\n    }\n    \n    if (selectedTeamId === 'all') {\n      return allUsers;\n    }\n    \n    const team = useTeamsStore.getState().getTeamById(selectedTeamId);\n    return allUsers.filter(u => team?.memberIds.includes(u.id));\n  }, [selectedTeamId, userTeams, isAdmin]);\n\n  // Convert leave requests and time records to calendar entries\n  const calendarEntries = useMemo(() => {\n    const entries: CalendarEntry[] = [];\n    const allUsers = getAllUsers();\n    \n    // Add leave requests\n    const leaveRequests = getAllLeaveRequests();\n    leaveRequests.forEach(request => {\n      const user = allUsers.find(u => u.id === request.userId);\n      if (!user) return;\n      \n      // Create entries for each day in the leave period\n      const start = new Date(request.startDate);\n      const end = new Date(request.endDate);\n      \n      for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n        entries.push({\n          userId: request.userId,\n          userName: user.name,\n          date: format(date, 'yyyy-MM-dd'),\n          type: request.type === 'VACATION' ? 'urlaub' : 'krank',\n          status: request.status.toLowerCase() as 'beantragt' | 'genehmigt' | 'abgelehnt'\n        });\n      }\n    });\n    \n    // Add time records\n    const timeRecords = getAllTimeRecords();\n    timeRecords.forEach((record: TimeRecord) => {\n      const user = allUsers.find(u => u.id === record.userId);\n      if (!user || !record.totalHours) return;\n      \n      entries.push({\n        userId: record.userId,\n        userName: user.name,\n        date: record.date,\n        type: 'zeit',\n        stunden: record.totalHours\n      });\n    });\n\n    // Add mock data for demonstration\n    const mockEntries: CalendarEntry[] = [\n      { userId: '1', userName: 'Max Mustermann', date: '2025-01-06', type: 'meeting' },\n      { userId: '2', userName: 'Anna Admin', date: '2025-01-07', type: 'fortbildung' },\n      { userId: '3', userName: 'Tom Teilzeit', date: '2025-01-08', type: 'ux' },\n      { userId: '1', userName: 'Max Mustermann', date: '2025-01-09', type: 'zeit', stunden: 8.5 },\n      { userId: '2', userName: 'Anna Admin', date: '2025-01-09', type: 'zeit', stunden: 6.0 },\n      { userId: '3', userName: 'Tom Teilzeit', date: '2025-01-09', type: 'zeit', stunden: 4.0 },\n    ];\n    \n    return [...entries, ...mockEntries];\n  }, []);\n\n  // Handle cell click\n  const handleCellClick = (userId: string, date: string) => {\n    if (!isAdmin) return;\n    \n    // In a real app, this would open a modal to edit the entry\n    console.log('Cell clicked:', userId, date);\n  };\n\n  return (\n    <div className=\"p-6 max-w-full\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Team-Kalender</h1>\n        <p className=\"text-gray-600\">Übersicht über Abwesenheiten und Arbeitszeiten</p>\n      </div>\n\n      {/* Controls */}\n      <div className=\"mb-6 flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          {/* View Toggle */}\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setView('monat')}\n              className={cn(\n                \"px-4 py-2 rounded-lg font-medium transition-colors\",\n                view === 'monat' \n                  ? \"bg-blue-600 text-white\" \n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n              )}\n            >\n              Monatsansicht\n            </button>\n            <button\n              onClick={() => setView('jahr')}\n              className={cn(\n                \"px-4 py-2 rounded-lg font-medium transition-colors\",\n                view === 'jahr' \n                  ? \"bg-blue-600 text-white\" \n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n              )}\n            >\n              Jahresansicht\n            </button>\n          </div>\n\n          {/* Team Filter */}\n          <div className=\"flex items-center gap-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Team:</label>\n            <select\n              value={selectedTeamId}\n              onChange={(e) => setSelectedTeamId(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Alle Teams</option>\n              {userTeams.map(team => (\n                <option key={team.id} value={team.id}>{team.name}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Export Buttons */}\n        <div className=\"flex items-center gap-2\">\n          <button className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 font-medium\">\n            📄 PDF Export\n          </button>\n          <button className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 font-medium\">\n            📊 CSV Export\n          </button>\n        </div>\n      </div>\n\n      {/* Calendar Component */}\n      <TeamCalendarView\n        view={view}\n        entries={calendarEntries}\n        users={displayUsers.map(u => ({ userId: u.id, userName: u.name }))}\n        onCellClick={handleCellClick}\n        isAdmin={isAdmin}\n      />\n    </div>\n  );\n};\n\n// Helper function for className\nfunction cn(...classes: (string | boolean | undefined)[]) {\n  return classes.filter(Boolean).join(' ');\n}","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TeamManagementScreen.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'allTeams'. Either exclude it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [allUsers, getTeamsByUserId, getVacationBalance]","fix":{"range":[2208,2266],"text":"[allUsers, getTeamsByUserId, getVacationBalance]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useTeamsStore } from '../state/teams';\nimport { useLeavesStore } from '../state/leaves';\n// import { useCoinsStore } from '../state/coins';\nimport { cn } from '../utils/cn';\nimport { User } from '../types';\n\n/**\n * Extended user interface for team management view\n * Includes additional computed fields for display purposes\n */\ninterface TeamMemberView extends User {\n  teamNames: string[];\n  remainingVacationDays: number;\n  lastLoginDays: number;\n  pendingRequests: number;\n}\n\n/**\n * Team Management Screen Component\n * Main dashboard for HR admins to manage teams and team members\n * Features include team assignment, lead designation, and member overview\n */\nexport const TeamManagementScreen = () => {\n  const { user } = useAuthStore();\n  const { getAllUsers } = useAuthStore();\n  const { getAllTeams, getTeamsByUserId } = useTeamsStore();\n  const { getVacationBalance } = useLeavesStore();\n  // const { getCoinBalance } = useCoinsStore();\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterRole, setFilterRole] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<string>('name');\n\n  // Check if current user is admin\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n\n  const allUsers = getAllUsers();\n  const allTeams = getAllTeams();\n\n  // Transform users to team member view\n  const teamMembers: TeamMemberView[] = useMemo(() => {\n    return allUsers.map(user => {\n      const userTeams = getTeamsByUserId(user.id);\n      const teamNames = userTeams.map(team => team.name);\n      const vacationBalance = getVacationBalance(user.id);\n      \n      return {\n        ...user,\n        teamNames,\n        remainingVacationDays: vacationBalance?.remainingDays || 0,\n        lastLoginDays: Math.floor(Math.random() * 30), // Mock data\n        pendingRequests: 0, // Would come from requests store\n        coinWallet: user.coinWallet || 0,\n        coinProgress: user.coinProgress || 0,\n        level: user.level || 1\n      };\n    });\n  }, [allUsers, allTeams, getTeamsByUserId, getVacationBalance]);\n\n  // Filter and sort team members\n  const filteredMembers = useMemo(() => {\n    let filtered = teamMembers.filter(member => {\n      const matchesSearch = \n        member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        member.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        member.position?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        member.teamNames.some(team => team.toLowerCase().includes(searchTerm.toLowerCase()));\n\n      const matchesStatus = filterStatus === 'all' || member.employmentStatus === filterStatus;\n      const matchesRole = filterRole === 'all' || member.role === filterRole;\n\n      return matchesSearch && matchesStatus && matchesRole;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'position':\n          return (a.position || '').localeCompare(b.position || '');\n        case 'vacation':\n          return b.remainingVacationDays - a.remainingVacationDays;\n        case 'coins':\n          return (b.coinWallet || 0) - (a.coinWallet || 0);\n        case 'lastLogin':\n          return a.lastLoginDays - b.lastLoginDays;\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [teamMembers, searchTerm, filterStatus, filterRole, sortBy]);\n\n  if (!isAdmin) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Zugriff verweigert</h2>\n          <p className=\"text-gray-600\">Diese Seite ist nur für Administratoren verfügbar.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Teamverwaltung</h1>\n            <p className=\"text-gray-600\">Verwalten Sie alle Mitarbeitenden und Teams</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Link\n              to=\"/team-management/teams\"\n              className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 font-medium\"\n            >\n              Teams verwalten\n            </Link>\n            <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\">\n              + Mitarbeiter hinzufügen\n            </button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg mr-3\">\n                <span className=\"text-blue-600\">👥</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Gesamt Mitarbeiter</p>\n                <p className=\"text-xl font-semibold\">{allUsers.length}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg mr-3\">\n                <span className=\"text-green-600\">✅</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Aktive</p>\n                <p className=\"text-xl font-semibold\">\n                  {allUsers.filter(u => u.employmentStatus === 'ACTIVE').length}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-orange-100 rounded-lg mr-3\">\n                <span className=\"text-orange-600\">👑</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Admins</p>\n                <p className=\"text-xl font-semibold\">\n                  {allUsers.filter(u => u.role !== 'EMPLOYEE').length}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg mr-3\">\n                <span className=\"text-purple-600\">🏢</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Teams</p>\n                <p className=\"text-xl font-semibold\">{allTeams.length}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"bg-white p-4 rounded-lg border border-gray-200 mb-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Suche</label>\n            <input\n              type=\"text\"\n              placeholder=\"Name, Email, Position, Team...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Alle</option>\n              <option value=\"ACTIVE\">Aktiv</option>\n              <option value=\"PARENTAL_LEAVE\">Elternzeit</option>\n              <option value=\"TERMINATED\">Gekündigt</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Rolle</label>\n            <select\n              value={filterRole}\n              onChange={(e) => setFilterRole(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Alle</option>\n              <option value=\"EMPLOYEE\">Mitarbeiter</option>\n              <option value=\"ADMIN\">Admin</option>\n              <option value=\"SUPERADMIN\">Super Admin</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Sortierung</label>\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"name\">Name</option>\n              <option value=\"position\">Position</option>\n              <option value=\"vacation\">Resturlaub</option>\n              <option value=\"coins\">Coins</option>\n              <option value=\"lastLogin\">Letzter Login</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Team Members Table */}\n      <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Mitarbeiter\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Position & Teams\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Arbeitszeit\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Resturlaub\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Coins & Level\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Aktionen\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {filteredMembers.map((member) => (\n                <tr key={member.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                        <span className=\"text-blue-600 font-medium\">\n                          {member.name.split(' ').map(n => n[0]).join('')}\n                        </span>\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">{member.name}</div>\n                        <div className=\"text-sm text-gray-500\">{member.email}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"text-sm text-gray-900\">{member.position || 'Keine Position'}</div>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {member.teamNames.map((teamName, index) => (\n                        <span\n                          key={index}\n                          className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\"\n                        >\n                          {teamName}\n                        </span>\n                      ))}\n                      {member.teamNames.length === 0 && (\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\">\n                          Kein Team\n                        </span>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={cn(\n                      \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n                      member.employmentStatus === 'ACTIVE' \n                        ? \"bg-green-100 text-green-800\"\n                        : member.employmentStatus === 'PARENTAL_LEAVE'\n                        ? \"bg-yellow-100 text-yellow-800\"\n                        : \"bg-red-100 text-red-800\"\n                    )}>\n                      {member.employmentStatus === 'ACTIVE' ? 'Aktiv' :\n                       member.employmentStatus === 'PARENTAL_LEAVE' ? 'Elternzeit' : 'Gekündigt'}\n                    </span>\n                    <div className=\"mt-1\">\n                      <span className={cn(\n                        \"inline-flex items-center px-2 py-0.5 rounded text-xs\",\n                        member.role === 'EMPLOYEE' \n                          ? \"bg-gray-100 text-gray-800\"\n                          : \"bg-orange-100 text-orange-800\"\n                      )}>\n                        {member.role === 'EMPLOYEE' ? 'Mitarbeiter' : \n                         member.role === 'ADMIN' ? 'Admin' : 'Super Admin'}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {member.weeklyHours || 0}h/Woche\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{member.remainingVacationDays} Tage</div>\n                    <div className=\"text-xs text-gray-500\">von {member.vacationDays || 0}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">\n                      🪙 {member.coinWallet || 0}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      Level {member.level || 1} • {member.coinProgress || 0} XP\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <Link\n                      to={`/team-management/user/${member.id}`}\n                      className=\"text-blue-600 hover:text-blue-900 mr-3\"\n                    >\n                      Details\n                    </Link>\n                    <button className=\"text-gray-400 hover:text-gray-600\">\n                      ⚙️\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {filteredMembers.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">Keine Mitarbeiter gefunden.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TeamMemberDetailsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'getTeamsByUserId' and 'getTeamsLedByUser'. Either include them or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [getTeamsByUserId, getTeamsLedByUser, targetUser, userId]","fix":{"range":[2095,2115],"text":"[getTeamsByUserId, getTeamsLedByUser, targetUser, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4381,4426],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4715,4765],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4851,4895],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5095,5148],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5234,5280],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14350,14353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14350,14353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15381,15384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15381,15384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useTeamsStore } from '../state/teams';\nimport { useLeavesStore } from '../state/leaves';\n// import { useCoinsStore } from '../state/coins';\nimport { cn } from '../utils/cn';\nimport { User } from '../types';\n\n/**\n * Team Member Details Screen Component\n * Allows HR admins to view and edit detailed information about team members\n * Features include personal info editing, team assignment, lead designation, and coin management\n */\nexport const TeamMemberDetailsScreen = () => {\n  const { userId } = useParams<{ userId: string }>();\n  const navigate = useNavigate();\n  const { user: currentUser, getAllUsers, updateUser } = useAuthStore();\n  const { \n    getAllTeams, \n    getTeamsByUserId, \n    getTeamsLedByUser,\n    addMemberToTeam,\n    removeMemberFromTeam,\n    setTeamLead\n  } = useTeamsStore();\n  const { getVacationBalance, getUserLeaveRequests } = useLeavesStore();\n  // const { getCoinBalance, addCoins, removeCoins } = useCoinsStore();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editedUser, setEditedUser] = useState<Partial<User>>({});\n  const [coinAmount, setCoinAmount] = useState<number>(0);\n  const [coinReason, setCoinReason] = useState<string>('');\n  const [selectedTeams, setSelectedTeams] = useState<string[]>([]);\n  const [leadTeams, setLeadTeams] = useState<string[]>([]);\n\n  // Check if current user is admin\n  const isAdmin = currentUser?.role === 'ADMIN' || currentUser?.role === 'SUPERADMIN';\n\n  const allUsers = getAllUsers();\n  const allTeams = getAllTeams();\n  const targetUser = allUsers.find(u => u.id === userId);\n\n  useEffect(() => {\n    if (targetUser) {\n      setEditedUser(targetUser);\n      const userTeams = getTeamsByUserId(targetUser.id);\n      const userLeadTeams = getTeamsLedByUser(targetUser.id);\n      setSelectedTeams(userTeams.map(t => t.id));\n      setLeadTeams(userLeadTeams.map(t => t.id));\n    }\n  }, [targetUser, userId]);\n\n  if (!isAdmin) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Zugriff verweigert</h2>\n          <p className=\"text-gray-600\">Diese Seite ist nur für Administratoren verfügbar.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!targetUser) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Mitarbeiter nicht gefunden</h2>\n          <p className=\"text-gray-600\">Der angegebene Mitarbeiter existiert nicht.</p>\n          <Link to=\"/team-management\" className=\"text-blue-600 hover:text-blue-800 mt-4 inline-block\">\n            ← Zurück zur Teamverwaltung\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const vacationBalance = getVacationBalance(targetUser.id);\n  const coinBalance = { balance: targetUser.coinWallet || 0, progress: targetUser.coinProgress || 0, level: targetUser.level || 1 };\n  const userRequests = getUserLeaveRequests(targetUser.id);\n  const userTeams = getTeamsByUserId(targetUser.id);\n  const userLeadTeams = getTeamsLedByUser(targetUser.id);\n\n  /**\n   * Save user changes including personal info and team assignments\n   * Handles team membership updates and lead role assignments\n   */\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      await updateUser(targetUser.id, editedUser);\n      \n      // Update team memberships\n      const currentTeamIds = userTeams.map(t => t.id);\n      \n      // Remove from teams that were deselected\n      for (const teamId of currentTeamIds) {\n        if (!selectedTeams.includes(teamId)) {\n          await removeMemberFromTeam(teamId, targetUser.id);\n        }\n      }\n      \n      // Add to newly selected teams\n      for (const teamId of selectedTeams) {\n        if (!currentTeamIds.includes(teamId)) {\n          await addMemberToTeam(teamId, targetUser.id);\n        }\n      }\n      \n      // Update lead status for all selected teams\n      for (const teamId of selectedTeams) {\n        const isLead = leadTeams.includes(teamId);\n        await setTeamLead(teamId, targetUser.id, isLead);\n      }\n      \n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      // In production, show user-friendly error message\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddCoins = async () => {\n    if (coinAmount > 0) {\n      try {\n        // await addCoins(targetUser.id, coinAmount, coinReason || 'Manuell hinzugefügt');\n        console.log('Add coins:', coinAmount, coinReason);\n        setCoinAmount(0);\n        setCoinReason('');\n      } catch (error) {\n        console.error('Error adding coins:', error);\n      }\n    }\n  };\n\n  const handleRemoveCoins = async () => {\n    if (coinAmount > 0) {\n      try {\n        // await removeCoins(targetUser.id, coinAmount, coinReason || 'Manuell entfernt');\n        console.log('Remove coins:', coinAmount, coinReason);\n        setCoinAmount(0);\n        setCoinReason('');\n      } catch (error) {\n        console.error('Error removing coins:', error);\n      }\n    }\n  };\n\n  const handleTeamToggle = (teamId: string) => {\n    setSelectedTeams(prev => \n      prev.includes(teamId) \n        ? prev.filter(id => id !== teamId)\n        : [...prev, teamId]\n    );\n  };\n\n  const handleLeadToggle = (teamId: string) => {\n    setLeadTeams(prev => \n      prev.includes(teamId)\n        ? prev.filter(id => id !== teamId)\n        : [...prev, teamId]\n    );\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center\">\n            <button \n              onClick={() => navigate('/team-management')}\n              className=\"mr-4 p-2 text-gray-400 hover:text-gray-600\"\n            >\n              ← Zurück\n            </button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">{targetUser.name}</h1>\n              <p className=\"text-gray-600\">{targetUser.email}</p>\n            </div>\n          </div>\n          <div className=\"flex gap-3\">\n            {isEditing ? (\n              <>\n                <button\n                  onClick={() => setIsEditing(false)}\n                  className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200\"\n                >\n                  Abbrechen\n                </button>\n                <button\n                  onClick={handleSave}\n                  disabled={isLoading}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n                >\n                  {isLoading ? 'Speichern...' : 'Speichern'}\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={() => setIsEditing(true)}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                Bearbeiten\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Personal Information */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Basic Info */}\n          <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Persönliche Informationen</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Vorname</label>\n                {isEditing ? (\n                  <input\n                    type=\"text\"\n                    value={editedUser.firstName || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, firstName: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.firstName || 'Nicht angegeben'}</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nachname</label>\n                {isEditing ? (\n                  <input\n                    type=\"text\"\n                    value={editedUser.lastName || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, lastName: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.lastName || 'Nicht angegeben'}</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">E-Mail (System)</label>\n                <p className=\"py-2 text-gray-500\">{targetUser.email}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Private E-Mail</label>\n                {isEditing ? (\n                  <input\n                    type=\"email\"\n                    value={editedUser.privateEmail || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, privateEmail: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.privateEmail || 'Nicht angegeben'}</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Telefon</label>\n                {isEditing ? (\n                  <input\n                    type=\"tel\"\n                    value={editedUser.phone || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, phone: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.phone || 'Nicht angegeben'}</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Eintrittsdatum</label>\n                <p className=\"py-2 text-gray-500\">{targetUser.joinDate || 'Nicht angegeben'}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Work Information */}\n          <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Arbeitsinformationen</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Position</label>\n                {isEditing ? (\n                  <input\n                    type=\"text\"\n                    value={editedUser.position || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, position: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.position || 'Nicht angegeben'}</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Abteilung</label>\n                {isEditing ? (\n                  <input\n                    type=\"text\"\n                    value={editedUser.department || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, department: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.department || 'Nicht angegeben'}</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Wochenstunden</label>\n                {isEditing ? (\n                  <input\n                    type=\"number\"\n                    value={editedUser.weeklyHours || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, weeklyHours: Number(e.target.value) }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.weeklyHours || 0} Stunden</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Urlaubsanspruch</label>\n                {isEditing ? (\n                  <input\n                    type=\"number\"\n                    value={editedUser.vacationDays || ''}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, vacationDays: Number(e.target.value) }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                ) : (\n                  <p className=\"py-2 text-gray-900\">{targetUser.vacationDays || 0} Tage/Jahr</p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Beschäftigungsstatus</label>\n                {isEditing ? (\n                  <select\n                    value={editedUser.employmentStatus || targetUser.employmentStatus}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, employmentStatus: e.target.value as any }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"ACTIVE\">Aktiv</option>\n                    <option value=\"PARENTAL_LEAVE\">Elternzeit</option>\n                    <option value=\"TERMINATED\">Gekündigt</option>\n                  </select>\n                ) : (\n                  <p className=\"py-2 text-gray-900\">\n                    {targetUser.employmentStatus === 'ACTIVE' ? 'Aktiv' :\n                     targetUser.employmentStatus === 'PARENTAL_LEAVE' ? 'Elternzeit' : 'Gekündigt'}\n                  </p>\n                )}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Rolle</label>\n                {isEditing ? (\n                  <select\n                    value={editedUser.role || targetUser.role}\n                    onChange={(e) => setEditedUser(prev => ({ ...prev, role: e.target.value as any }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"EMPLOYEE\">Mitarbeiter</option>\n                    <option value=\"ADMIN\">Admin</option>\n                    <option value=\"SUPERADMIN\">Super Admin</option>\n                  </select>\n                ) : (\n                  <p className=\"py-2 text-gray-900\">\n                    {targetUser.role === 'EMPLOYEE' ? 'Mitarbeiter' : \n                     targetUser.role === 'ADMIN' ? 'Admin' : 'Super Admin'}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Team Assignment */}\n          <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Teamzuweisung</h3>\n            <div className=\"space-y-3\">\n              {allTeams.map((team) => (\n                <div key={team.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    {isEditing ? (\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedTeams.includes(team.id)}\n                        onChange={() => handleTeamToggle(team.id)}\n                        className=\"mr-3 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      />\n                    ) : (\n                      <div className=\"mr-3 w-4 h-4 flex items-center justify-center\">\n                        {userTeams.some(t => t.id === team.id) ? '✅' : '⬜'}\n                      </div>\n                    )}\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{team.name}</p>\n                      {team.description && (\n                        <p className=\"text-sm text-gray-500\">{team.description}</p>\n                      )}\n                    </div>\n                  </div>\n                  {(selectedTeams.includes(team.id) || userTeams.some(t => t.id === team.id)) && (\n                    <div className=\"flex items-center\">\n                      {isEditing ? (\n                        <label className=\"flex items-center\">\n                          <input\n                            type=\"checkbox\"\n                            checked={leadTeams.includes(team.id)}\n                            onChange={() => handleLeadToggle(team.id)}\n                            disabled={!selectedTeams.includes(team.id)}\n                            className=\"mr-2 h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                          />\n                          <span className=\"text-sm text-orange-600 font-medium\">Team Lead</span>\n                        </label>\n                      ) : (\n                        userLeadTeams.some(t => t.id === team.id) && (\n                          <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-orange-100 text-orange-800\">\n                            👑 Lead\n                          </span>\n                        )\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Stats */}\n          <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Übersicht</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Resturlaub</span>\n                <span className=\"font-semibold\">{vacationBalance?.remainingDays || 0} Tage</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Teams</span>\n                <span className=\"font-semibold\">{userTeams.length}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Team Lead</span>\n                <span className=\"font-semibold\">{userLeadTeams.length}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Offene Anträge</span>\n                <span className=\"font-semibold\">\n                  {userRequests.filter(r => r.status === 'PENDING').length}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Coins Management */}\n          <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Coin-Verwaltung</h3>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  🪙 {coinBalance?.balance || 0}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  Level {coinBalance?.level || 1} • {coinBalance?.progress || 0} XP\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Anzahl Coins\"\n                  value={coinAmount}\n                  onChange={(e) => setCoinAmount(Number(e.target.value))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Grund (optional)\"\n                  value={coinReason}\n                  onChange={(e) => setCoinReason(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={handleAddCoins}\n                    disabled={coinAmount <= 0}\n                    className=\"flex-1 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 text-sm\"\n                  >\n                    + Hinzufügen\n                  </button>\n                  <button\n                    onClick={handleRemoveCoins}\n                    disabled={coinAmount <= 0}\n                    className=\"flex-1 px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 text-sm\"\n                  >\n                    - Entfernen\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Schnellaktionen</h3>\n            <div className=\"space-y-3\">\n              <button className=\"w-full px-4 py-2 text-left bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100\">\n                📧 E-Mail senden\n              </button>\n              <button className=\"w-full px-4 py-2 text-left bg-green-50 text-green-700 rounded-lg hover:bg-green-100\">\n                📄 Dokument zuweisen\n              </button>\n              <button className=\"w-full px-4 py-2 text-left bg-purple-50 text-purple-700 rounded-lg hover:bg-purple-100\">\n                🎓 Schulung zuweisen\n              </button>\n              <button className=\"w-full px-4 py-2 text-left bg-yellow-50 text-yellow-700 rounded-lg hover:bg-yellow-100\">\n                🏆 Badge vergeben\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TeamsOverviewScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2285,2330],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2692,2737],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2975,3020],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useTeamsStore } from '../state/teams';\nimport { cn } from '../utils/cn';\nimport { Team } from '../types';\n\n/**\n * Teams Overview Screen Component\n * Allows HR admins to manage teams within the organization\n * Features include team creation, editing, deletion, and member/lead overview\n */\nexport const TeamsOverviewScreen = () => {\n  const navigate = useNavigate();\n  const { user, getAllUsers } = useAuthStore();\n  const { \n    getAllTeams, \n    createTeam, \n    updateTeam, \n    deleteTeam,\n    getTeamMembers,\n    getTeamLeads,\n    isLoading \n  } = useTeamsStore();\n\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingTeam, setEditingTeam] = useState<Team | null>(null);\n  const [newTeam, setNewTeam] = useState({ name: '', description: '' });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if current user is admin\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n\n  if (!isAdmin) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Zugriff verweigert</h2>\n          <p className=\"text-gray-600\">Diese Seite ist nur für Administratoren verfügbar.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const allTeams = getAllTeams();\n  const allUsers = getAllUsers();\n\n  const filteredTeams = allTeams.filter(team =>\n    team.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    team.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  /**\n   * Create a new team with validation\n   * Ensures team name is not empty and handles errors gracefully\n   */\n  const handleCreateTeam = async () => {\n    // Validate team name\n    if (!newTeam.name.trim()) {\n      alert('Bitte geben Sie einen Team-Namen ein');\n      return;\n    }\n    \n    try {\n      await createTeam({\n        name: newTeam.name.trim(),\n        description: newTeam.description.trim(),\n        organizationId: user!.organizationId,\n        leadIds: [],\n        memberIds: []\n      });\n      setNewTeam({ name: '', description: '' });\n      setIsCreating(false);\n    } catch (error) {\n      console.error('Error creating team:', error);\n      alert('Fehler beim Erstellen des Teams');\n    }\n  };\n\n  const handleUpdateTeam = async () => {\n    if (editingTeam && editingTeam.name.trim()) {\n      try {\n        await updateTeam(editingTeam.id, {\n          name: editingTeam.name,\n          description: editingTeam.description\n        });\n        setEditingTeam(null);\n      } catch (error) {\n        console.error('Error updating team:', error);\n      }\n    }\n  };\n\n  const handleDeleteTeam = async (teamId: string) => {\n    if (window.confirm('Sind Sie sicher, dass Sie dieses Team löschen möchten?')) {\n      try {\n        await deleteTeam(teamId);\n      } catch (error) {\n        console.error('Error deleting team:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center\">\n            <button \n              onClick={() => navigate('/team-management')}\n              className=\"mr-4 p-2 text-gray-400 hover:text-gray-600\"\n            >\n              ← Zurück\n            </button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Teams verwalten</h1>\n              <p className=\"text-gray-600\">Erstellen und verwalten Sie Teams in Ihrer Organisation</p>\n            </div>\n          </div>\n          <button\n            onClick={() => setIsCreating(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n          >\n            + Neues Team\n          </button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg mr-3\">\n                <span className=\"text-blue-600\">🏢</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Gesamt Teams</p>\n                <p className=\"text-xl font-semibold\">{allTeams.length}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg mr-3\">\n                <span className=\"text-green-600\">👥</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Mitglieder insgesamt</p>\n                <p className=\"text-xl font-semibold\">\n                  {allTeams.reduce((sum, team) => sum + team.memberIds.length, 0)}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-orange-100 rounded-lg mr-3\">\n                <span className=\"text-orange-600\">👑</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Team Leads</p>\n                <p className=\"text-xl font-semibold\">\n                  {allTeams.reduce((sum, team) => sum + team.leadIds.length, 0)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <input\n            type=\"text\"\n            placeholder=\"Teams durchsuchen...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n      </div>\n\n      {/* Create Team Modal */}\n      {isCreating && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg w-full max-w-md\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Neues Team erstellen</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Team Name</label>\n                <input\n                  type=\"text\"\n                  value={newTeam.name}\n                  onChange={(e) => setNewTeam(prev => ({ ...prev, name: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"z.B. Entwicklung, Marketing\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Beschreibung</label>\n                <textarea\n                  value={newTeam.description}\n                  onChange={(e) => setNewTeam(prev => ({ ...prev, description: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"Beschreibung des Teams...\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex gap-3 pt-4\">\n                <button\n                  onClick={() => setIsCreating(false)}\n                  className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200\"\n                >\n                  Abbrechen\n                </button>\n                <button\n                  onClick={handleCreateTeam}\n                  disabled={!newTeam.name.trim() || isLoading}\n                  className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n                >\n                  {isLoading ? 'Erstellen...' : 'Erstellen'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Edit Team Modal */}\n      {editingTeam && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg w-full max-w-md\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Team bearbeiten</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Team Name</label>\n                <input\n                  type=\"text\"\n                  value={editingTeam.name}\n                  onChange={(e) => setEditingTeam(prev => prev ? { ...prev, name: e.target.value } : null)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Beschreibung</label>\n                <textarea\n                  value={editingTeam.description || ''}\n                  onChange={(e) => setEditingTeam(prev => prev ? { ...prev, description: e.target.value } : null)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex gap-3 pt-4\">\n                <button\n                  onClick={() => setEditingTeam(null)}\n                  className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200\"\n                >\n                  Abbrechen\n                </button>\n                <button\n                  onClick={handleUpdateTeam}\n                  disabled={!editingTeam.name.trim() || isLoading}\n                  className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n                >\n                  {isLoading ? 'Speichern...' : 'Speichern'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Teams Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredTeams.map((team) => {\n          const teamMembers = getTeamMembers(team.id, allUsers);\n          const teamLeads = getTeamLeads(team.id, allUsers);\n\n          return (\n            <div key={team.id} className=\"bg-white p-6 rounded-lg border border-gray-200 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">{team.name}</h3>\n                  {team.description && (\n                    <p className=\"text-sm text-gray-600 mb-3\">{team.description}</p>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={() => setEditingTeam(team)}\n                    className=\"p-1 text-gray-400 hover:text-blue-600\"\n                  >\n                    ✏️\n                  </button>\n                  <button\n                    onClick={() => handleDeleteTeam(team.id)}\n                    className=\"p-1 text-gray-400 hover:text-red-600\"\n                  >\n                    🗑️\n                  </button>\n                </div>\n              </div>\n\n              {/* Team Stats */}\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                  <div className=\"text-lg font-semibold text-blue-600\">{teamMembers.length}</div>\n                  <div className=\"text-xs text-blue-600\">Mitglieder</div>\n                </div>\n                <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                  <div className=\"text-lg font-semibold text-orange-600\">{teamLeads.length}</div>\n                  <div className=\"text-xs text-orange-600\">Leads</div>\n                </div>\n              </div>\n\n              {/* Team Leads */}\n              {teamLeads.length > 0 && (\n                <div className=\"mb-4\">\n                  <div className=\"text-sm font-medium text-gray-700 mb-2\">Team Leads:</div>\n                  <div className=\"space-y-1\">\n                    {teamLeads.map((lead) => (\n                      <div key={lead.id} className=\"flex items-center text-sm\">\n                        <span className=\"text-orange-500 mr-2\">👑</span>\n                        <span className=\"text-gray-900\">{lead.name}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Team Members Preview */}\n              {teamMembers.length > 0 && (\n                <div className=\"mb-4\">\n                  <div className=\"text-sm font-medium text-gray-700 mb-2\">Mitglieder:</div>\n                  <div className=\"space-y-1\">\n                    {teamMembers.slice(0, 3).map((member) => (\n                      <div key={member.id} className=\"flex items-center text-sm\">\n                        <div className=\"w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center mr-2 text-xs\">\n                          {member.name.split(' ').map(n => n[0]).join('')}\n                        </div>\n                        <span className=\"text-gray-900\">{member.name}</span>\n                        {teamLeads.some(lead => lead.id === member.id) && (\n                          <span className=\"ml-1 text-orange-500\">👑</span>\n                        )}\n                      </div>\n                    ))}\n                    {teamMembers.length > 3 && (\n                      <div className=\"text-xs text-gray-500 pl-8\">\n                        +{teamMembers.length - 3} weitere\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex gap-2 mt-4\">\n                <Link\n                  to={`/team-management/team/${team.id}`}\n                  className=\"flex-1 px-3 py-2 text-center bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 text-sm font-medium\"\n                >\n                  Details\n                </Link>\n                <button className=\"flex-1 px-3 py-2 bg-green-50 text-green-700 rounded-lg hover:bg-green-100 text-sm font-medium\">\n                  Mitglieder\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {filteredTeams.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"text-gray-400 text-4xl mb-4\">🏢</div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Keine Teams gefunden</h3>\n          <p className=\"text-gray-600 mb-4\">\n            {searchTerm ? 'Versuchen Sie einen anderen Suchbegriff.' : 'Erstellen Sie Ihr erstes Team.'}\n          </p>\n          {!searchTerm && (\n            <button\n              onClick={() => setIsCreating(true)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n            >\n              Erstes Team erstellen\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TimeAndVacationScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTeamId' is assigned a value but never used. Allowed unused elements of array destructuring patterns must match /^_/u.","line":31,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTeamId' is assigned a value but never used. Allowed unused elements of array destructuring patterns must match /^_/u.","line":31,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17725,17780],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import _React, { useState, useMemo, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '../state/auth';\nimport { useLeavesStore } from '../state/leaves';\nimport { useTimeRecordsStore } from '../state/timeRecords';\nimport { useTeamsStore } from '../state/teams';\nimport { useNotificationsStore } from '../state/notifications';\nimport { TeamCalendarView } from '../components/TeamCalendarView';\nimport { CalendarEntry } from '../types/calendar';\nimport { TimeRecord } from '../types';\nimport { format } from 'date-fns';\nimport { de } from 'date-fns/locale';\nimport { cn } from '../utils/cn';\n\n/**\n * Combined Time & Vacation Module\n * Unified calendar view showing work times, vacation days, and sick days\n * Includes status overview and application management\n */\nexport const TimeAndVacationScreen = () => {\n  const navigate = useNavigate();\n  const { user, getAllUsers } = useAuthStore();\n  const { _getAllLeaveRequests } = useLeavesStore();\n  const { _getUnreadNotificationsForUser, _markAsRead, _removeAllUserNotifications } = useNotificationsStore();\n  const { getTimeRecordsForPeriod, _getTodayRecord, _isCurrentlyTracking, _clockIn, _clockOut } = useTimeRecordsStore();\n  const { _getTeamsByUserId } = useTeamsStore();\n  \n  const [view, setView] = useState<'monat' | 'jahr'>('monat');\n  const [calendarType, setCalendarType] = useState<'mein' | 'team'>('mein');\n  const [requestsTab, setRequestsTab] = useState<'my' | 'manage'>('my');\n  const [selectedTeamId, setSelectedTeamId] = useState<string>('user');\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showDetailModal, setShowDetailModal] = useState(false);\n  const [selectedDay, setSelectedDay] = useState<Date | null>(null);\n\n  const allLeaves = getAllLeaveRequests();\n  const isTracking = user ? isCurrentlyTracking(user.id) : false;\n  const todayRecord = user ? getTodayRecord(user.id) : null;\n  const unreadNotifications = user ? getUnreadNotificationsForUser(user.id) : [];\n  const isAdmin = user?.role === 'ADMIN' || user?.role === 'SUPERADMIN';\n\n  // Update current time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Get users to display based on calendar type\n  const displayUsers = useMemo(() => {\n    if (!user) return [];\n    \n    if (calendarType === 'mein') {\n      // Show only current user\n      return [{\n        userId: user.id,\n        userName: user.name\n      }];\n    } else {\n      // Show all users in the organization\n      const allUsers = getAllUsers();\n      return allUsers\n        .filter(u => u.organizationId === user.organizationId)\n        .map(u => ({\n          userId: u.id,\n          userName: u.name\n        }));\n    }\n  }, [user, getAllUsers, calendarType]);\n\n  /**\n   * Get vacation statistics for current user\n   */\n  const getVacationStats = () => {\n    if (!user) return { total: 0, used: 0, remaining: 0 };\n    \n    const currentYear = new Date().getFullYear();\n    const approvedVacations = allLeaves.filter(leave =>\n      leave.userId === user.id &&\n      leave.type === 'VACATION' &&\n      leave.status === 'APPROVED' &&\n      new Date(leave.startDate).getFullYear() === currentYear\n    );\n    \n    const usedDays = approvedVacations.reduce((total, leave) => {\n      const start = new Date(leave.startDate);\n      const end = new Date(leave.endDate);\n      const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n      return total + days;\n    }, 0);\n    \n    const totalDays = user.vacationDays || 30;\n    \n    return {\n      total: totalDays,\n      used: usedDays,\n      remaining: Math.max(0, totalDays - usedDays)\n    };\n  };\n\n  // Convert leave requests and time records to calendar entries\n  const calendarEntries = useMemo(() => {\n    if (!user || displayUsers.length === 0) return [];\n    \n    const entries: CalendarEntry[] = [];\n    const today = new Date();\n    const currentMonth = today.getMonth();\n    const currentYear = today.getFullYear();\n    const startDateStr = new Date(currentYear, currentMonth - 1, 1).toISOString().split('T')[0];\n    const endDateStr = new Date(currentYear, currentMonth + 2, 0).toISOString().split('T')[0];\n    \n    const isAdmin = user.role === 'ADMIN' || user.role === 'SUPERADMIN';\n    \n    // Process each user\n    displayUsers.forEach(displayUser => {\n      // Add leave requests for this user\n      allLeaves\n        .filter(leave => leave.userId === displayUser.userId)\n        .forEach(request => {\n          // Only show vacation (green) and sick leave (blue)\n          if (request.type === 'VACATION' || request.type === 'SICK') {\n            const start = new Date(request.startDate);\n            const end = new Date(request.endDate);\n            \n            for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n              entries.push({\n                userId: request.userId,\n                userName: displayUser.userName,\n                date: format(date, 'yyyy-MM-dd'),\n                type: request.type === 'VACATION' ? 'urlaub' : 'krank',\n                status: request.status.toLowerCase() as 'beantragt' | 'genehmigt' | 'abgelehnt'\n              });\n            }\n          }\n        });\n      \n      // Add time records - only for \"Mein Kalender\" or if user is admin in \"Teamkalender\"\n      const shouldShowWorkTime = calendarType === 'mein' || (calendarType === 'team' && isAdmin);\n      \n      if (shouldShowWorkTime) {\n        const timeRecords = getTimeRecordsForPeriod(displayUser.userId, startDateStr, endDateStr);\n        timeRecords.forEach((record: TimeRecord) => {\n          if (record.totalHours) {\n            entries.push({\n              userId: record.userId,\n              userName: displayUser.userName,\n              date: record.date,\n              type: 'zeit',\n              stunden: record.totalHours\n            });\n          }\n        });\n      }\n    });\n\n    return entries;\n  }, [user, displayUsers, allLeaves, getTimeRecordsForPeriod, calendarType]);\n\n  // Handle cell click for calendar\n  const handleCellClick = (_userId: string, date: string) => {\n    // Open detail modal for work time entries\n    const clickedDate = new Date(date);\n    const dateStr = date;\n    const timeRecord = getTimeRecordsForPeriod(userId, dateStr, dateStr)[0];\n    \n    if (timeRecord && timeRecord.totalHours > 0) {\n      setSelectedDay(clickedDate);\n      setShowDetailModal(true);\n    }\n  };\n\n  /**\n   * Clock in/out handlers\n   */\n  const handleClockIn = async () => {\n    if (!user) return;\n    \n    try {\n      setError('');\n      await clockIn(user.id);\n      setSuccess('Erfolgreich eingestempelt!');\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Fehler beim Einstempeln');\n    }\n  };\n\n  const handleClockOut = async () => {\n    if (!user) return;\n    \n    try {\n      setError('');\n      await clockOut(user.id, 30);\n      setSuccess('Erfolgreich ausgestempelt!');\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Fehler beim Ausstempeln');\n    }\n  };\n\n  const vacationStats = getVacationStats();\n\n  /**\n   * Check if a leave request has unread notifications\n   */\n  const hasUnreadNotification = (leaveRequestId: string): boolean => {\n    return unreadNotifications.some(notification => \n      notification.relatedId === leaveRequestId && \n      (notification.type === 'leave_approved' || notification.type === 'leave_rejected')\n    );\n  };\n\n  /**\n   * Get user name by ID\n   */\n  const getUserName = (userId: string): string => {\n    const allUsers = getAllUsers();\n    const foundUser = allUsers.find(u => u.id === userId);\n    return foundUser?.name || 'Unbekannt';\n  };\n\n  /**\n   * Handle click on leave request - mark related notifications as read\n   */\n  const handleLeaveRequestClick = (_leaveRequestId: string) => {\n    // Mark all related notifications as read\n    unreadNotifications.forEach(notification => {\n      if (notification.relatedId === leaveRequestId && \n          (notification.type === 'leave_approved' || notification.type === 'leave_rejected')) {\n        markAsRead(notification.id);\n      }\n    });\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"flex-1 px-4 py-6 overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Zeit & Urlaub</h1>\n          \n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => navigate('/request-leave')}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n            >\n              + Neue Abwesenheit\n            </button>\n          </div>\n        </div>\n\n        {/* Status Overview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n          {/* User Info */}\n          <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Meine Daten</h3>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Beschäftigungsart:</span>\n                <span className=\"font-medium\">Vollzeit</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Wochenstunden:</span>\n                <span className=\"font-medium\">40h</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Urlaubstage/Jahr:</span>\n                <span className=\"font-medium\">{vacationStats.total}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Vacation Stats */}\n          <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Urlaubsübersicht {new Date().getFullYear()}\n            </h3>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">{vacationStats.remaining}</p>\n                <p className=\"text-xs text-gray-500\">Verfügbar</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-red-600\">{vacationStats.used}</p>\n                <p className=\"text-xs text-gray-500\">Genommen</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-blue-600\">{vacationStats.total}</p>\n                <p className=\"text-xs text-gray-500\">Gesamt</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Today's Time Tracking */}\n          <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Heute</h3>\n            <div className=\"space-y-3\">\n              <div className=\"text-center\">\n                <p className=\"text-lg font-mono font-bold text-gray-900\">\n                  {format(currentTime, 'HH:mm:ss')}\n                </p>\n                <p className=\"text-sm text-gray-500\">Aktuelle Zeit</p>\n              </div>\n              \n              {todayRecord && (\n                <div className=\"text-sm\">\n                  <p className=\"text-gray-600\">Heute gestempelt:</p>\n                  <p className=\"font-mono\">\n                    {todayRecord.timeIn} {todayRecord.timeOut ? `– ${todayRecord.timeOut}` : '– läuft'}\n                  </p>\n                  {todayRecord.totalHours > 0 && (\n                    <p className=\"text-gray-600\">Arbeitszeit: {todayRecord.totalHours.toFixed(1)}h</p>\n                  )}\n                </div>\n              )}\n\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={handleClockIn}\n                  disabled={isTracking}\n                  className={cn(\n                    \"flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-colors\",\n                    isTracking \n                      ? \"bg-gray-100 text-gray-400 cursor-not-allowed\"\n                      : \"bg-green-600 text-white hover:bg-green-700\"\n                  )}\n                >\n                  Einstempeln\n                </button>\n                <button\n                  onClick={handleClockOut}\n                  disabled={!isTracking}\n                  className={cn(\n                    \"flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-colors\",\n                    !isTracking \n                      ? \"bg-gray-100 text-gray-400 cursor-not-allowed\"\n                      : \"bg-red-600 text-white hover:bg-red-700\"\n                  )}\n                >\n                  Ausstempeln\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Messages */}\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg\">\n            {error}\n          </div>\n        )}\n        {success && (\n          <div className=\"mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded-lg\">\n            {success}\n          </div>\n        )}\n\n        {/* Team Calendar - Timebutler Style */}\n        <div className=\"bg-white rounded-xl p-6 shadow-sm mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              {calendarType === 'mein' ? 'Mein Kalender' : 'Team Kalender'}\n            </h3>\n            \n            <div className=\"flex items-center gap-4\">\n              {/* Calendar Type Toggle */}\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={() => setCalendarType('mein')}\n                  className={cn(\n                    \"px-3 py-1.5 rounded-lg font-medium transition-colors text-sm\",\n                    calendarType === 'mein' \n                      ? \"bg-green-600 text-white\" \n                      : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                  )}\n                >\n                  Mein Kalender\n                </button>\n                <button\n                  onClick={() => setCalendarType('team')}\n                  className={cn(\n                    \"px-3 py-1.5 rounded-lg font-medium transition-colors text-sm\",\n                    calendarType === 'team' \n                      ? \"bg-green-600 text-white\" \n                      : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                  )}\n                >\n                  Team Kalender\n                </button>\n              </div>\n              \n              {/* View Toggle */}\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={() => setView('monat')}\n                  className={cn(\n                    \"px-3 py-1.5 rounded-lg font-medium transition-colors text-sm\",\n                    view === 'monat' \n                      ? \"bg-blue-600 text-white\" \n                      : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                  )}\n                >\n                  Monat\n                </button>\n                <button\n                  onClick={() => setView('jahr')}\n                  className={cn(\n                    \"px-3 py-1.5 rounded-lg font-medium transition-colors text-sm\",\n                    view === 'jahr' \n                      ? \"bg-blue-600 text-white\" \n                      : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                  )}\n                >\n                  Jahr\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Team Calendar Component */}\n          <TeamCalendarView\n            view={view}\n            entries={calendarEntries}\n            users={displayUsers}\n            onCellClick={handleCellClick}\n            isAdmin={false}\n            showLegend={false}\n          />\n          \n          {/* Custom Legend - Only 3 Categories */}\n          <div className=\"mt-4 flex justify-center gap-6 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: \"#22c55e\" }}></div>\n              <span>Urlaub</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: \"#3b82f6\" }}></div>\n              <span>Krankheit</span>\n            </div>\n            {((calendarType === 'mein') || (calendarType === 'team' && (user.role === 'ADMIN' || user.role === 'SUPERADMIN'))) && (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: \"#9ca3af\" }}></div>\n                <span>Arbeitszeit</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Applications Management */}\n        <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Abwesenheiten</h3>\n            <div className=\"flex items-center gap-3\">\n              {/* Debug Button - temporär zum Testen */}\n              <button\n                onClick={() => {\n                  console.log('Lösche Notifications für User:', user.id);\n                  removeAllUserNotifications(user.id);\n                }}\n                className=\"bg-red-100 hover:bg-red-200 text-red-700 px-3 py-2 rounded-lg text-sm font-medium transition-colors\"\n              >\n                🗑️ Debug: Notifications löschen\n              </button>\n            </div>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"flex bg-gray-100 rounded-lg p-1 mb-4\">\n            <button\n              onClick={() => setRequestsTab('my')}\n              className={cn(\n                \"flex-1 py-2 px-3 rounded-md transition-colors text-sm font-medium\",\n                requestsTab === 'my' \n                  ? \"bg-white text-gray-900 shadow-sm\" \n                  : \"text-gray-600 hover:text-gray-900\"\n              )}\n            >\n              Meine Abwesenheiten\n            </button>\n            {isAdmin && (\n              <button\n                onClick={() => setRequestsTab('manage')}\n                className={cn(\n                  \"flex-1 py-2 px-3 rounded-md transition-colors text-sm font-medium\",\n                  requestsTab === 'manage' \n                    ? \"bg-white text-gray-900 shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                )}\n              >\n                Abwesenheiten verwalten\n              </button>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            {(requestsTab === 'my' ? \n              allLeaves.filter(leave => leave.userId === user.id) :\n              allLeaves\n            )\n              .sort((a, b) => new Date(b.createdAt || '').getTime() - new Date(a.createdAt || '').getTime())\n              .slice(0, 8)\n              .map(leave => {\n                const start = new Date(leave.startDate);\n                const end = new Date(leave.endDate);\n                const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                const hasNotification = hasUnreadNotification(leave.id);\n\n                return (\n                  <div \n                    key={leave.id} \n                    className={cn(\n                      \"p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors relative\",\n                      hasNotification && \"bg-blue-50 border-blue-200\"\n                    )}\n                    onClick={() => handleLeaveRequestClick(leave.id)}\n                  >\n                    {/* Notification Indicator */}\n                    {hasNotification && (\n                      <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></div>\n                    )}\n                    \n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3\">\n                        <span className=\"text-2xl\">\n                          {leave.type === 'VACATION' ? '🏖️' : '🏥'}\n                        </span>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <p className=\"font-semibold text-gray-900\">\n                              {requestsTab === 'manage' ? `${getUserName(leave.userId)} - ` : ''}\n                              {leave.type === 'VACATION' ? 'Urlaub' : 'Krankheit'}\n                            </p>\n                            {hasNotification && (\n                              <span className=\"text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded\">\n                                🔔 Neu\n                              </span>\n                            )}\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-600 mb-2\">\n                            {format(start, 'dd.MM.yyyy')} - {format(end, 'dd.MM.yyyy')} ({days} Tag{days !== 1 ? 'e' : ''})\n                          </p>\n                          \n                          {leave.comment && (\n                            <p className=\"text-sm text-gray-600 italic mb-2\">\"{leave.comment}\"</p>\n                          )}\n                          \n                          <div className=\"text-xs text-gray-500 space-y-1\">\n                            <p>Erstellt: {format(new Date(leave.createdAt), 'dd.MM.yyyy HH:mm')} von {getUserName(leave.userId)}</p>\n                            {leave.approvedAt && leave.approvedBy && (\n                              <p>\n                                {leave.status === 'APPROVED' ? 'Genehmigt' : 'Abgelehnt'}: {format(new Date(leave.approvedAt), 'dd.MM.yyyy HH:mm')} von {getUserName(leave.approvedBy)}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <span className={cn(\n                        \"px-3 py-1 rounded-full text-xs font-medium\",\n                        leave.status === 'APPROVED' ? 'bg-green-100 text-green-800' :\n                        leave.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      )}>\n                        {leave.status === 'APPROVED' ? 'Genehmigt' :\n                         leave.status === 'PENDING' ? 'Ausstehend' : 'Abgelehnt'}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n          \n            {(requestsTab === 'my' ? \n              allLeaves.filter(leave => leave.userId === user.id) :\n              allLeaves\n            ).length === 0 && (\n              <p className=\"text-gray-500 text-center py-4\">\n                Noch keine Abwesenheiten vorhanden\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Detail Modal for Work Time */}\n        {showDetailModal && selectedDay && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white rounded-xl p-6 max-w-md w-full\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">\n                  Arbeitszeit - {format(selectedDay, 'dd.MM.yyyy', { locale: de })}\n                </h3>\n                <button\n                  onClick={() => setShowDetailModal(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  ✕\n                </button>\n              </div>\n              \n              {(() => {\n                const dateStr = format(selectedDay, 'yyyy-MM-dd');\n                const timeRecord = getTimeRecordsForPeriod(user!.id, dateStr, dateStr)[0];\n                \n                if (!timeRecord) {\n                  return (\n                    <p className=\"text-gray-500 text-center py-4\">\n                      Keine Arbeitszeit für diesen Tag gefunden\n                    </p>\n                  );\n                }\n\n                return (\n                  <div className=\"space-y-4\">\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-gray-600\">Arbeitsbeginn:</span>\n                          <p className=\"font-mono font-medium\">{timeRecord.timeIn}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Arbeitsende:</span>\n                          <p className=\"font-mono font-medium\">{timeRecord.timeOut || 'läuft'}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Pause:</span>\n                          <p className=\"font-mono font-medium\">{timeRecord.breakMinutes}min</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Gesamtzeit:</span>\n                          <p className=\"font-mono font-medium\">{timeRecord.totalHours.toFixed(1)}h</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <span className={cn(\n                        \"inline-block px-3 py-1 rounded-full text-sm font-medium\",\n                        timeRecord.totalHours >= 8 ? \"bg-green-100 text-green-800\" :\n                        timeRecord.totalHours >= 6 ? \"bg-yellow-100 text-yellow-800\" :\n                        \"bg-red-100 text-red-800\"\n                      )}>\n                        {timeRecord.totalHours >= 8 ? \"Vollzeit erreicht\" :\n                         timeRecord.totalHours >= 6 ? \"Teilzeit\" : \"Unterzeit\"}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })()}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TimeRecordsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TrainingDetailsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TrainingManagementScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/TrainingOverviewScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/VideoLearningScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addXP' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1023,1026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1023,1026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useLearningStore } from '../state/learning';\nimport { useAuthStore } from '../state/auth';\nimport { VideoPlayer } from '../components/VideoPlayer';\nimport { Quiz } from '../components/Quiz';\nimport { LootboxAnimation, CelebrationOverlay } from '../components/LootboxAnimation';\nimport { TestResult } from '../types/learning';\nimport { cn } from '../utils/cn';\n\nexport const VideoLearningScreen = () => {\n  const { videoId } = useParams<{ videoId: string }>();\n  const navigate = useNavigate();\n  const { user } = useAuthStore();\n  const { \n    videos, \n    currentVideo, \n    selectVideo, \n    userProgress,\n    getVideoQuestions,\n    userLevel,\n    userCoins,\n    addXP,\n    awardBadge\n  } = useLearningStore();\n\n  const [stage, setStage] = useState<'video' | 'quiz' | 'completed'>('video');\n  const [showRewards, setShowRewards] = useState(false);\n  const [earnedRewards, setEarnedRewards] = useState<any[]>([]);\n  const [showCelebration, setCelebration] = useState(false);\n\n  useEffect(() => {\n    if (videoId) {\n      selectVideo(videoId);\n    }\n  }, [videoId, selectVideo]);\n\n  useEffect(() => {\n    // Check if video is completed and determine next stage\n    if (currentVideo && user) {\n      const progress = userProgress[currentVideo.id];\n      const questions = getVideoQuestions(currentVideo.id);\n      \n      if (progress?.completed && questions.length > 0 && stage === 'video') {\n        setStage('quiz');\n      }\n    }\n  }, [currentVideo, user, userProgress, stage, getVideoQuestions]);\n\n  const video = currentVideo || videos.find(v => v.id === videoId);\n  \n  if (!video) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Video nicht gefunden</h1>\n          <p className=\"text-gray-600 mb-4\">Das angeforderte Video existiert nicht.</p>\n          <button\n            onClick={() => navigate('/learning')}\n            className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            Zurück zur Übersicht\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const questions = getVideoQuestions(video.id);\n  const progress = user ? userProgress[video.id] : null;\n  const isVideoCompleted = progress?.completed || false;\n  const hasQuestions = questions.length > 0;\n\n  const handleVideoComplete = () => {\n    const rewards = [\n      { type: 'xp', value: 50, description: 'Video abgeschlossen', icon: '⭐' },\n      { type: 'coins', value: 10, description: 'BrowoCoins', icon: '🪙' }\n    ];\n\n    // Check for early bird badge (before 8 AM)\n    const currentHour = new Date().getHours();\n    if (currentHour < 8) {\n      awardBadge('early-bird');\n      rewards.push({\n        type: 'badge',\n        value: 100,\n        description: 'Frühaufsteher Badge',\n        icon: '🌅'\n      });\n    }\n\n    setEarnedRewards(rewards);\n    \n    if (hasQuestions) {\n      setStage('quiz');\n    } else {\n      setStage('completed');\n      setShowRewards(true);\n    }\n  };\n\n  const handleQuizComplete = (result: TestResult) => {\n    const baseRewards = [\n      { type: 'xp', value: result.earnedXP, description: `${result.earnedXP} XP`, icon: '⭐' },\n      { type: 'coins', value: result.earnedCoins, description: `${result.earnedCoins} BrowoCoins`, icon: '🪙' }\n    ];\n\n    // Perfect score bonus\n    if (result.score === 100) {\n      baseRewards.push({\n        type: 'badge',\n        value: 150,\n        description: 'Perfektionist Badge',\n        icon: '🎯'\n      });\n      baseRewards.push({\n        type: 'coins',\n        value: 50,\n        description: 'Perfektion Bonus',\n        icon: '🪙'\n      });\n    }\n\n    setEarnedRewards([...earnedRewards, ...baseRewards]);\n    setStage('completed');\n    setShowRewards(true);\n  };\n\n  const handleRewardsComplete = () => {\n    setShowRewards(false);\n    setCelebration(true);\n  };\n\n  const handleCelebrationComplete = () => {\n    setCelebration(false);\n    // Navigate back to learning dashboard\n    navigate('/learning');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-black bg-opacity-50 text-white p-4\">\n        <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={() => navigate('/learning')}\n              className=\"text-gray-300 hover:text-white transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <div>\n              <h1 className=\"text-xl font-bold\">{video.title}</h1>\n              <p className=\"text-gray-300 text-sm\">{video.description}</p>\n            </div>\n          </div>\n\n          {/* Progress Indicator */}\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-yellow-400\">🪙</span>\n              <span className=\"font-bold\">{userCoins}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-purple-400\">⭐</span>\n              <span className=\"font-bold\">{userLevel?.xp || 0}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stage Indicator */}\n      <div className=\"bg-gray-800 p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-center gap-8\">\n            <div className={cn(\n              \"flex items-center gap-2 px-4 py-2 rounded-full transition-colors\",\n              stage === 'video' \n                ? \"bg-blue-600 text-white\" \n                : isVideoCompleted\n                ? \"bg-green-600 text-white\"\n                : \"bg-gray-600 text-gray-300\"\n            )}>\n              <span>{isVideoCompleted ? '✓' : '▶️'}</span>\n              <span>Video ansehen</span>\n            </div>\n\n            {hasQuestions && (\n              <>\n                <div className=\"w-8 h-0.5 bg-gray-600\" />\n                <div className={cn(\n                  \"flex items-center gap-2 px-4 py-2 rounded-full transition-colors\",\n                  stage === 'quiz'\n                    ? \"bg-blue-600 text-white\"\n                    : stage === 'completed'\n                    ? \"bg-green-600 text-white\"\n                    : \"bg-gray-600 text-gray-300\"\n                )}>\n                  <span>{stage === 'completed' ? '✓' : '📝'}</span>\n                  <span>Quiz</span>\n                </div>\n              </>\n            )}\n\n            <div className=\"w-8 h-0.5 bg-gray-600\" />\n            <div className={cn(\n              \"flex items-center gap-2 px-4 py-2 rounded-full transition-colors\",\n              stage === 'completed'\n                ? \"bg-green-600 text-white\"\n                : \"bg-gray-600 text-gray-300\"\n            )}>\n              <span>{stage === 'completed' ? '🏆' : '🎁'}</span>\n              <span>Belohnung</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto p-6\">\n        {stage === 'video' && (\n          <div className=\"space-y-6\">\n            <VideoPlayer video={video} onComplete={handleVideoComplete} />\n            \n            {/* Video Info */}\n            <div className=\"bg-gray-800 rounded-xl p-6 text-white\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold mb-2\">{video.title}</h2>\n                  <p className=\"text-gray-300 mb-4\">{video.description}</p>\n                  \n                  <div className=\"flex items-center gap-6 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <span>⏱️</span>\n                      <span>{Math.floor(video.duration / 60)} Minuten</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span>🎯</span>\n                      <span>+50 XP</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span>🪙</span>\n                      <span>+10 Münzen</span>\n                    </div>\n                    {hasQuestions && (\n                      <div className=\"flex items-center gap-2\">\n                        <span>📝</span>\n                        <span>{questions.length} Fragen</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Progress */}\n                {progress && (\n                  <div className=\"ml-6\">\n                    <div className=\"text-right mb-2\">\n                      <span className=\"text-sm text-gray-400\">Fortschritt</span>\n                      <div className=\"text-xl font-bold\">\n                        {Math.round((progress.watchedSeconds / video.duration) * 100)}%\n                      </div>\n                    </div>\n                    <div className=\"w-24 bg-gray-700 rounded-full h-2\">\n                      <div\n                        className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${(progress.watchedSeconds / video.duration) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Transcript (if available) */}\n            {video.transcription && (\n              <div className=\"bg-gray-800 rounded-xl p-6 text-white\">\n                <h3 className=\"text-lg font-bold mb-4\">📄 Vollständige Transkription</h3>\n                <div className=\"max-h-48 overflow-y-auto text-gray-300 leading-relaxed\">\n                  {video.transcription.text}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {stage === 'quiz' && hasQuestions && (\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-gray-800 rounded-xl p-6 text-white mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">📝 Wissenstest</h2>\n              <p className=\"text-gray-300\">\n                Teste dein Wissen über das Video und sammle zusätzliche Belohnungen!\n              </p>\n            </div>\n            <Quiz\n              videoId={video.id}\n              questions={questions}\n              onComplete={handleQuizComplete}\n            />\n          </div>\n        )}\n\n        {stage === 'completed' && (\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <div className=\"bg-gradient-to-br from-green-500 to-blue-600 rounded-2xl p-8 text-white\">\n              <div className=\"text-6xl mb-4\">🎉</div>\n              <h2 className=\"text-3xl font-bold mb-2\">Herzlichen Glückwunsch!</h2>\n              <p className=\"text-xl mb-6\">\n                Du hast die Schulung \"{video.title}\" erfolgreich abgeschlossen!\n              </p>\n\n              {/* Summary */}\n              <div className=\"bg-white bg-opacity-20 rounded-xl p-6 mb-6\">\n                <h3 className=\"text-lg font-bold mb-4\">Deine Leistung</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold\">100%</div>\n                    <div className=\"text-sm opacity-90\">Video angesehen</div>\n                  </div>\n                  {hasQuestions && (\n                    <div>\n                      <div className=\"text-2xl font-bold\">\n                        {Math.round(earnedRewards.find(r => r.type === 'quiz-score')?.value || 0)}%\n                      </div>\n                      <div className=\"text-sm opacity-90\">Quiz-Ergebnis</div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <button\n                onClick={() => navigate('/learning')}\n                className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-bold hover:bg-gray-100 transition-colors\"\n              >\n                Weiter lernen\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Reward Animations */}\n      {showRewards && earnedRewards.length > 0 && (\n        <LootboxAnimation\n          reward={earnedRewards[0]}\n          onComplete={handleRewardsComplete}\n          autoStart\n        />\n      )}\n\n      {showCelebration && (\n        <CelebrationOverlay\n          message=\"Schulung abgeschlossen!\"\n          icon=\"🎓\"\n          color=\"from-purple-400 to-blue-500\"\n          onComplete={handleCelebrationComplete}\n        />\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/screens/__tests__/AddEmployeeScreen.test.tsx","messages":[{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":54,"column":7,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":54,"endColumn":80},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":55,"column":7,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":55,"endColumn":81},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":56,"column":7,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":56,"endColumn":81},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":57,"column":7,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":57,"endColumn":82},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":134,"column":7,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":139,"endColumn":10}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '../../test-utils/test-utils';\nimport { AddEmployeeScreen } from '../AddEmployeeScreen';\nimport { useAuthStore } from '../../state/auth';\nimport { mockAdmin } from '../../test-utils/test-utils';\n\n// Mock useNavigate\nconst mockNavigate = jest.fn();\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n}));\n\ndescribe('AddEmployeeScreen', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockNavigate.mockClear();\n    \n    // Set admin user\n    useAuthStore.setState({\n      user: mockAdmin,\n      isAuthenticated: true,\n      organization: { id: 'org1', name: 'Test Org', slug: 'test-org' },\n    });\n  });\n\n  it('should render the form with all required fields', () => {\n    render(<AddEmployeeScreen />);\n    \n    // Check header\n    expect(screen.getByText('Neuen Mitarbeiter hinzufügen')).toBeInTheDocument();\n    \n    // Check required fields\n    expect(screen.getByLabelText(/E-Mail-Adresse \\*/)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Vorname \\*/)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Nachname \\*/)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Position \\*/)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Abteilung \\*/)).toBeInTheDocument();\n    \n    // Check optional fields\n    expect(screen.getByLabelText('Private E-Mail')).toBeInTheDocument();\n    expect(screen.getByLabelText('Telefon')).toBeInTheDocument();\n    expect(screen.getByLabelText('Wochenstunden')).toBeInTheDocument();\n  });\n\n  it('should show validation errors for empty required fields', async () => {\n    render(<AddEmployeeScreen />);\n    \n    const submitButton = screen.getByText('Mitarbeiter erstellen');\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('E-Mail ist erforderlich')).toBeInTheDocument();\n      expect(screen.getByText('Vorname ist erforderlich')).toBeInTheDocument();\n      expect(screen.getByText('Nachname ist erforderlich')).toBeInTheDocument();\n      expect(screen.getByText('Position ist erforderlich')).toBeInTheDocument();\n      expect(screen.getByText('Abteilung ist erforderlich')).toBeInTheDocument();\n    });\n  });\n\n  it('should validate email format', async () => {\n    render(<AddEmployeeScreen />);\n    \n    const emailInput = screen.getByLabelText(/E-Mail-Adresse \\*/);\n    fireEvent.change(emailInput, { target: { value: 'invalid-email' } });\n    \n    const submitButton = screen.getByText('Mitarbeiter erstellen');\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Ungültige E-Mail-Adresse')).toBeInTheDocument();\n    });\n  });\n\n  it('should validate weekly hours range', async () => {\n    render(<AddEmployeeScreen />);\n    \n    const hoursInput = screen.getByLabelText('Wochenstunden');\n    fireEvent.change(hoursInput, { target: { value: '100' } });\n    \n    const submitButton = screen.getByText('Mitarbeiter erstellen');\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Wochenstunden müssen zwischen 1 und 60 liegen')).toBeInTheDocument();\n    });\n  });\n\n  it('should successfully create a new employee', async () => {\n    const mockCreateUser = jest.fn().mockResolvedValue({\n      id: 'new-user-id',\n      email: 'new@example.com',\n      name: 'New Employee',\n    });\n    \n    useAuthStore.setState({\n      createUser: mockCreateUser,\n    });\n\n    render(<AddEmployeeScreen />);\n    \n    // Fill in required fields\n    fireEvent.change(screen.getByLabelText(/E-Mail-Adresse \\*/), {\n      target: { value: 'new@example.com' },\n    });\n    fireEvent.change(screen.getByLabelText(/Vorname \\*/), {\n      target: { value: 'New' },\n    });\n    fireEvent.change(screen.getByLabelText(/Nachname \\*/), {\n      target: { value: 'Employee' },\n    });\n    fireEvent.change(screen.getByLabelText(/Position \\*/), {\n      target: { value: 'Developer' },\n    });\n    fireEvent.change(screen.getByLabelText(/Abteilung \\*/), {\n      target: { value: 'IT' },\n    });\n    \n    const submitButton = screen.getByText('Mitarbeiter erstellen');\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(mockCreateUser).toHaveBeenCalledWith(\n        expect.objectContaining({\n          email: 'new@example.com',\n          firstName: 'New',\n          lastName: 'Employee',\n          name: 'New Employee',\n          position: 'Developer',\n          department: 'IT',\n        })\n      );\n      \n      expect(mockNavigate).toHaveBeenCalledWith('/admin/team-management', {\n        state: {\n          message: 'Mitarbeiter New Employee wurde erfolgreich erstellt.',\n          type: 'success',\n        },\n      });\n    });\n  });\n\n  it('should handle cancel button', () => {\n    render(<AddEmployeeScreen />);\n    \n    const cancelButton = screen.getByText('Abbrechen');\n    fireEvent.click(cancelButton);\n    \n    expect(mockNavigate).toHaveBeenCalledWith('/admin/team-management');\n  });\n\n  it('should show loading state during submission', async () => {\n    const mockCreateUser = jest.fn().mockImplementation(() => \n      new Promise(resolve => setTimeout(resolve, 1000))\n    );\n    \n    useAuthStore.setState({\n      createUser: mockCreateUser,\n      isLoading: true,\n    });\n\n    render(<AddEmployeeScreen />);\n    \n    const submitButton = screen.getByText('Erstelle Mitarbeiter...');\n    expect(submitButton).toBeDisabled();\n  });\n\n  it('should handle API errors gracefully', async () => {\n    const mockCreateUser = jest.fn().mockRejectedValue(new Error('API Error'));\n    \n    useAuthStore.setState({\n      createUser: mockCreateUser,\n    });\n\n    render(<AddEmployeeScreen />);\n    \n    // Fill in minimum required fields\n    fireEvent.change(screen.getByLabelText(/E-Mail-Adresse \\*/), {\n      target: { value: 'test@example.com' },\n    });\n    fireEvent.change(screen.getByLabelText(/Vorname \\*/), {\n      target: { value: 'Test' },\n    });\n    fireEvent.change(screen.getByLabelText(/Nachname \\*/), {\n      target: { value: 'User' },\n    });\n    fireEvent.change(screen.getByLabelText(/Position \\*/), {\n      target: { value: 'Tester' },\n    });\n    fireEvent.change(screen.getByLabelText(/Abteilung \\*/), {\n      target: { value: 'QA' },\n    });\n    \n    const submitButton = screen.getByText('Mitarbeiter erstellen');\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Fehler beim Erstellen des Mitarbeiters. Bitte versuchen Sie es erneut.')).toBeInTheDocument();\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/setupTests.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[820,823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[820,823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nglobal.localStorage = localStorageMock as any;\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/__tests__/auth.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/achievements.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":55,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { \n  Achievement, \n  UserAchievement, \n  AchievementCondition,\n  ProgressTracker,\n  PREDEFINED_ACHIEVEMENTS\n} from '../types/gamification';\nimport { useAvatarStore } from './avatar';\nimport { useNotificationsStore } from './notifications';\n\ninterface AchievementsState {\n  // Achievement system data\n  achievements: Achievement[];\n  userProgress: Record<string, ProgressTracker>;\n  \n  // Actions\n  getAchievements: () => Achievement[];\n  getUserAchievements: (_userId: string) => UserAchievement[];\n  getUnlockedAchievements: (_userId: string) => Achievement[];\n  getLockedAchievements: (_userId: string) => Achievement[];\n  \n  // Progress tracking\n  updateProgress: (_userId: string, _eventType: string, _value: number, _metadata?: Record<string, any>) => void;\n  checkAchievements: (_userId: string) => UserAchievement[];\n  unlockAchievement: (_userId: string, _achievementId: string) => void;\n  \n  // Admin functions\n  addAchievement: (achievement: Omit<Achievement, 'id'>) => void;\n  updateAchievement: (_achievementId: string, _updates: Partial<Achievement>) => void;\n  deleteAchievement: (_achievementId: string) => void;\n  \n  // Statistics\n  getProgressStats: (_userId: string) => {\n    totalAchievements: number;\n    unlockedAchievements: number;\n    completionRate: number;\n    recentUnlocks: UserAchievement[];\n  };\n  \n  // Additional methods\n  createAchievement: (achievement: Achievement) => void;\n  toggleAchievementActive: (_achievementId: string) => void;\n  getAchievementStats: (_achievementId: string) => { unlockedCount: number };\n  checkCondition: (_userId: string, condition: AchievementCondition, userProgress: ProgressTracker) => boolean;\n  getTotalTrainingsCompleted: (_userId: string) => number;\n  getTotalPunctualDays: (_userId: string) => number;\n  getTotalCoinsEarned: (_userId: string) => number;\n  getTotalFeedbackGiven: (_userId: string) => number;\n}\n\nexport const useAchievementsStore = create<AchievementsState>()(\n  persist(\n    (set, get) => (_{\n      achievements: PREDEFINED_ACHIEVEMENTS.map((achievement, index) => ({\n        id: `predefined-${index}`,\n        name: achievement.name,\n        description: achievement.description,\n        icon: achievement.icon,\n        category: achievement.category,\n        rarity: achievement.rarity,\n        conditions: achievement.conditions.map(c => ({\n          type: c.type as any,\n          target: c.target,\n          operator: c.operator as any,\n          timeframe: c.timeframe\n        })),\n        xpReward: achievement.rewards ? (achievement.rewards as unknown as any[]).find(_(r: any) => r.type === 'xp')?.value as number || 50 : 50,\n        rewards: achievement.rewards ? [...achievement.rewards] : undefined,\n        isActive: true,\n        isHidden: false,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      })),\n      userProgress: {},\n\n      getAchievements: () => get().achievements,\n\n      getUserAchievements: (_userId: string) => {\n        const avatarStore = useAvatarStore.getState();\n        const userAvatar = avatarStore.getUserAvatar(userId);\n        const achievements = get().achievements;\n        \n        if (!userAvatar?.achievements) return [];\n        \n        // Map user achievement IDs to full achievement objects\n        return userAvatar.achievements.map(ua => {\n          const achievement = achievements.find(a => a.id === ua.achievementId);\n          if (!achievement) return null;\n          \n          return {\n            id: `${userId}-${ua.achievementId}`,\n            userId,\n            achievementId: ua.achievementId,\n            progress: 100,\n            unlockedAt: ua.unlockedAt,\n            notified: ua.isNew !== true,\n            name: achievement.name,\n            description: achievement.description,\n            icon: achievement.icon,\n            rarity: achievement.rarity\n          };\n        }).filter(Boolean) as UserAchievement[];\n      },\n\n      getUnlockedAchievements: (_userId: string) => {\n        const userAchievements = get().getUserAchievements(userId);\n        const allAchievements = get().achievements;\n        \n        const unlockedIds = userAchievements.map(ua => ua.achievementId);\n        return allAchievements.filter(achievement => unlockedIds.includes(achievement.id));\n      },\n\n      getLockedAchievements: (_userId: string) => {\n        const userAchievements = get().getUserAchievements(userId);\n        const allAchievements = get().achievements;\n        \n        const unlockedIds = userAchievements.map(ua => ua.achievementId);\n        return allAchievements.filter(achievement => \n          !unlockedIds.includes(achievement.id) && achievement.isActive && !achievement.isHidden\n        );\n      },\n\n      updateProgress: (_userId: string, _eventType: string, _value: number, metadata = {}) => {\n        const now = new Date().toISOString();\n        const currentQuarter = `${new Date().getFullYear()}-Q${Math.ceil((new Date().getMonth() + 1) / 3)}`;\n        \n        set(state => {\n          const userProgress = state.userProgress[userId] || {\n            userId,\n            achievements: {},\n            dailyStreak: { current: 0, longest: 0, lastCheckin: '' },\n            quarterlyStats: {\n              quarter: currentQuarter,\n              coinsEarned: 0,\n              trainingsCompleted: 0,\n              punctualDays: 0,\n              feedbackGiven: 0\n            }\n          };\n\n          // Update quarterly stats based on event type\n          const quarterlyStats = { ...userProgress.quarterlyStats };\n          if (quarterlyStats.quarter !== currentQuarter) {\n            // Reset for new quarter\n            quarterlyStats.quarter = currentQuarter;\n            quarterlyStats.coinsEarned = 0;\n            quarterlyStats.trainingsCompleted = 0;\n            quarterlyStats.punctualDays = 0;\n            quarterlyStats.feedbackGiven = 0;\n          }\n\n          switch (eventType) {\n            case 'training_completed':\n              quarterlyStats.trainingsCompleted += value;\n              break;\n            case 'coins_earned':\n              quarterlyStats.coinsEarned += value;\n              break;\n            case 'punctual_checkin':\n              quarterlyStats.punctualDays += value;\n              // Update daily streak\n              const today = new Date().toISOString().split('T')[0];\n              const lastCheckin = userProgress.dailyStreak.lastCheckin;\n              const yesterday = new Date(Date.now() - 86400000).toISOString().split('T')[0];\n              \n              if (lastCheckin === yesterday) {\n                userProgress.dailyStreak.current += 1;\n              } else if (lastCheckin !== today) {\n                userProgress.dailyStreak.current = 1;\n              }\n              userProgress.dailyStreak.longest = Math.max(\n                userProgress.dailyStreak.longest,\n                userProgress.dailyStreak.current\n              );\n              userProgress.dailyStreak.lastCheckin = today;\n              break;\n            case 'feedback_given':\n              quarterlyStats.feedbackGiven += value;\n              break;\n          }\n\n          const updatedProgress = {\n            ...userProgress,\n            quarterlyStats\n          };\n\n          return {\n            userProgress: {\n              ...state.userProgress,\n              [userId]: updatedProgress\n            }\n          };\n        });\n\n        // Check for new achievements\n        get().checkAchievements(userId);\n      },\n\n      checkAchievements: (_userId: string) => {\n        const userAchievements = get().getUserAchievements(userId);\n        const unlockedIds = userAchievements.map(ua => ua.achievementId);\n        const lockedAchievements = get().achievements.filter(a => !unlockedIds.includes(a.id));\n        const userProgress = get().userProgress[userId];\n        const newUnlocks: UserAchievement[] = [];\n\n        if (!userProgress) return newUnlocks;\n\n        lockedAchievements.forEach(achievement => {\n          const isUnlocked = achievement.conditions.every(condition => {\n            return get().checkCondition(userId, condition, userProgress);\n          });\n\n          if (isUnlocked) {\n            const userAchievement = {\n              id: `${userId}-${achievement.id}`,\n              userId,\n              achievementId: achievement.id,\n              progress: 100,\n              unlockedAt: new Date().toISOString(),\n              notified: false,\n              name: achievement.name,\n              description: achievement.description,\n              icon: achievement.icon,\n              rarity: achievement.rarity\n            };\n            \n            newUnlocks.push(userAchievement);\n            get().unlockAchievement(userId, achievement.id);\n\n            // Add notification\n            const notificationsStore = useNotificationsStore.getState();\n            notificationsStore.addNotification({\n              userId,\n              type: 'general',\n              title: 'Achievement freigeschaltet!',\n              message: `Du hast \"${achievement.name}\" erreicht!`,\n              isRead: false,\n              relatedId: achievement.id\n            });\n\n            // Process rewards\n            if (achievement.rewards) {\n              const avatarStore = useAvatarStore.getState();\n              achievement.rewards.forEach(reward => {\n                switch (reward.type) {\n                  case 'xp':\n                    avatarStore.addXP(\n                      userId, \n                      null, \n                      Number(reward.value), \n                      `Achievement: ${achievement.name}`\n                    );\n                    break;\n                  case 'skill_xp':\n                    if (reward.skillId) {\n                      avatarStore.addXP(\n                        userId,\n                        reward.skillId,\n                        Number(reward.value),\n                        `Achievement: ${achievement.name}`\n                      );\n                    }\n                    break;\n                  case 'coins':\n                    // Add coins logic here when coins store is available\n                    break;\n                }\n              });\n            }\n          }\n        });\n\n        return newUnlocks;\n      },\n\n\n      // Helper functions for getting total values (these would integrate with other stores)\n      getTotalTrainingsCompleted: (_userId: string) => {\n        // This would integrate with training store\n        return 0;\n      },\n\n      getTotalPunctualDays: (_userId: string) => {\n        // This would integrate with time records store  \n        return 0;\n      },\n\n      getTotalCoinsEarned: (_userId: string) => {\n        // This would integrate with coins store\n        return 0;\n      },\n\n      getTotalFeedbackGiven: (_userId: string) => {\n        // This would integrate with feedback/training store\n        return 0;\n      },\n\n      unlockAchievement: (_userId: string, _achievementId: string) => {\n        const avatarStore = useAvatarStore.getState();\n        let userAvatar = avatarStore.getUserAvatar(userId);\n        \n        if (!userAvatar) {\n          userAvatar = avatarStore.createUserAvatar(userId);\n        }\n\n        const newAchievement = {\n          achievementId,\n          unlockedAt: new Date().toISOString(),\n          isNew: true\n        };\n\n        const updatedAchievements = [...userAvatar.achievements, newAchievement];\n        \n        // Update avatar store\n        avatarStore.updateSkill(userId, 'achievements', updatedAchievements as any);\n      },\n\n      addAchievement: (_achievementData: Omit<Achievement, 'id'>) => {\n        const newAchievement: Achievement = {\n          ...achievementData,\n          id: `custom-${Date.now()}`\n        };\n\n        set(state => ({\n          achievements: [...state.achievements, newAchievement]\n        }));\n      },\n\n      updateAchievement: (_achievementId: string, _updates: Partial<Achievement>) => {\n        set(state => ({\n          achievements: state.achievements.map(achievement =>\n            achievement.id === achievementId ? { ...achievement, ...updates } : achievement\n          )\n        }));\n      },\n\n      deleteAchievement: (_achievementId: string) => {\n        set(state => ({\n          achievements: state.achievements.filter(achievement => achievement.id !== achievementId)\n        }));\n      },\n\n      getProgressStats: (_userId: string) => {\n        const allAchievements = get().achievements;\n        const userAchievements = get().getUserAchievements(userId);\n        \n        const totalAchievements = allAchievements.filter(a => a.isActive && !a.isHidden).length;\n        const unlockedAchievements = userAchievements.length;\n        const completionRate = totalAchievements > 0 ? (unlockedAchievements / totalAchievements) * 100 : 0;\n        \n        const recentUnlocks = userAchievements\n          .sort((a, b) => new Date(b.unlockedAt).getTime() - new Date(a.unlockedAt).getTime())\n          .slice(0, 3);\n\n        return {\n          totalAchievements,\n          unlockedAchievements,\n          completionRate,\n          recentUnlocks\n        };\n      },\n      \n      createAchievement: (achievement: Achievement) => {\n        set(state => ({\n          achievements: [...state.achievements, achievement]\n        }));\n      },\n      \n      toggleAchievementActive: (_achievementId: string) => {\n        set(state => ({\n          achievements: state.achievements.map(achievement =>\n            achievement.id === achievementId \n              ? { ...achievement, isActive: !achievement.isActive }\n              : achievement\n          )\n        }));\n      },\n      \n      getAchievementStats: (_achievementId: string) => {\n        const avatarStore = useAvatarStore.getState();\n        const allUserAvatars = avatarStore.getAllUserAvatars();\n        \n        let unlockedCount = 0;\n        allUserAvatars.forEach(avatar => {\n          if (avatar.achievements.some(a => a.achievementId === achievementId)) {\n            unlockedCount++;\n          }\n        });\n        \n        return { unlockedCount };\n      },\n      \n      checkCondition: (_userId: string, condition: AchievementCondition, userProgress: ProgressTracker) => {\n        let currentValue = 0;\n        \n        switch (condition.type) {\n          case 'xp_earned':\n            const avatarStore = useAvatarStore.getState();\n            const userAvatar = avatarStore.getUserAvatar(userId);\n            currentValue = userAvatar?.totalXP || 0;\n            break;\n          case 'training_completed':\n          case 'trainings_completed':\n            currentValue = condition.timeframe === 'quarterly' \n              ? userProgress.quarterlyStats.trainingsCompleted\n              : get().getTotalTrainingsCompleted(userId);\n            break;\n          case 'days_punctual':\n          case 'punctual_checkins':\n            currentValue = condition.timeframe === 'quarterly'\n              ? userProgress.quarterlyStats.punctualDays\n              : get().getTotalPunctualDays(userId);\n            break;\n          case 'coins_earned':\n            currentValue = condition.timeframe === 'quarterly'\n              ? userProgress.quarterlyStats.coinsEarned\n              : get().getTotalCoinsEarned(userId);\n            break;\n          case 'feedback_given':\n            currentValue = condition.timeframe === 'quarterly'\n              ? userProgress.quarterlyStats.feedbackGiven\n              : get().getTotalFeedbackGiven(userId);\n            break;\n          case 'level_reached':\n            const avatar = useAvatarStore.getState().getUserAvatar(userId);\n            currentValue = avatar?.level || 1;\n            break;\n          case 'consecutive_days':\n            currentValue = userProgress.dailyStreak.current;\n            break;\n        }\n\n        // Check condition\n        switch (condition.operator) {\n          case 'equals':\n          case 'eq':\n            return currentValue === condition.target;\n          case 'gte':\n            return currentValue >= condition.target;\n          case 'gt':\n            return currentValue > condition.target;\n          case 'lte':\n            return currentValue <= condition.target;\n          case 'lt':\n            return currentValue < condition.target;\n          default:\n            return false;\n        }\n      }\n    }),\n    {\n      name: 'achievements-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        achievements: state.achievements,\n        userProgress: state.userProgress\n      })\n    }\n  )\n);","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/avatar.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":74,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { \n  UserAvatar, \n  Skill, \n  Level, \n  XPEvent, \n  LevelUpEvent,\n  DEFAULT_SKILLS,\n  SKILL_IDS,\n  calculateXPProgress,\n  calculateLevelFromXP\n} from '../types/avatar';\n\ninterface AvatarState {\n  // User avatar data\n  userAvatars: Record<string, UserAvatar>;\n  \n  // System configuration\n  levels: Level[];\n  xpEvents: XPEvent[];\n  levelUpEvents: LevelUpEvent[];\n  \n  // Actions\n  getUserAvatar: (_userId: string) => UserAvatar | null;\n  createUserAvatar: (_userId: string) => UserAvatar;\n  addXP: (_userId: string, _skillId: string | null, _xpAmount: number, _description: string, _metadata?: Record<string, any>) => void;\n  updateSkill: (_userId: string, _skillId: string, _updates: Partial<Skill>) => void;\n  \n  // Level management\n  getLevels: () => Level[];\n  getLevel: (_levelNumber: number) => Level | null;\n  addLevel: (level: Omit<Level, 'id'>) => void;\n  updateLevel: (_levelId: string, _updates: Partial<Level>) => void;\n  deleteLevel: (_levelId: string) => void;\n  \n  // XP and level calculations\n  calculateUserLevel: (_userId: string) => number;\n  checkLevelUp: (_userId: string) => LevelUpEvent[];\n  \n  // Statistics\n  getXPEvents: (_userId: string, _limit?: number) => XPEvent[];\n  getLevelUpEvents: (_userId: string, _limit?: number) => LevelUpEvent[];\n  getUserStats: (_userId: string) => {\n    totalXP: number;\n    level: number;\n    skillLevels: Record<string, number>;\n    recentEvents: XPEvent[];\n  };\n  \n  // Additional methods\n  getAllUserAvatars: () => UserAvatar[];\n  getUserSkill: (_userId: string, _skillId: string) => Skill | undefined;\n  updateTitle: (_userId: string, _title: string) => void;\n  updateAvatar: (_userId: string, _avatarConfig: Partial<UserAvatar>) => void;\n}\n\n// Mock default levels\nconst mockLevels: Level[] = [\n  { id: '1', levelNumber: 1, title: 'Neuling', requiredXP: 0, icon: '🌱', color: '#10B981' },\n  { id: '2', levelNumber: 2, title: 'Anfänger', requiredXP: 100, icon: '🔰', color: '#3B82F6' },\n  { id: '3', levelNumber: 3, title: 'Lernender', requiredXP: 250, icon: '📚', color: '#6366F1' },\n  { id: '4', levelNumber: 4, title: 'Fortgeschrittener', requiredXP: 450, icon: '⭐', color: '#8B5CF6' },\n  { id: '5', levelNumber: 5, title: 'Explorer', requiredXP: 700, icon: '🧭', color: '#F59E0B' },\n  { id: '6', levelNumber: 6, title: 'Spezialist', requiredXP: 1000, icon: '🎯', color: '#EF4444' },\n  { id: '7', levelNumber: 7, title: 'Experte', requiredXP: 1350, icon: '💎', color: '#06B6D4' },\n  { id: '8', levelNumber: 8, title: 'Meister', requiredXP: 1750, icon: '👑', color: '#8B5CF6' },\n  { id: '9', levelNumber: 9, title: 'Profi', requiredXP: 2200, icon: '🏆', color: '#F59E0B' },\n  { id: '10', levelNumber: 10, title: 'Sensei', requiredXP: 2700, icon: '🥇', color: '#EF4444' }\n];\n\nexport const useAvatarStore = create<AvatarState>()(\n  persist(\n    (set, get) => (_{\n      userAvatars: {}, levels: mockLevels, xpEvents: [], levelUpEvents: [], _getUserAvatar: (userId) => {\n        const avatars = get().userAvatars;\n        return avatars[userId] || null;\n      },\n\n      createUserAvatar: (_userId: string) => {\n        const now = new Date().toISOString();\n        \n        // Create default skills with 0 XP\n        const skills: Skill[] = DEFAULT_SKILLS.map(skillTemplate => ({\n          ...skillTemplate,\n          currentXP: 0,\n          level: 1,\n          totalXP: 0\n        }));\n\n        const newAvatar: UserAvatar = {\n          userId,\n          level: 1,\n          totalXP: 0,\n          currentLevelXP: 0,\n          nextLevelXP: 100,\n          skills,\n          achievements: [],\n          lastActiveAt: now,\n          createdAt: now,\n          updatedAt: now\n        };\n\n        set(state => ({\n          userAvatars: {\n            ...state.userAvatars,\n            [userId]: newAvatar\n          }\n        }));\n\n        return newAvatar;\n      },\n\n      addXP: (_userId: string, _skillId: string | null | undefined, _xpAmount: number, _description: string, metadata = {}) => {\n        const now = new Date().toISOString();\n        let userAvatar = get().getUserAvatar(userId);\n        \n        // Create avatar if it doesn't exist\n        if (!userAvatar) {\n          userAvatar = get().createUserAvatar(userId);\n        }\n\n        // Create XP event\n        const xpEvent: XPEvent = {\n          id: `${userId}-${Date.now()}`,\n          userId,\n          type: metadata.type || 'manual',\n          skillId: skillId || undefined,\n          xpAmount,\n          description,\n          metadata,\n          createdAt: now\n        };\n\n        set(state => {\n          const updatedAvatar = { ...state.userAvatars[userId] };\n          \n          // Add to total XP\n          updatedAvatar.totalXP += xpAmount;\n          \n          // Update specific skill if provided\n          if (skillId) {\n            updatedAvatar.skills = updatedAvatar.skills.map(skill => {\n              if (skill.id === skillId) {\n                const newTotalXP = skill.totalXP + xpAmount;\n                const skillProgress = calculateXPProgress(newTotalXP);\n                \n                return {\n                  ...skill,\n                  currentXP: skillProgress.currentLevelXP,\n                  totalXP: newTotalXP,\n                  level: skillProgress.level\n                };\n              }\n              return skill;\n            });\n          }\n          \n          // Update overall level progress\n          const overallProgress = calculateXPProgress(updatedAvatar.totalXP);\n          updatedAvatar.level = overallProgress.level;\n          updatedAvatar.currentLevelXP = overallProgress.currentLevelXP;\n          updatedAvatar.nextLevelXP = overallProgress.nextLevelXP;\n          updatedAvatar.lastActiveAt = now;\n          updatedAvatar.updatedAt = now;\n\n          return {\n            userAvatars: {\n              ...state.userAvatars,\n              [userId]: updatedAvatar\n            },\n            xpEvents: [xpEvent, ...state.xpEvents]\n          };\n        });\n\n        // Check for level ups\n        get().checkLevelUp(userId);\n      },\n\n      updateSkill: (_userId: string, _skillId: string, _updates: Partial<Skill>) => {\n        set(state => {\n          const userAvatar = state.userAvatars[userId];\n          if (!userAvatar) return state;\n\n          const updatedSkills = userAvatar.skills.map(skill =>\n            skill.id === skillId ? { ...skill, ...updates } : skill\n          );\n\n          return {\n            userAvatars: {\n              ...state.userAvatars,\n              [userId]: {\n                ...userAvatar,\n                skills: updatedSkills,\n                updatedAt: new Date().toISOString()\n              }\n            }\n          };\n        });\n      },\n\n      getLevels: () => get().levels,\n\n      getLevel: (_levelNumber: number) => {\n        return get().levels.find(level => level.levelNumber === levelNumber) || null;\n      },\n\n      addLevel: (_levelData: Omit<Level, 'id'>) => {\n        const newLevel: Level = {\n          ...levelData,\n          id: `level-${Date.now()}`\n        };\n\n        set(_state => ({\n          levels: [...state.levels, newLevel].sort((a, b) => a.levelNumber - b.levelNumber)\n        }));\n      },\n\n      updateLevel: (_levelId: string, _updates: Partial<Level>) => {\n        set(state => ({\n          levels: state.levels.map(level =>\n            level.id === levelId ? { ...level, ...updates } : level\n          )\n        }));\n      },\n\n      deleteLevel: (_levelId: string) => {\n        set(state => ({\n          levels: state.levels.filter(level => level.id !== levelId)\n        }));\n      },\n\n      calculateUserLevel: (_userId: string) => {\n        const userAvatar = get().getUserAvatar(userId);\n        if (!userAvatar) return 1;\n        \n        return calculateLevelFromXP(userAvatar.totalXP);\n      },\n\n      checkLevelUp: (_userId: string) => {\n        const userAvatar = get().getUserAvatar(userId);\n        if (!userAvatar) return [];\n\n        const levelUpEvents: LevelUpEvent[] = [];\n        const now = new Date().toISOString();\n\n        // Check overall level up\n        const newOverallLevel = calculateLevelFromXP(userAvatar.totalXP);\n        if (newOverallLevel > userAvatar.level) {\n          const levelUpEvent: LevelUpEvent = {\n            userId,\n            oldLevel: userAvatar.level,\n            newLevel: newOverallLevel,\n            rewards: [], // Add level rewards logic here\n            timestamp: now\n          };\n          levelUpEvents.push(levelUpEvent);\n        }\n\n        // Check skill level ups\n        userAvatar.skills.forEach(skill => {\n          const newSkillLevel = calculateLevelFromXP(skill.totalXP);\n          if (newSkillLevel > skill.level) {\n            const skillLevelUpEvent: LevelUpEvent = {\n              userId,\n              oldLevel: skill.level,\n              newLevel: newSkillLevel,\n              skillId: skill.id,\n              rewards: [], // Add skill level rewards logic here\n              timestamp: now\n            };\n            levelUpEvents.push(skillLevelUpEvent);\n          }\n        });\n\n        if (levelUpEvents.length > 0) {\n          set(state => ({\n            levelUpEvents: [...levelUpEvents, ...state.levelUpEvents]\n          }));\n        }\n\n        return levelUpEvents;\n      },\n\n      getXPEvents: (_userId: string, limit = 10) => {\n        return get().xpEvents\n          .filter(event => event.userId === userId)\n          .slice(0, limit);\n      },\n\n      getLevelUpEvents: (_userId: string, limit = 5) => {\n        return get().levelUpEvents\n          .filter(event => event.userId === userId)\n          .slice(0, limit);\n      },\n\n      getUserStats: (_userId: string) => {\n        const userAvatar = get().getUserAvatar(userId);\n        const xpEvents = get().getXPEvents(userId, 5);\n        \n        if (!userAvatar) {\n          return {\n            totalXP: 0,\n            level: 1,\n            skillLevels: {},\n            recentEvents: []\n          };\n        }\n\n        const skillLevels = userAvatar.skills.reduce((acc, skill) => {\n          acc[skill.id] = skill.level;\n          return acc;\n        }, {} as Record<string, number>);\n\n        return {\n          totalXP: userAvatar.totalXP,\n          level: userAvatar.level,\n          skillLevels,\n          recentEvents: xpEvents\n        };\n      },\n      \n      getAllUserAvatars: () => {\n        return Object.values(get().userAvatars);\n      },\n      \n      getUserSkill: (_userId: string, _skillId: string) => {\n        const userAvatar = get().getUserAvatar(userId);\n        if (!userAvatar) return undefined;\n        return userAvatar.skills.find(skill => skill.id === skillId);\n      },\n      \n      updateTitle: (_userId: string, _title: string) => {\n        set(state => {\n          const userAvatar = state.userAvatars[userId];\n          if (!userAvatar) return state;\n          \n          return {\n            userAvatars: {\n              ...state.userAvatars,\n              [userId]: {\n                ...userAvatar,\n                title,\n                updatedAt: new Date().toISOString()\n              }\n            }\n          };\n        });\n      },\n      \n      updateAvatar: (_userId: string, _avatarConfig: Partial<UserAvatar>) => {\n        set(state => {\n          const userAvatar = state.userAvatars[userId];\n          if (!userAvatar) return state;\n          \n          return {\n            userAvatars: {\n              ...state.userAvatars,\n              [userId]: {\n                ...userAvatar,\n                ...avatarConfig,\n                updatedAt: new Date().toISOString()\n              }\n            }\n          };\n        });\n      }\n    }),\n    {\n      name: 'avatar-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        userAvatars: state.userAvatars,\n        levels: state.levels,\n        xpEvents: state.xpEvents.slice(0, 100), // Keep only recent events\n        levelUpEvents: state.levelUpEvents.slice(0, 50)\n      })\n    }\n  )\n);","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/coinEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/coins.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/gamification.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":64,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { \n  XPEventData, \n  GamificationConfig, \n  DEFAULT_GAMIFICATION_CONFIG,\n  NotificationEvent\n} from '../types/gamification';\nimport { SKILL_IDS } from '../types/avatar';\nimport { useAvatarStore } from './avatar';\nimport { useAchievementsStore } from './achievements';\n\ninterface GamificationState {\n  // Configuration\n  config: GamificationConfig;\n  \n  // Event tracking\n  notifications: NotificationEvent[];\n  \n  // Main actions\n  awardXP: (_eventData: XPEventData) => void;\n  awardCoins: (_userId: string, _amount: number, _reason: string) => void;\n  \n  // Event handlers for different activities\n  onTrainingCompleted: (_userId: string, _trainingId: string, _passed: boolean) => void;\n  onPunctualCheckin: (_userId: string, _streakDay?: number) => void;\n  onCoinsEarned: (_userId: string, _amount: number, _reason: string) => void;\n  onFeedbackGiven: (_userId: string, _feedbackId: string) => void;\n  onDailyLogin: (_userId: string) => void;\n  \n  // Configuration management\n  updateConfig: (_updates: Partial<GamificationConfig>) => void;\n  \n  // Notifications\n  getNotifications: (_userId: string) => NotificationEvent[];\n  markNotificationAsRead: (_notificationId: string) => void;\n  clearNotifications: (_userId: string) => void;\n  \n  // Statistics and leaderboards\n  getLeaderboard: (_skillId?: string, _limit?: number) => Array<{\n    userId: string;\n    userName: string;\n    xp: number;\n    level: number;\n  }>;\n  \n  // Integration helpers\n  initializeUserGamification: (_userId: string) => void;\n  getUserGamificationSummary: (_userId: string) => {\n    level: number;\n    totalXP: number;\n    achievements: number;\n    weeklyXP: number;\n    rank: number;\n  };\n  \n  // Helper methods\n  getXPDescription: (_type: string, metadata: Record<string, any>) => string;\n  getDefaultSkillForEventType: (_type: string) => string | null;\n}\n\nexport const useGamificationStore = create<GamificationState>()(\n  persist(\n    (set, get) => (_{\n      config: DEFAULT_GAMIFICATION_CONFIG, notifications: [], _awardXP: (eventData) => {\n        const { type, userId, skillIds, xpAmount, metadata = {} } = eventData;\n        const config = get().config;\n        \n        // Calculate XP amount if not provided\n        let finalXPAmount = xpAmount;\n        if (!finalXPAmount) {\n          switch (type) {\n            case 'training_completed':\n              finalXPAmount = config.xpRates.trainingCompleted;\n              break;\n            case 'punctual_checkin':\n              finalXPAmount = config.xpRates.punctualCheckin;\n              break;\n            case 'coins_earned':\n              finalXPAmount = Math.floor((metadata.coinAmount || 0) * config.xpRates.coinsEarned);\n              break;\n            case 'feedback_given':\n              finalXPAmount = config.xpRates.feedbackGiven;\n              break;\n            case 'daily_login':\n              finalXPAmount = config.xpRates.dailyLogin;\n              break;\n            default:\n              finalXPAmount = 0;\n          }\n        }\n\n        if (!finalXPAmount || finalXPAmount <= 0) return;\n\n        const avatarStore = useAvatarStore.getState();\n        const achievementsStore = useAchievementsStore.getState();\n\n        // Award XP to specific skills or general\n        if (skillIds && skillIds.length > 0) {\n          skillIds.forEach(skillId => {\n            avatarStore.addXP(\n              userId,\n              skillId,\n              finalXPAmount!,\n              get().getXPDescription(type, metadata),\n              { type, ...metadata }\n            );\n          });\n        } else {\n          // Award to default skill based on type\n          const defaultSkillId = get().getDefaultSkillForEventType(type);\n          avatarStore.addXP(\n            userId,\n            defaultSkillId,\n            finalXPAmount!,\n            get().getXPDescription(type, metadata),\n            { type, ...metadata }\n          );\n        }\n\n        // Update achievement progress\n        achievementsStore.updateProgress(userId, type, metadata.coinAmount || 1, metadata);\n\n        // Create notification\n        set(state => {\n          const notification: NotificationEvent = {\n            id: `xp-${userId}-${Date.now()}`,\n            userId,\n            type: skillIds ? 'skill_level_up' : 'level_up',\n            title: 'XP erhalten!',\n            message: `+${finalXPAmount!} XP für ${get().getXPDescription(type, metadata)}`,\n            data: {\n              xpGained: finalXPAmount!,\n              skillId: skillIds?.[0]\n            },\n            isRead: false,\n            createdAt: new Date().toISOString()\n          };\n\n          return {\n            notifications: [notification, ...state.notifications.slice(0, 99)]\n          };\n        });\n      },\n      \n      getXPDescription: (_type: string, metadata: Record<string, any>) => {\n        switch (type) {\n          case 'training_completed':\n            return `Schulung abgeschlossen`;\n          case 'punctual_checkin':\n            return metadata.streakDay > 1 \n              ? `Pünktlich (${metadata.streakDay} Tage Serie)`\n              : 'Pünktlich gestempelt';\n          case 'coins_earned':\n            return `${metadata.coinAmount} Coins verdient: ${metadata.reason}`;\n          case 'feedback_given':\n            return 'Feedback gegeben';\n          case 'daily_login':\n            return 'Täglicher Login';\n          case 'manual':\n            return metadata.reason || 'Manuell vergeben';\n          default:\n            return 'XP erhalten';\n        }\n      },\n      \n      getDefaultSkillForEventType: (_type: string) => {\n        switch (type) {\n          case 'training_completed':\n          case 'training_passed':\n            return SKILL_IDS.KNOWLEDGE;\n          case 'punctual_checkin':\n          case 'feedback_given':\n          case 'daily_login':\n            return SKILL_IDS.LOYALTY;\n          case 'coins_earned':\n            return SKILL_IDS.HUSTLE;\n          default:\n            return null;\n        }\n      },\n\n      awardCoins: (_userId: string, _amount: number, _reason: string) => {\n        // This would integrate with the existing coins store\n        // For now, we just track it for XP purposes\n        get().awardXP({\n          type: 'coins_earned',\n          userId,\n          metadata: { coinAmount: amount, reason }\n        });\n      },\n\n      onTrainingCompleted: (_userId: string, _trainingId: string, _passed: boolean) => {\n        if (!passed) return;\n        \n        get().awardXP({\n          type: 'training_completed',\n          userId,\n          skillIds: [SKILL_IDS.KNOWLEDGE],\n          metadata: { trainingId, passed }\n        });\n      },\n\n      onPunctualCheckin: (_userId: string, streakDay = 1) => {\n        get().awardXP({\n          type: 'punctual_checkin',\n          userId,\n          skillIds: [SKILL_IDS.LOYALTY],\n          metadata: { streakDay }\n        });\n      },\n\n      onCoinsEarned: (_userId: string, _amount: number, _reason: string) => {\n        get().awardXP({\n          type: 'coins_earned',\n          userId,\n          skillIds: [SKILL_IDS.HUSTLE],\n          metadata: { coinAmount: amount, reason }\n        });\n      },\n\n      onFeedbackGiven: (_userId: string, _feedbackId: string) => {\n        get().awardXP({\n          type: 'feedback_given',\n          userId,\n          skillIds: [SKILL_IDS.LOYALTY],\n          metadata: { feedbackId }\n        });\n      },\n\n      onDailyLogin: (_userId: string) => {\n        const today = new Date().toISOString().split('T')[0];\n        const lastLogin = localStorage.getItem(`lastLogin-${userId}`);\n        \n        if (lastLogin !== today) {\n          localStorage.setItem(`lastLogin-${userId}`, today);\n          get().awardXP({\n            type: 'daily_login',\n            userId,\n            metadata: { date: today }\n          });\n        }\n      },\n\n\n      updateConfig: (_updates: Partial<GamificationConfig>) => {\n        set(state => ({\n          config: { ...state.config, ...updates }\n        }));\n      },\n\n      getNotifications: (_userId: string) => {\n        return get().notifications.filter(n => n.userId === userId);\n      },\n\n      markNotificationAsRead: (_notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(n =>\n            n.id === notificationId ? { ...n, isRead: true } : n\n          )\n        }));\n      },\n\n      clearNotifications: (_userId: string) => {\n        set(state => ({\n          notifications: state.notifications.filter(n => n.userId !== userId)\n        }));\n      },\n\n      getLeaderboard: (_skillId?: string, limit = 10) => {\n        const avatarStore = useAvatarStore.getState();\n        const allAvatars = Object.values(avatarStore.userAvatars);\n        \n        let leaderboard = allAvatars.map(avatar => {\n          let xp = avatar.totalXP;\n          let level = avatar.level;\n          \n          if (skillId) {\n            const skill = avatar.skills.find(s => s.id === skillId);\n            xp = skill?.totalXP || 0;\n            level = skill?.level || 1;\n          }\n          \n          return {\n            userId: avatar.userId,\n            userName: `User ${avatar.userId}`, // This would come from user store\n            xp,\n            level\n          };\n        });\n\n        return leaderboard\n          .sort((a, b) => b.xp - a.xp)\n          .slice(0, limit);\n      },\n\n      initializeUserGamification: (_userId: string) => {\n        const avatarStore = useAvatarStore.getState();\n        const existingAvatar = avatarStore.getUserAvatar(userId);\n        \n        if (!existingAvatar) {\n          avatarStore.createUserAvatar(userId);\n        }\n        \n        // Award welcome XP\n        get().awardXP({\n          type: 'manual',\n          userId,\n          xpAmount: 25,\n          metadata: { reason: 'Willkommen bei HRthis!' }\n        });\n      },\n\n      getUserGamificationSummary: (_userId: string) => {\n        const avatarStore = useAvatarStore.getState();\n        const achievementsStore = useAchievementsStore.getState();\n        \n        const userAvatar = avatarStore.getUserAvatar(userId);\n        const userAchievements = achievementsStore.getUserAchievements(userId);\n        const leaderboard = get().getLeaderboard();\n        \n        if (!userAvatar) {\n          return {\n            level: 1,\n            totalXP: 0,\n            achievements: 0,\n            weeklyXP: 0,\n            rank: leaderboard.length + 1\n          };\n        }\n\n        // Calculate weekly XP (this would need proper date tracking)\n        const weeklyXP = avatarStore.getXPEvents(userId, 50)\n          .filter(event => {\n            const eventDate = new Date(event.createdAt);\n            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n            return eventDate >= weekAgo;\n          })\n          .reduce((sum, event) => sum + event.xpAmount, 0);\n\n        const rank = leaderboard.findIndex(entry => entry.userId === userId) + 1;\n\n        return {\n          level: userAvatar.level,\n          totalXP: userAvatar.totalXP,\n          achievements: userAchievements.length,\n          weeklyXP,\n          rank: rank || leaderboard.length + 1\n        };\n      }\n    }),\n    {\n      name: 'gamification-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        config: state.config,\n        notifications: state.notifications.slice(0, 50) // Keep recent notifications\n      })\n    }\n  )\n);","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/learning.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/leaves.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/reminders.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'managerId' is defined but never used. Allowed unused args must match /^_/u.","line":233,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { VacationReminder, ReminderSettings, ReminderNotification } from '../types/reminders';\nimport { LeaveRequest } from '../types';\n\ninterface RemindersState {\n  reminders: VacationReminder[];\n  reminderSettings: ReminderSettings[];\n  notifications: ReminderNotification[];\n  isLoading: boolean;\n  \n  // Reminder management\n  createReminderForVacation: (leaveRequest: LeaveRequest, managerId: string, customDays?: number[]) => Promise<void>;\n  createManualReminder: (leaveRequestId: string, reminderDate: string, message: string, managerId: string) => Promise<void>;\n  deleteReminder: (reminderId: string) => void;\n  updateReminder: (reminderId: string, updates: Partial<VacationReminder>) => void;\n  \n  // Settings management\n  getReminderSettings: (managerId: string) => ReminderSettings | null;\n  updateReminderSettings: (managerId: string, settings: Partial<ReminderSettings>) => Promise<void>;\n  \n  // Notifications\n  getUpcomingNotifications: (managerId: string) => ReminderNotification[];\n  markNotificationAsRead: (notificationId: string) => void;\n  generateNotificationsForToday: () => ReminderNotification[];\n  \n  // Calendar integration\n  getRemindersForLeave: (leaveRequestId: string) => VacationReminder[];\n  getUpcomingVacationAlerts: (managerId: string, days?: number) => ReminderNotification[];\n}\n\n// Mock data\nconst mockReminderSettings: ReminderSettings[] = [\n  {\n    id: '1',\n    managerId: '2', // Anna Admin\n    isEnabled: true,\n    defaultReminders: [14, 7, 2], // 2 weeks, 1 week, 2 days before\n    customMessage: 'Erinnerung: {employeeName} ist vom {startDate} bis {endDate} im Urlaub.',\n    notificationMethod: 'BOTH',\n    autoCreateForNewVacations: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  }\n];\n\nconst mockReminders: VacationReminder[] = [\n  {\n    id: '1',\n    leaveRequestId: '1', // Max's Christmas vacation\n    userId: '1',\n    reminderType: 'AUTOMATIC',\n    reminderDate: '2024-12-09', // 2 weeks before\n    daysBeforeVacation: 14,\n    isActive: true,\n    isSent: false,\n    message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n    createdAt: '2024-12-01T10:00:00Z',\n    createdBy: '2'\n  },\n  {\n    id: '2',\n    leaveRequestId: '1',\n    userId: '1',\n    reminderType: 'AUTOMATIC',\n    reminderDate: '2024-12-16', // 1 week before\n    daysBeforeVacation: 7,\n    isActive: true,\n    isSent: false,\n    message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n    createdAt: '2024-12-01T10:00:00Z',\n    createdBy: '2'\n  },\n  {\n    id: '3',\n    leaveRequestId: '1',\n    userId: '1',\n    reminderType: 'AUTOMATIC',\n    reminderDate: '2024-12-21', // 2 days before\n    daysBeforeVacation: 2,\n    isActive: true,\n    isSent: false,\n    message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n    createdAt: '2024-12-01T10:00:00Z',\n    createdBy: '2'\n  }\n];\n\nexport const useRemindersStore = create<RemindersState>()(\n  persist(\n    (set, get) => ({\n      reminders: mockReminders,\n      reminderSettings: mockReminderSettings,\n      notifications: [],\n      isLoading: false,\n\n      createReminderForVacation: async (leaveRequest: LeaveRequest, managerId: string, customDays?: number[]) => {\n        set({ isLoading: true });\n        \n        try {\n          const settings = get().getReminderSettings(managerId);\n          const reminderDays = customDays || settings?.defaultReminders || [7, 2]; // Default fallback\n          \n          const vacationStart = new Date(leaveRequest.startDate);\n          const newReminders: VacationReminder[] = [];\n          \n          reminderDays.forEach(days => {\n            const reminderDate = new Date(vacationStart);\n            reminderDate.setDate(vacationStart.getDate() - days);\n            \n            // Don't create reminders for past dates\n            if (reminderDate >= new Date()) {\n              const reminder: VacationReminder = {\n                id: `${Date.now()}-${days}`,\n                leaveRequestId: leaveRequest.id,\n                userId: leaveRequest.userId,\n                reminderType: 'AUTOMATIC',\n                reminderDate: reminderDate.toISOString().split('T')[0],\n                daysBeforeVacation: days,\n                isActive: true,\n                isSent: false,\n                message: settings?.customMessage\n                  ?.replace('{employeeName}', 'Mitarbeiter')\n                  ?.replace('{startDate}', new Date(leaveRequest.startDate).toLocaleDateString('de-DE'))\n                  ?.replace('{endDate}', new Date(leaveRequest.endDate).toLocaleDateString('de-DE'))\n                  || `Urlaub vom ${new Date(leaveRequest.startDate).toLocaleDateString('de-DE')} bis ${new Date(leaveRequest.endDate).toLocaleDateString('de-DE')}`,\n                createdAt: new Date().toISOString(),\n                createdBy: managerId\n              };\n              \n              newReminders.push(reminder);\n            }\n          });\n          \n          set(state => ({\n            reminders: [...state.reminders, ...newReminders],\n            isLoading: false\n          }));\n          \n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      createManualReminder: async (leaveRequestId: string, reminderDate: string, message: string, managerId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          const reminder: VacationReminder = {\n            id: Date.now().toString(),\n            leaveRequestId,\n            userId: '', // Will be filled from leave request\n            reminderType: 'MANUAL',\n            reminderDate,\n            daysBeforeVacation: 0, // Calculated later\n            isActive: true,\n            isSent: false,\n            message,\n            createdAt: new Date().toISOString(),\n            createdBy: managerId\n          };\n          \n          set(state => ({\n            reminders: [...state.reminders, reminder],\n            isLoading: false\n          }));\n          \n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      deleteReminder: (reminderId: string) => {\n        set(state => ({\n          reminders: state.reminders.filter(r => r.id !== reminderId)\n        }));\n      },\n\n      updateReminder: (reminderId: string, updates: Partial<VacationReminder>) => {\n        set(state => ({\n          reminders: state.reminders.map(r => \n            r.id === reminderId ? { ...r, ...updates } : r\n          )\n        }));\n      },\n\n      getReminderSettings: (managerId: string) => {\n        return get().reminderSettings.find(s => s.managerId === managerId) || null;\n      },\n\n      updateReminderSettings: async (managerId: string, settingsUpdate: Partial<ReminderSettings>) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => {\n            const existingIndex = state.reminderSettings.findIndex(s => s.managerId === managerId);\n            \n            if (existingIndex >= 0) {\n              // Update existing settings\n              const updatedSettings = [...state.reminderSettings];\n              updatedSettings[existingIndex] = { ...updatedSettings[existingIndex], ...settingsUpdate };\n              return { reminderSettings: updatedSettings, isLoading: false };\n            } else {\n              // Create new settings\n              const newSettings: ReminderSettings = {\n                id: Date.now().toString(),\n                managerId,\n                isEnabled: true,\n                defaultReminders: [14, 7, 2],\n                notificationMethod: 'BOTH',\n                autoCreateForNewVacations: true,\n                createdAt: new Date().toISOString(),\n                ...settingsUpdate\n              };\n              return { \n                reminderSettings: [...state.reminderSettings, newSettings], \n                isLoading: false \n              };\n            }\n          });\n          \n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getUpcomingNotifications: (managerId: string) => {\n        const today = new Date().toISOString().split('T')[0];\n        const upcomingDays = new Date();\n        upcomingDays.setDate(upcomingDays.getDate() + 7); // Next 7 days\n        \n        return get().notifications.filter(n => \n          n.scheduledFor >= today && \n          n.scheduledFor <= upcomingDays.toISOString().split('T')[0] &&\n          !n.isRead\n        );\n      },\n\n      markNotificationAsRead: (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(n => \n            n.id === notificationId ? { ...n, isRead: true } : n\n          )\n        }));\n      },\n\n      generateNotificationsForToday: () => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayReminders = get().reminders.filter(r => \n          r.reminderDate === today && r.isActive && !r.isSent\n        );\n        \n        const newNotifications: ReminderNotification[] = todayReminders.map(reminder => ({\n          id: Date.now().toString() + Math.random(),\n          reminderId: reminder.id,\n          title: `Urlaubserinnerung - ${reminder.daysBeforeVacation} Tag${reminder.daysBeforeVacation !== 1 ? 'e' : ''} vorher`,\n          message: reminder.message,\n          isRead: false,\n          createdAt: new Date().toISOString(),\n          scheduledFor: today,\n          leaveRequestId: reminder.leaveRequestId,\n          employeeName: 'Mitarbeiter', // Would be filled from user data\n          vacationDates: {\n            startDate: '', // Would be filled from leave request\n            endDate: ''\n          }\n        }));\n        \n        // Mark reminders as sent\n        set(state => ({\n          notifications: [...state.notifications, ...newNotifications],\n          reminders: state.reminders.map(r => \n            todayReminders.some(tr => tr.id === r.id) \n              ? { ...r, isSent: true } \n              : r\n          )\n        }));\n        \n        return newNotifications;\n      },\n\n      getRemindersForLeave: (leaveRequestId: string) => {\n        return get().reminders.filter(r => r.leaveRequestId === leaveRequestId);\n      },\n\n      getUpcomingVacationAlerts: (managerId: string, days = 14) => {\n        const endDate = new Date();\n        endDate.setDate(endDate.getDate() + days);\n        const endDateString = endDate.toISOString().split('T')[0];\n        const today = new Date().toISOString().split('T')[0];\n        \n        return get().notifications.filter(n => \n          n.scheduledFor >= today && \n          n.scheduledFor <= endDateString\n        ).sort((a, b) => new Date(a.scheduledFor).getTime() - new Date(b.scheduledFor).getTime());\n      }\n    }),\n    {\n      name: 'reminders-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        reminders: state.reminders,\n        reminderSettings: state.reminderSettings,\n        notifications: state.notifications\n      }),\n    }\n  )\n);","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/shop.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/teams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/timeRecords.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/training.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/test-utils/test-utils.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":48,"column":62,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactElement } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\n\n// Mock stores for testing\nimport { useAuthStore } from '../state/auth';\nimport { User, Organization } from '../types';\n\n// Create mock user\nexport const mockUser: User = {\n  id: 'test-user-1',\n  email: 'test@example.com',\n  name: 'Test User',\n  firstName: 'Test',\n  lastName: 'User',\n  role: 'EMPLOYEE',\n  organizationId: 'org1',\n  position: 'Developer',\n  department: 'IT',\n  weeklyHours: 40,\n  employmentType: 'FULL_TIME',\n  employmentStatus: 'ACTIVE',\n  vacationDays: 30,\n  joinDate: '2023-01-01',\n};\n\nexport const mockAdmin: User = {\n  ...mockUser,\n  id: 'test-admin-1',\n  email: 'admin@example.com',\n  name: 'Admin User',\n  role: 'ADMIN',\n};\n\nexport const mockOrganization: Organization = {\n  id: 'org1',\n  name: 'Test Organization',\n  slug: 'test-org',\n};\n\n// Custom render function that includes providers\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  initialRoute?: string;\n  user?: User | null;\n  isAuthenticated?: boolean;\n}\n\nconst AllTheProviders = ({ children, _initialRoute = '/' }: { children) => {\n  return (\n    <BrowserRouter>\n      {children}\n    </BrowserRouter>\n  );\n};\n\nexport const customRender = (_ui: ReactElement, {\n    initialRoute = '/', user = mockUser, isAuthenticated = true, _...renderOptions\n  }: CustomRenderOptions = {}) => {\n  // Mock auth store state\n  useAuthStore.setState({\n    user,\n    isAuthenticated,\n    organization: mockOrganization,\n    isLoading: false,\n  });\n\n  window.history.pushState({}, 'Test page', initialRoute);\n\n  return render(ui, _{\n    wrapper: ({ children }) => <AllTheProviders initialRoute={initialRoute}>{children}</AllTheProviders>,\n    ...renderOptions,\n  });\n};\n\n// Re-export everything from React Testing Library\nexport * from '@testing-library/react';\nexport { customRender as render };\n\n// Utility functions for testing\nexport const waitForLoadingToFinish = async () => {\n  // Wait for any loading states to resolve\n  await new Promise(resolve => setTimeout(resolve, 0));\n};\n\n// Mock navigation\nexport const mockNavigate = jest.fn();\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n}));\n\n// Reset all mocks between tests\nbeforeEach(() => {\n  jest.clearAllMocks();\n  mockNavigate.mockClear();\n  \n  // Reset store states\n  useAuthStore.setState({\n    user: null,\n    organization: null,\n    isAuthenticated: false,\n    isLoading: false,\n  });\n});","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/avatar.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2189,2192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2189,2192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Avatar and Gamification System Types\n */\n\nexport interface Skill {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  currentXP: number;\n  level: number;\n  totalXP: number; // Total XP ever earned for this skill\n}\n\nexport interface Level {\n  id: string;\n  levelNumber: number;\n  title: string;\n  description?: string;\n  requiredXP: number;\n  icon?: string;\n  color?: string;\n  badge?: string;\n  rewards?: LevelReward[];\n}\n\nexport interface LevelReward {\n  type: 'coins' | 'achievement' | 'benefit' | 'title';\n  value: string | number;\n  description: string;\n}\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'learning' | 'attendance' | 'engagement' | 'special' | 'milestone';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  conditions: AchievementCondition[];\n  rewards?: AchievementReward[];\n  isVisible: boolean; // Hidden until unlocked\n  unlockedAt?: string; // ISO timestamp\n}\n\nexport interface AchievementCondition {\n  type: 'trainings_completed' | 'days_punctual' | 'coins_earned' | 'feedback_given' | 'custom';\n  operator: 'equals' | 'greater_than' | 'less_than' | 'between';\n  value: number | [number, number];\n  timeframe?: 'all_time' | 'monthly' | 'quarterly' | 'yearly';\n}\n\nexport interface AchievementReward {\n  type: 'xp' | 'coins' | 'skill_xp' | 'title' | 'benefit_unlock';\n  value: number | string;\n  skillId?: string; // For skill_xp rewards\n}\n\nexport interface UserAvatar {\n  userId: string;\n  level: number;\n  totalXP: number;\n  currentLevelXP: number;\n  nextLevelXP: number;\n  title?: string;\n  avatarUrl?: string;\n  skills: Skill[];\n  achievements: UserAchievement[];\n  lastActiveAt: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserAchievement {\n  achievementId: string;\n  unlockedAt: string;\n  isNew?: boolean; // For highlighting new achievements\n}\n\nexport interface XPEvent {\n  id: string;\n  userId: string;\n  type: 'training_completed' | 'punctual_checkin' | 'coins_earned' | 'feedback_given' | 'manual';\n  skillId?: string; // Which skill gets the XP\n  xpAmount: number;\n  description: string;\n  metadata?: Record<string, any>; // Additional data (training ID, etc.)\n  createdAt: string;\n}\n\nexport interface LevelUpEvent {\n  userId: string;\n  oldLevel: number;\n  newLevel: number;\n  skillId?: string; // null for overall level\n  rewards: LevelReward[];\n  timestamp: string;\n}\n\n// Default skill IDs\nexport const SKILL_IDS = {\n  KNOWLEDGE: 'knowledge',\n  LOYALTY: 'loyalty', \n  HUSTLE: 'hustle'\n} as const;\n\n// Default skills configuration\nexport const DEFAULT_SKILLS: Omit<Skill, 'currentXP' | 'level' | 'totalXP'>[] = [\n  {\n    id: SKILL_IDS.KNOWLEDGE,\n    name: '🎓 Wissen',\n    description: 'Durch Schulungen und Lernen erworbenes Wissen',\n    icon: '🎓',\n    color: '#3B82F6'\n  },\n  {\n    id: SKILL_IDS.LOYALTY,\n    name: '🔁 Loyalität', \n    description: 'Treue und regelmäßige Aktivität im Unternehmen',\n    icon: '🔁',\n    color: '#10B981'\n  },\n  {\n    id: SKILL_IDS.HUSTLE,\n    name: '💪 Hustle',\n    description: 'Engagement und Initiative durch BrowoCoins',\n    icon: '💪',\n    color: '#F59E0B'\n  }\n];\n\n// XP calculation helpers\nexport const calculateLevelFromXP = (xp: number): number => {\n  // Progressive XP requirement: Level 1 = 100 XP, Level 2 = 250 XP, etc.\n  let level = 1;\n  let requiredXP = 100;\n  let totalRequired = 0;\n  \n  while (totalRequired + requiredXP <= xp) {\n    totalRequired += requiredXP;\n    level++;\n    requiredXP = Math.floor(requiredXP * 1.15); // 15% increase per level\n  }\n  \n  return level;\n};\n\nexport const calculateXPForLevel = (level: number): number => {\n  let totalXP = 0;\n  let requiredXP = 100;\n  \n  for (let i = 1; i < level; i++) {\n    totalXP += requiredXP;\n    requiredXP = Math.floor(requiredXP * 1.15);\n  }\n  \n  return totalXP;\n};\n\nexport const calculateXPProgress = (currentXP: number): {\n  level: number;\n  currentLevelXP: number;\n  nextLevelXP: number;\n  progress: number;\n} => {\n  const level = calculateLevelFromXP(currentXP);\n  const currentLevelStartXP = calculateXPForLevel(level);\n  const nextLevelStartXP = calculateXPForLevel(level + 1);\n  \n  const currentLevelXP = currentXP - currentLevelStartXP;\n  const nextLevelXP = nextLevelStartXP - currentLevelStartXP;\n  const progress = nextLevelXP > 0 ? (currentLevelXP / nextLevelXP) * 100 : 0;\n  \n  return {\n    level,\n    currentLevelXP,\n    nextLevelXP,\n    progress: Math.min(100, Math.max(0, progress))\n  };\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/benefits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/calendar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/gamification.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3171,3174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3171,3174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Gamification Events and Tracking Types\n */\n\nexport interface GamificationConfig {\n  xpRates: {\n    trainingCompleted: number;\n    punctualCheckin: number;\n    coinsEarned: number; // XP per coin earned\n    feedbackGiven: number;\n    dailyLogin: number;\n  };\n  coinMilestones: {\n    quarterly: number[];\n    yearly: number[];\n  };\n  achievementCategories: AchievementCategory[];\n  levelSystem: {\n    baseXP: number;\n    multiplier: number;\n  };\n}\n\nexport interface AchievementCategory {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n}\n\nexport interface NotificationEvent {\n  id: string;\n  userId: string;\n  type: 'level_up' | 'achievement_unlocked' | 'skill_level_up' | 'milestone_reached';\n  title: string;\n  message: string;\n  data: {\n    level?: number;\n    skillId?: string;\n    achievementId?: string;\n    xpGained?: number;\n    coinsGained?: number;\n  };\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  conditions: AchievementCondition[];\n  xpReward: number;\n  rewards?: AchievementReward[];\n  isActive: boolean;\n  isHidden?: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserAchievement {\n  id: string;\n  userId: string;\n  achievementId: string;\n  progress?: number;\n  unlockedAt: string;\n  notified: boolean;\n  name: string;\n  description: string;\n  icon: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n}\n\nexport interface AchievementCondition {\n  type: 'xp_earned' | 'training_completed' | 'punctual_checkins' | 'coins_earned' | \n        'level_reached' | 'feedback_given' | 'consecutive_days' | 'trainings_completed' |\n        'days_punctual';\n  target: number;\n  operator: 'gte' | 'gt' | 'eq' | 'lt' | 'lte' | 'equals';\n  skillId?: string;\n  timeframe?: 'all_time' | 'quarterly' | 'monthly' | 'weekly';\n}\n\nexport interface AchievementReward {\n  type: 'xp' | 'skill_xp' | 'coins' | 'title' | 'avatar_item';\n  value: number | string;\n  skillId?: string;\n}\n\nexport interface ProgressTracker {\n  userId: string;\n  achievements: {\n    [achievementId: string]: {\n      progress: number;\n      maxProgress: number;\n      isCompleted: boolean;\n      lastUpdated: string;\n    };\n  };\n  dailyStreak: {\n    current: number;\n    longest: number;\n    lastCheckin: string;\n  };\n  quarterlyStats: {\n    quarter: string; // \"2024-Q1\"\n    coinsEarned: number;\n    trainingsCompleted: number;\n    punctualDays: number;\n    feedbackGiven: number;\n  };\n}\n\n// Event types for XP tracking\nexport type XPEventType = \n  | 'training_completed'\n  | 'training_passed'\n  | 'punctual_checkin'\n  | 'coins_earned'\n  | 'feedback_given'\n  | 'daily_login'\n  | 'manual';\n\nexport interface XPEventData {\n  type: XPEventType;\n  userId: string;\n  skillIds?: string[]; // Which skills to award XP to\n  xpAmount?: number; // Override default XP amount\n  metadata?: {\n    trainingId?: string;\n    coinAmount?: number;\n    streakDay?: number;\n    reason?: string;\n    passed?: boolean;\n    feedbackId?: string;\n    date?: string;\n    [key: string]: any;\n  };\n}\n\n// Predefined achievements\nexport const PREDEFINED_ACHIEVEMENTS = [\n  // Learning Achievements\n  {\n    id: 'first_training',\n    name: 'Erste Schritte',\n    description: 'Erste Schulung erfolgreich abgeschlossen',\n    icon: '🎯',\n    category: 'learning' as const,\n    rarity: 'common' as const,\n    conditions: [{\n      type: 'trainings_completed' as const,\n      operator: 'equals' as const,\n      target: 1,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [{ type: 'xp' as const, value: 50 }]\n  },\n  {\n    id: 'knowledge_seeker',\n    name: 'Wissenssucher',\n    description: '5 Schulungen erfolgreich abgeschlossen',\n    icon: '📚',\n    category: 'learning' as const,\n    rarity: 'common' as const,\n    conditions: [{\n      type: 'trainings_completed' as const,\n      operator: 'equals' as const,\n      target: 5,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 100, skillId: 'knowledge' },\n      { type: 'coins' as const, value: 50 }\n    ]\n  },\n  {\n    id: 'training_master',\n    name: 'Schulmeister',\n    description: '10 Schulungen erfolgreich abgeschlossen',\n    icon: '🎓',\n    category: 'learning' as const,\n    rarity: 'rare' as const,\n    conditions: [{\n      type: 'trainings_completed' as const,\n      operator: 'equals' as const,\n      target: 10,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 200, skillId: 'knowledge' },\n      { type: 'coins' as const, value: 100 },\n      { type: 'title' as const, value: 'Schulmeister' }\n    ]\n  },\n  \n  // Attendance Achievements  \n  {\n    id: 'punctual_week',\n    name: 'Pünktlichkeits-Profi',\n    description: '7 Tage hintereinander pünktlich',\n    icon: '⏰',\n    category: 'attendance' as const,\n    rarity: 'common' as const,\n    conditions: [{\n      type: 'days_punctual' as const,\n      operator: 'equals' as const,\n      target: 7,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 75, skillId: 'loyalty' },\n      { type: 'coins' as const, value: 25 }\n    ]\n  },\n  {\n    id: 'punctual_month',\n    name: 'Zeitmanagement-Experte', \n    description: '30 Tage pünktlich gestempelt',\n    icon: '🕐',\n    category: 'attendance' as const,\n    rarity: 'rare' as const,\n    conditions: [{\n      type: 'days_punctual' as const,\n      operator: 'equals' as const,\n      target: 30,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 150, skillId: 'loyalty' },\n      { type: 'coins' as const, value: 75 },\n      { type: 'title' as const, value: 'Zeitmanagement-Experte' }\n    ]\n  },\n\n  // Engagement Achievements\n  {\n    id: 'coin_collector',\n    name: 'Münzsammler',\n    description: '100 BrowoCoins gesammelt',\n    icon: '🪙',\n    category: 'engagement' as const,\n    rarity: 'common' as const,\n    conditions: [{\n      type: 'coins_earned' as const,\n      operator: 'equals' as const,\n      target: 100,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 50, skillId: 'hustle' },\n      { type: 'xp' as const, value: 25 }\n    ]\n  },\n  {\n    id: 'browo_legend',\n    name: 'Browo Legend',\n    description: '2500 Coins in einem Quartal',\n    icon: '👑',\n    category: 'milestone' as const,\n    rarity: 'legendary' as const,\n    conditions: [{\n      type: 'coins_earned' as const,\n      operator: 'equals' as const,\n      target: 2500,\n      timeframe: 'quarterly' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 500, skillId: 'hustle' },\n      { type: 'xp' as const, value: 250 },\n      { type: 'title' as const, value: 'Browo Legend' },\n      { type: 'coins' as const, value: 250 }\n    ]\n  },\n\n  // Feedback Achievements\n  {\n    id: 'feedback_giver',\n    name: 'Feedback-Geber',\n    description: '5 Bewertungen abgegeben',\n    icon: '💬',\n    category: 'engagement' as const,\n    rarity: 'common' as const,\n    conditions: [{\n      type: 'feedback_given' as const,\n      operator: 'equals' as const,\n      target: 5,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 75, skillId: 'loyalty' },\n      { type: 'coins' as const, value: 30 }\n    ]\n  },\n  {\n    id: 'feedback_veteran',\n    name: 'Feedback-Veteran',\n    description: '25 Bewertungen abgegeben',\n    icon: '🗣️',\n    category: 'engagement' as const,\n    rarity: 'rare' as const,\n    conditions: [{\n      type: 'feedback_given' as const,\n      operator: 'equals' as const,\n      target: 25,\n      timeframe: 'all_time' as const\n    }],\n    rewards: [\n      { type: 'skill_xp' as const, value: 150, skillId: 'loyalty' },\n      { type: 'coins' as const, value: 75 },\n      { type: 'title' as const, value: 'Feedback-Veteran' }\n    ]\n  }\n] as const;\n\n// Default gamification configuration\nexport const DEFAULT_GAMIFICATION_CONFIG: GamificationConfig = {\n  xpRates: {\n    trainingCompleted: 50,\n    punctualCheckin: 5,\n    coinsEarned: 0.1, // 1 XP per 10 coins\n    feedbackGiven: 15,\n    dailyLogin: 2\n  },\n  coinMilestones: {\n    quarterly: [500, 1000, 1500, 2000, 2500],\n    yearly: [2000, 5000, 8000, 12000, 15000]\n  },\n  levelSystem: {\n    baseXP: 100,\n    multiplier: 1.15\n  },\n  achievementCategories: [\n    {\n      id: 'learning',\n      name: 'Lernen',\n      description: 'Schulungen und Wissensaufbau',\n      icon: '🎓',\n      color: '#3B82F6'\n    },\n    {\n      id: 'attendance', \n      name: 'Anwesenheit',\n      description: 'Pünktlichkeit und Zuverlässigkeit',\n      icon: '⏰',\n      color: '#10B981'\n    },\n    {\n      id: 'engagement',\n      name: 'Engagement',\n      description: 'Aktive Teilnahme und Feedback',\n      icon: '💪',\n      color: '#F59E0B'\n    },\n    {\n      id: 'milestone',\n      name: 'Meilensteine',\n      description: 'Besondere Leistungen und Erfolge',\n      icon: '🏆',\n      color: '#8B5CF6'\n    },\n    {\n      id: 'special',\n      name: 'Spezial',\n      description: 'Einmalige und seltene Achievements',\n      icon: '⭐',\n      color: '#EF4444'\n    }\n  ]\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/learning.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/reminders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/training.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/components/layout/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/components/layout/Container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/components/layout/Grid.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5871,5874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5871,5874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6008,6011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6008,6011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Grid System - 12-Column Layout\n * Flexibles, responsives Grid-System für deine App\n */\n\nimport React from 'react';\nimport { cn } from '../../../utils/cn';\n\n// Grid Container Props\ninterface GridProps {\n  children: React.ReactNode;\n  className?: string;\n  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  cols?: 1 | 2 | 3 | 4 | 6 | 12;\n  mdCols?: 1 | 2 | 3 | 4 | 6 | 12;\n  lgCols?: 1 | 2 | 3 | 4 | 6 | 12;\n  xlCols?: 1 | 2 | 3 | 4 | 6 | 12;\n  responsive?: boolean; // Auto-responsive behavior\n}\n\n// Grid Item Props  \ninterface GridItemProps {\n  children: React.ReactNode;\n  className?: string;\n  span?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'full';\n  mdSpan?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'full';\n  lgSpan?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'full';\n  xlSpan?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'full';\n  order?: number;\n  mdOrder?: number;\n  lgOrder?: number;\n}\n\n// CSS Class Mappings\nconst gapClasses = {\n  none: 'gap-0',\n  xs: 'gap-2',      // 8px\n  sm: 'gap-3',      // 12px  \n  md: 'gap-6',      // 24px (Standard)\n  lg: 'gap-8',      // 32px\n  xl: 'gap-12',     // 48px\n};\n\nconst colsClasses = {\n  1: 'grid-cols-1',\n  2: 'grid-cols-2', \n  3: 'grid-cols-3',\n  4: 'grid-cols-4',\n  6: 'grid-cols-6',\n  12: 'grid-cols-12',\n};\n\nconst spanClasses = {\n  1: 'col-span-1',\n  2: 'col-span-2',\n  3: 'col-span-3',\n  4: 'col-span-4',\n  5: 'col-span-5',\n  6: 'col-span-6',\n  7: 'col-span-7',\n  8: 'col-span-8',\n  9: 'col-span-9',\n  10: 'col-span-10',\n  11: 'col-span-11',\n  12: 'col-span-12',\n  full: 'col-span-full',\n};\n\n/**\n * Main Grid Container\n */\nexport const Grid: React.FC<GridProps> = ({\n  children,\n  className,\n  gap = 'md',\n  cols = 1,\n  mdCols,\n  lgCols,\n  xlCols,\n  responsive = true,\n}) => {\n  const responsiveClasses = responsive ? {\n    // Auto-responsive: 1 -> 2 -> 3 -> 4 columns\n    1: 'grid-cols-1',\n    2: 'grid-cols-1 md:grid-cols-2',\n    3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',\n    4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4',\n    6: 'grid-cols-1 md:grid-cols-3 lg:grid-cols-6',\n    12: 'grid-cols-1 md:grid-cols-12',\n  } : {};\n\n  return (\n    <div\n      className={cn(\n        'grid',\n        gapClasses[gap],\n        responsive ? responsiveClasses[cols] : colsClasses[cols],\n        mdCols && !responsive && `md:${colsClasses[mdCols]}`,\n        lgCols && !responsive && `lg:${colsClasses[lgCols]}`,\n        xlCols && !responsive && `xl:${colsClasses[xlCols]}`,\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\n/**\n * Grid Item\n */\nexport const GridItem: React.FC<GridItemProps> = ({\n  children,\n  className,\n  span = 1,\n  mdSpan,\n  lgSpan,\n  xlSpan,\n  order,\n  mdOrder,\n  lgOrder,\n}) => {\n  return (\n    <div\n      className={cn(\n        spanClasses[span],\n        mdSpan && `md:${spanClasses[mdSpan]}`,\n        lgSpan && `lg:${spanClasses[lgSpan]}`,\n        xlSpan && `xl:${spanClasses[xlSpan]}`,\n        order && `order-${order}`,\n        mdOrder && `md:order-${mdOrder}`,\n        lgOrder && `lg:order-${lgOrder}`,\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\n/**\n * Preset Grid Layouts - Ready-to-use für häufige Patterns\n */\n\n// Dashboard Grid (9-3 Split wie in deiner App)\nexport const DashboardGrid: React.FC<{ children: React.ReactNode; className?: string }> = ({ \n  children, \n  className \n}) => (\n  <Grid cols={1} mdCols={12} gap=\"md\" responsive={false} className={className}>\n    {children}\n  </Grid>\n);\n\n// Stats Grid (1->2->3 responsive, wie deine Dashboard-Karten)\nexport const StatsGrid: React.FC<{ children: React.ReactNode; className?: string }> = ({ \n  children, \n  className \n}) => (\n  <Grid cols={3} gap=\"md\" className={className}>\n    {children}\n  </Grid>\n);\n\n// Two Column Grid (gleichmäßig)\nexport const TwoColumnGrid: React.FC<{ children: React.ReactNode; className?: string }> = ({ \n  children, \n  className \n}) => (\n  <Grid cols={2} gap=\"md\" className={className}>\n    {children}\n  </Grid>\n);\n\n// Four Column Grid (für Listen, Cards)\nexport const FourColumnGrid: React.FC<{ children: React.ReactNode; className?: string }> = ({ \n  children, \n  className \n}) => (\n  <Grid cols={4} gap=\"md\" className={className}>\n    {children}\n  </Grid>\n);\n\n// Auto Grid (automatische Spalten basierend auf Content)\nexport const AutoGrid: React.FC<{ \n  children: React.ReactNode; \n  className?: string;\n  minWidth?: string;\n}> = ({ \n  children, \n  className, \n  minWidth = '250px'\n}) => (\n  <div \n    className={cn('grid gap-6', className)}\n    style={{ gridTemplateColumns: `repeat(auto-fit, minmax(${minWidth}, 1fr))` }}\n  >\n    {children}\n  </div>\n);\n\n/**\n * Layout Utilities für spezifische Use Cases\n */\n\n// Dashboard Main/Sidebar Layout\nexport const DashboardMainSidebar: React.FC<{\n  main: React.ReactNode;\n  sidebar: React.ReactNode;\n  sidebarPosition?: 'left' | 'right';\n  className?: string;\n}> = ({ main, sidebar, sidebarPosition = 'right', className }) => (\n  <DashboardGrid className={className}>\n    {sidebarPosition === 'left' && (\n      <GridItem span=\"full\" mdSpan={3}>\n        {sidebar}\n      </GridItem>\n    )}\n    \n    <GridItem span=\"full\" mdSpan={9}>\n      {main}\n    </GridItem>\n    \n    {sidebarPosition === 'right' && (\n      <GridItem span=\"full\" mdSpan={3}>\n        {sidebar}\n      </GridItem>\n    )}\n  </DashboardGrid>\n);\n\n// Content mit optionaler Sidebar\nexport const ContentWithSidebar: React.FC<{\n  content: React.ReactNode;\n  sidebar?: React.ReactNode;\n  sidebarWidth?: 'narrow' | 'normal' | 'wide';\n  className?: string;\n}> = ({ content, sidebar, sidebarWidth = 'normal', className }) => {\n  const sidebarSpans = {\n    narrow: 2,   // 2/12\n    normal: 3,   // 3/12  \n    wide: 4,     // 4/12\n  };\n  \n  const contentSpan = sidebar ? 12 - sidebarSpans[sidebarWidth] : 12;\n  \n  return (\n    <DashboardGrid className={className}>\n      <GridItem span=\"full\" mdSpan={contentSpan as any}>\n        {content}\n      </GridItem>\n      \n      {sidebar && (\n        <GridItem span=\"full\" mdSpan={sidebarSpans[sidebarWidth] as any}>\n          {sidebar}\n        </GridItem>\n      )}\n    </DashboardGrid>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/examples/DashboardMigration.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token. Did you mean `{'}'}` or `&rbrace;`?","line":95,"column":55,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Migration Beispiel\n * Zeigt wie dein bestehendes Dashboard mit dem neuen UI-System aussehen würde\n */\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Neue UI System Imports\nimport { PageContainer, HeaderCard, Section } from '../components/layout/Container';\nimport { DashboardGrid, GridItem, StatsGrid } from '../components/layout/Grid';\nimport { StatsCard, InfoCard, AvatarCard, CardHeader, CardContent } from '../components/layout/Card';\n\n// Deine bestehenden Hooks (bleiben unverändert)\nimport { useAuthStore } from '../../state/auth';\n// ... andere Hooks\n\n/**\n * VORHER vs NACHHER Vergleich\n */\n\n// ❌ VORHER - Deine bisherige Struktur\nexport const DashboardOld: React.FC = () => {\n  const navigate = useNavigate();\n  const { _user } = useAuthStore();\n  \n  return (\n    <div className=\"flex-1 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-6 py-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n          <div className=\"flex justify-between items-center\">\n            {/* ... Header Content ... */}\n          </div>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-12 gap-6\">\n          {/* Stats Section */}\n          <div className=\"col-span-1 md:col-span-9\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              {/* Heute */}\n              <div className=\"bg-white rounded-xl shadow-sm p-6\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Heute</h3>\n                  <span className=\"text-2xl\">⏰</span>\n                </div>\n                <p className=\"text-2xl font-bold text-gray-400\">-</p>\n                <span className=\"inline-block mt-2 px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\n                  Nicht gestempelt\n                </span>\n              </div>\n              \n              {/* Mehr Stats... */}\n            </div>\n          </div>\n          \n          {/* Avatar Card */}\n          <div className=\"col-span-1 md:col-span-3\">\n            {/* Avatar Content */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ✅ NACHHER - Mit neuem UI-System\nexport const DashboardNew: React.FC = () => {\n  const navigate = useNavigate();\n  const { _user } = useAuthStore();\n  \n  return (<PageContainer \n      title=\"Dashboard\" \n      subtitle=\"Willkommen zurück, _Anna!\"\n    >\n      {/* Header Card - Wiederverwendbar */}\n      <HeaderCard>\n        <div className=\"flex justify-between items-center\">\n          {/* Left side: Avatar + Name + Info */}\n          <div className=\"flex items-center gap-4\">\n            {/* Avatar Image */}\n            <div className=\"w-16 h-16 rounded-full overflow-hidden bg-gradient-to-br from-gray-300 to-gray-500 flex-shrink-0\">\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <span className=\"text-white text-xl\">👤</span>\n              </div>\n            </div>\n            \n            {/* Name and Info */}\n            <div>\n              <h1 className=\"text-heading-2 mb-1\">Hallo, _Anna!</h1>\n              <div className=\"flex items-center gap-6 text-caption text-gray-600\">\n                <span>HR Manager</span>\n                <span>Abteilung: Human Resources</span>\n                <span>Organisation, _direction: \"down\" }}\n              />\n              <StatsCard\n                title=\"Urlaub\"\n                value=\"22\"\n                subtitle=\"von 30 Tagen\"\n                icon=\"🏖️\"\n              />\n            </StatsGrid>\n\n            {/* Employment Details - Wiederverwendbare InfoCard */}\n            <InfoCard \n              title=\"Beschäftigungsdetails\"\n              className=\"mt-6\"\n            >\n              <div className=\"grid grid-cols-1 md) => navigate('/settings')}>\n            <CardHeader>\n              <h3 className=\"text-caption font-semibold text-gray-700\">Avatar</h3>\n              <span className=\"text-xs text-gray-400 hover:text-gray-600\">\n                Einstellungen →\n              </span>\n            </CardHeader>\n\n            <CardContent centerContent>\n              <div className=\"text-center space-y-6\">\n                {/* Level */}\n                <div>\n                  <h4 className=\"text-caption font-medium text-gray-900\">Level 01: Rookie</h4>\n                </div>\n\n                {/* Skills */}\n                <div>\n                  <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">Skills</h4>\n                  <div className=\"bg-gradient-to-r from-cyan-400 to-cyan-600 text-white px-4 py-2 rounded-full font-medium\">\n                    Level 1\n                  </div>\n                </div>\n\n                {/* Engagement */}\n                <div>\n                  <div className=\"bg-gradient-to-r from-yellow-100 to-orange-100 rounded-xl p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-semibold text-gray-900\">Engagement</span>\n                      <div className=\"flex items-center gap-1\">\n                        <span className=\"text-lg font-bold text-gray-900\">1600</span>\n                        <span className=\"text-lg\">🪙</span>\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-caption text-gray-600 mt-2\">Browo Coins</p>\n                </div>\n\n                {/* Achievement */}\n                <div>\n                  <span className=\"text-3xl mb-2 block\">🏆</span>\n                  <p className=\"text-caption text-gray-500\">Verdiene dein erstes Achievement!</p>\n                </div>\n              </div>\n            </CardContent>\n          </AvatarCard>\n        </GridItem>\n      </DashboardGrid>\n    </PageContainer>\n  );\n};\n\n/**\n * Migration Benefits - Was du gewinnst:\n */\n\n// 🎯 Vorteile der Migration:\n\n// 1. KONSISTENZ\n// - Einheitliche Abstände überall (6px, 12px, 24px System)\n// - Konsistente Farben, Shadows, Border Radius\n// - Wiederverwendbare Komponenten\n\n// 2. WARTBARKEIT  \n// - Zentrale Änderungen in Design Tokens\n// - Komponenten sind dokumentiert und typisiert\n// - Einfache Anpassungen ohne Copy/Paste\n\n// 3. RESPONSIVITÄT\n// - Automatische responsive Behavior\n// - Mobile-first Approach\n// - Konsistente Breakpoints\n\n// 4. ENTWICKLER-ERFAHRUNG\n// - TypeScript Support mit IntelliSense\n// - Klare Component APIs\n// - Weniger Copy/Paste Code\n\n// 5. PERFORMANCE\n// - Optimierte Tailwind-Klassen  \n// - Kleinere Bundle Size durch Wiederverwendung\n// - CSS-in-JS Vermeidung\n\n/**\n * Schritt-für-Schritt Migration:\n */\n\n// SCHRITT 1: Installiere das UI-System\n// - Kopiere die UI-Ordner-Struktur\n// - Ersetze tailwind.config.js\n\n// SCHRITT 2: Migriere Seite für Seite\n// - Beginne mit einer Seite (z.B. Dashboard)\n// - Ersetze die Container-Struktur\n// - Ersetze Cards/Boxes mit Card-Komponenten\n// - Ersetze Grid-Layouts\n\n// SCHRITT 3: Teste responsive Verhalten\n// - Mobile, Tablet, Desktop\n// - Verschiedene Content-Längen\n// - Hover/Focus States\n\n// SCHRITT 4: Optimiere und dokumentiere\n// - Erstelle Style Guide\n// - Dokumentiere Custom Components\n// - Setup Storybook (optional)\n\n/**\n * Live Migration Beispiel:\n */\nexport const DashboardMigrationDemo: React.FC = () => {\n  const [useNewSystem, setUseNewSystem] = React.useState(false);\n  \n  return (\n    <div>\n      {/* Toggle Button */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <button\n          onClick={() => setUseNewSystem(!useNewSystem)}\n          className=\"btn-primary\"\n        >\n          {useNewSystem ? 'Zeige Alt' : 'Zeige Neu'} System\n        </button>\n      </div>\n      \n      {/* Render Current System */}\n      {useNewSystem ? <DashboardNew /> : <DashboardOld />}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/tokens/breakpoints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/tokens/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/tokens/effects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/tokens/spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/ui/tokens/typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/utils/exportCalendar.test.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1202,1239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1370,1407],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1601,1604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1601,1604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1650,1653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1650,1653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarEntry } from '../types/calendar';\nimport { exportToCSV, exportToPDF } from './exportCalendar';\n\n// Test data\nconst testEntries: CalendarEntry[] = [\n  { userId: '1', userName: 'Max Mustermann', date: '2025-01-06', type: 'urlaub', status: 'genehmigt' },\n  { userId: '1', userName: 'Max Mustermann', date: '2025-01-07', type: 'urlaub', status: 'genehmigt' },\n  { userId: '2', userName: 'Anna Admin', date: '2025-01-07', type: 'krank' },\n  { userId: '3', userName: 'Tom Teilzeit', date: '2025-01-08', type: 'meeting' },\n  { userId: '1', userName: 'Max Mustermann', date: '2025-01-09', type: 'zeit', stunden: 8.5 },\n  { userId: '2', userName: 'Anna Admin', date: '2025-01-09', type: 'zeit', stunden: 6.0 },\n  { userId: '3', userName: 'Tom Teilzeit', date: '2025-01-09', type: 'zeit', stunden: 4.0 },\n];\n\nconst testUsers = [\n  { userId: '1', userName: 'Max Mustermann' },\n  { userId: '2', userName: 'Anna Admin' },\n  { userId: '3', userName: 'Tom Teilzeit' },\n];\n\nconst testDateRange = [\n  new Date('2025-01-06'),\n  new Date('2025-01-07'),\n  new Date('2025-01-08'),\n  new Date('2025-01-09'),\n];\n\n// Manual test functions (to be run in browser console)\nexport const testCSVExport = () => {\n  console.log('Testing CSV export...');\n  exportToCSV(testEntries, testDateRange, testUsers, 'monat', new Date('2025-01-01'));\n};\n\nexport const testPDFExport = () => {\n  console.log('Testing PDF export...');\n  exportToPDF(testEntries, testDateRange, testUsers, 'monat', new Date('2025-01-01'));\n};\n\n// Export test functions to window for easy testing\nif (typeof window !== 'undefined') {\n  (window as any).testCSVExport = testCSVExport;\n  (window as any).testPDFExport = testPDFExport;\n}","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/utils/exportCalendar.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ',' expected.","line":196,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarEntry } from '../types/calendar';\nimport { format } from 'date-fns';\nimport { de } from 'date-fns/locale';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n// Extend jsPDF type for autoTable\ndeclare module 'jspdf' {\n  interface jsPDF {\n    lastAutoTable: {\n      finalY: number;\n    };\n  }\n}\n\n/**\n * Type map for display names (German)\n */\nconst typeDisplayMap: Record<string, string> = {\n  urlaub: 'Urlaub',\n  krank: 'Krankheit',\n  meeting: 'Meeting',\n  fortbildung: 'Fortbildung',\n  ux: 'Sonderurlaub',\n  zeit: 'Arbeitszeit'\n};\n\n/**\n * Status map for display names (German)\n */\nconst statusDisplayMap: Record<string, string> = {\n  beantragt: 'Beantragt',\n  genehmigt: 'Genehmigt',\n  abgelehnt: 'Abgelehnt'\n};\n\n/**\n * Export calendar data as CSV\n * @param entries - Calendar entries to export\n * @param dateRange - Date range for the export\n * @param users - List of users to include\n * @param view - Current view (month or year)\n * @param selectedMonth - Currently selected month\n */\nexport const exportToCSV = (\n  entries: CalendarEntry[],\n  dateRange: Date[],\n  users: { userId: string; userName: string }[],\n  view: 'monat' | 'jahr',\n  selectedMonth: Date\n): void => {\n  // Create CSV headers\n  const headers = ['Datum', 'Mitarbeiter', 'Typ', 'Stunden', 'Status'];\n  \n  // Create CSV rows\n  const rows: string[][] = [];\n  \n  // Sort entries by date and user\n  const sortedEntries = [...entries].sort((a, b) => {\n    const dateCompare = a.date.localeCompare(b.date);\n    if (dateCompare !== 0) return dateCompare;\n    return a.userName.localeCompare(b.userName);\n  });\n  \n  // Add each entry as a row\n  sortedEntries.forEach(entry => {\n    const formattedDate = format(new Date(entry.date), 'dd.MM.yyyy', { locale: de });\n    const type = typeDisplayMap[entry.type] || entry.type;\n    const hours = entry.stunden ? `${entry.stunden}h` : '-';\n    const status = entry.status ? statusDisplayMap[entry.status] : '-';\n    \n    rows.push([\n      formattedDate,\n      entry.userName,\n      type,\n      hours,\n      status\n    ]);\n  });\n  \n  // Convert to CSV string\n  const csvContent = [\n    headers.join(','),\n    ...rows.map(row => row.map(cell => `\"${cell}\"`).join(','))\n  ].join('\\n');\n  \n  // Create blob and download\n  const blob = new Blob(['\\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  \n  const fileName = view === 'monat' \n    ? `Kalender_${format(selectedMonth, 'yyyy-MM', { locale: de })}.csv`\n    : `Kalender_${format(selectedMonth, 'yyyy', { locale: de })}.csv`;\n  \n  link.setAttribute('href', url);\n  link.setAttribute('download', fileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n/**\n * Export calendar data as PDF\n * @param entries - Calendar entries to export\n * @param dateRange - Date range for the export\n * @param users - List of users to include\n * @param view - Current view (month or year)\n * @param selectedMonth - Currently selected month\n */\nexport const exportToPDF = (\n  entries: CalendarEntry[],\n  dateRange: Date[],\n  users: { userId: string; userName: string }[],\n  view: 'monat' | 'jahr',\n  selectedMonth: Date\n): void => {\n  // Create new PDF document\n  const doc = new jsPDF({\n    orientation: view === 'jahr' ? 'landscape' : 'portrait',\n    unit: 'mm',\n    format: 'a4'\n  });\n  \n  // Add title\n  const title = view === 'monat'\n    ? `Team-Kalender ${format(selectedMonth, 'MMMM yyyy', { locale: de })}`\n    : `Team-Kalender ${format(selectedMonth, 'yyyy', { locale: de })}`;\n  \n  doc.setFontSize(18);\n  doc.text(title, 14, 20);\n  \n  // Create entries map for quick lookup\n  const entriesMap = new Map<string, CalendarEntry>();\n  entries.forEach(entry => {\n    const key = `${entry.userId}-${entry.date}`;\n    entriesMap.set(key, entry);\n  });\n  \n  if (view === 'monat') {\n    // Monthly view - create a calendar grid\n    const startY = 35;\n    \n    // Prepare table data\n    const tableHeaders = ['Mitarbeiter'];\n    const weekDays = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];\n    \n    // Add date headers\n    dateRange.forEach(date => {\n      const dayOfWeek = weekDays[(date.getDay() + 6) % 7]; // Adjust for Monday start\n      tableHeaders.push(`${dayOfWeek} ${format(date, 'd')}`);\n    });\n    \n    // Create rows for each user\n    const tableRows: any[][] = [];\n    users.forEach(user => {\n      const row = [user.userName];\n      \n      dateRange.forEach(date => {\n        const dateStr = format(date, 'yyyy-MM-dd');\n        const entry = entriesMap.get(`${user.userId}-${dateStr}`);\n        \n        if (entry) {\n          let cellContent = '';\n          switch (entry.type) {\n            case 'urlaub':\n              cellContent = 'U';\n              break;\n            case 'krank':\n              cellContent = 'K';\n              break;\n            case 'meeting':\n              cellContent = 'M';\n              break;\n            case 'fortbildung':\n              cellContent = 'F';\n              break;\n            case 'ux':\n              cellContent = 'Ux';\n              break;\n            case 'zeit':\n              cellContent = entry.stunden ? `${entry.stunden}h` : '?';\n              break;\n          }\n          row.push(cellContent);\n        } else {\n          row.push('');\n        }\n      });\n      \n      tableRows.push(row);\n    });\n    \n    // Add table to PDF\n    autoTable(doc, _{\n      head: [tableHeaders], body: tableRows, _startY: startY, _theme: 'grid', _styles: {\n        fontSize, _cellPadding: 1, _halign: 'center', _valign: 'middle'\n      }, _headStyles: {\n        fillColor, 130, 246], _// Blue color\n        textColor: 255, _fontSize: 7\n      }, _columnStyles: {\n        0, _cellWidth: 30 } // Name column\n      }, _didDrawCell: (data) => {\n        // Color cells based on entry type\n        if (data.section === 'body' && data.column.index > 0) {\n          const userIndex = data.row.index;\n          const dateIndex = data.column.index - 1;\n          const user = users[userIndex];\n          const date = dateRange[dateIndex];\n          const dateStr = format(date, 'yyyy-MM-dd');\n          const entry = entriesMap.get(`${user.userId}-${dateStr}`);\n          \n          if (entry) {\n            let fillColor;\n            switch (entry.type) {\n              case 'urlaub':\n                fillColor = [157, 240, 157]; // Green\n                break;\n              case 'krank':\n                fillColor = [0, 0, 0]; // Black\n                doc.setTextColor(255, 255, 255); // White text\n                break;\n              case 'meeting':\n                fillColor = [91, 141, 246]; // Blue\n                break;\n              case 'fortbildung':\n                fillColor = [255, 201, 102]; // Orange\n                break;\n              case 'ux':\n                fillColor = [245, 89, 89]; // Red\n                break;\n              case 'zeit':\n                if (entry.stunden && entry.stunden >= 8) {\n                  fillColor = [152, 193, 242]; // Light blue\n                } else if (entry.stunden && entry.stunden >= 6) {\n                  fillColor = [247, 213, 96]; // Yellow\n                } else {\n                  fillColor = [242, 161, 158]; // Light red\n                }\n                break;\n            }\n            \n            if (fillColor) {\n              doc.setFillColor(fillColor[0], fillColor[1], fillColor[2]);\n              doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'F');\n              doc.setTextColor(0, 0, 0); // Reset text color\n            }\n          }\n        }\n      }\n    });\n    \n    // Add legend\n    const finalY = (doc as any).lastAutoTable.finalY + 10;\n    doc.setFontSize(10);\n    doc.text('Legende:', 14, finalY);\n    \n    const legendItems = [\n      { label: 'U = Urlaub', color: [157, 240, 157] },\n      { label: 'K = Krankheit', color: [0, 0, 0] },\n      { label: 'M = Meeting', color: [91, 141, 246] },\n      { label: 'F = Fortbildung', color: [255, 201, 102] },\n      { label: 'Ux = Sonderurlaub', color: [245, 89, 89] },\n      { label: 'h = Arbeitsstunden', color: [152, 193, 242] }\n    ];\n    \n    let legendY = finalY + 5;\n    legendItems.forEach(item => {\n      doc.setFillColor(item.color[0], item.color[1], item.color[2]);\n      doc.rect(14, legendY - 3, 5, 3, 'F');\n      doc.setFontSize(8);\n      doc.text(item.label, 22, legendY);\n      legendY += 5;\n    });\n    \n  } else {\n    // Year view - create a summary table\n    const startY = 35;\n    \n    // Summary by user and type\n    const summaryData: Record<string, Record<string, number>> = {};\n    \n    entries.forEach(entry => {\n      if (!summaryData[entry.userName]) {\n        summaryData[entry.userName] = {\n          urlaub: 0,\n          krank: 0,\n          meeting: 0,\n          fortbildung: 0,\n          ux: 0,\n          arbeitsstunden: 0\n        };\n      }\n      \n      if (entry.type === 'zeit' && entry.stunden) {\n        summaryData[entry.userName].arbeitsstunden += entry.stunden;\n      } else {\n        summaryData[entry.userName][entry.type] = (summaryData[entry.userName][entry.type] || 0) + 1;\n      }\n    });\n    \n    // Create table data\n    const tableHeaders = ['Mitarbeiter', 'Urlaub', 'Krankheit', 'Meeting', 'Fortbildung', 'Sonderurlaub', 'Arbeitsstunden'];\n    const tableRows: any[][] = [];\n    \n    Object.entries(summaryData).forEach(([userName, data]) => {\n      tableRows.push([\n        userName,\n        `${data.urlaub} Tage`,\n        `${data.krank} Tage`,\n        `${data.meeting} Tage`,\n        `${data.fortbildung} Tage`,\n        `${data.ux} Tage`,\n        `${data.arbeitsstunden.toFixed(1)} h`\n      ]);\n    });\n    \n    // Add summary table\n    autoTable(doc, {\n      head: [tableHeaders],\n      body: tableRows,\n      startY: startY,\n      theme: 'striped',\n      headStyles: {\n        fillColor: [59, 130, 246],\n        textColor: 255\n      }\n    });\n  }\n  \n  // Save the PDF\n  const fileName = view === 'monat'\n    ? `Kalender_${format(selectedMonth, 'yyyy-MM', { locale: de })}.pdf`\n    : `Kalender_${format(selectedMonth, 'yyyy', { locale: de })}.pdf`;\n  \n  doc.save(fileName);\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]
